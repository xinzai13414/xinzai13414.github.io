<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星仔极客</title>
  
  <subtitle>珍惜当下 不负此生</subtitle>
  <link href="https://xinzaigeek.68565200.xyz/atom.xml" rel="self"/>
  
  <link href="https://xinzaigeek.68565200.xyz/"/>
  <updated>2025-01-03T02:42:38.171Z</updated>
  <id>https://xinzaigeek.68565200.xyz/</id>
  
  <author>
    <name>星仔极客</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>项目</title>
    <link href="https://xinzaigeek.68565200.xyz/post/a2c247c4.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/a2c247c4.html</id>
    <published>2024-11-25T02:22:50.000Z</published>
    <updated>2025-01-03T02:42:38.171Z</updated>
    
    <content type="html"><![CDATA[<p>生肖抽奖卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">// 定义接口 (每个列表项的数据结构)</span><br><span class="line">interface ImageCount &#123;</span><br><span class="line">    url: string</span><br><span class="line">    count: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">    // 随机的生肖卡序号 0-5</span><br><span class="line">    @State randomIndex: number = -1 // 表示还没开始抽</span><br><span class="line"></span><br><span class="line">    // 基于接口, 准备数据</span><br><span class="line">    @State images: ImageCount[] = [</span><br><span class="line">        &#123; url: &#x27;app.media.bg_00&#x27;, count: 0 &#125;,</span><br><span class="line">        &#123; url: &#x27;app.media.bg_01&#x27;, count: 0 &#125;,</span><br><span class="line">        &#123; url: &#x27;app.media.bg_02&#x27;, count: 0 &#125;,</span><br><span class="line">        &#123; url: &#x27;app.media.bg_03&#x27;, count: 0 &#125;,</span><br><span class="line">        &#123; url: &#x27;app.media.bg_04&#x27;, count: 0 &#125;,</span><br><span class="line">        &#123; url: &#x27;app.media.bg_05&#x27;, count: 0 &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    // 控制遮罩的显隐</span><br><span class="line">    @State maskOpacity: number = 0 // 透明度</span><br><span class="line">    @State maskZIndex: number = -1 // 显示层级</span><br><span class="line"></span><br><span class="line">    // 控制图片的缩放</span><br><span class="line">    @State maskImgX: number = 0 // 水平缩放比</span><br><span class="line">    @State maskImgY: number = 0 // 垂直缩放比</span><br><span class="line"></span><br><span class="line">    // 控制中大奖遮罩的显隐</span><br><span class="line">    @State isGet: boolean = false</span><br><span class="line"></span><br><span class="line">    @State arr: string[] = [&#x27;pg&#x27;, &#x27;hw&#x27;, &#x27;xm&#x27;] // 奖池</span><br><span class="line">    @State prize: string = &#x27;&#x27; // 默认没中奖</span><br><span class="line"></span><br><span class="line">    build() &#123;</span><br><span class="line">        Stack() &#123;</span><br><span class="line">            // 初始化的布局结构</span><br><span class="line">            Column() &#123;</span><br><span class="line">                Grid() &#123;</span><br><span class="line">                    ForEach(this.images, (item: ImageCount, index: number) =&gt; &#123;</span><br><span class="line">                        GridItem() &#123;</span><br><span class="line">                            Badge(&#123;</span><br><span class="line">                                count: item.count,</span><br><span class="line">                                position: BadgePosition.RightTop,</span><br><span class="line">                                style: &#123;</span><br><span class="line">                                    fontSize: 14,</span><br><span class="line">                                    badgeSize: 20,</span><br><span class="line">                                    badgeColor: &#x27;#fa2a2d&#x27;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;) &#123;</span><br><span class="line">                                Image($r(item.url))</span><br><span class="line">                                    .width(80)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                .columnsTemplate(&#x27;1fr 1fr 1fr&#x27;)</span><br><span class="line">                    .rowsTemplate(&#x27;1fr 1fr&#x27;)</span><br><span class="line">                    .width(&#x27;100%&#x27;)</span><br><span class="line">                    .height(300)</span><br><span class="line">                    .margin(&#123; top: 100 &#125;)</span><br><span class="line"></span><br><span class="line">                Button(&#x27;立即抽卡&#x27;)</span><br><span class="line">                    .width(200)</span><br><span class="line">                    .backgroundColor(&#x27;#ed5b8c&#x27;)</span><br><span class="line">                    .margin(&#123; top: 50 &#125;)</span><br><span class="line">                    .onClick(() =&gt; &#123;</span><br><span class="line">                    // 点击时, 修改遮罩参数, 让遮罩显示</span><br><span class="line">                    this.maskOpacity = 1</span><br><span class="line">                    this.maskZIndex = 99</span><br><span class="line">                    // 点击时, 图片需要缩放</span><br><span class="line">                    this.maskImgX = 1</span><br><span class="line">                    this.maskImgY = 1</span><br><span class="line"></span><br><span class="line">                    // 计算随机数 Math.random()  [0,1) * (n + 1)</span><br><span class="line">                    this.randomIndex = Math.floor(Math.random() * 6)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            .width(&#x27;100%&#x27;)</span><br><span class="line">                .height(&#x27;100%&#x27;)</span><br><span class="line"></span><br><span class="line">            // 抽卡遮罩层 (弹层)</span><br><span class="line">            Column(&#123; space: 30 &#125;) &#123;</span><br><span class="line">                Text(&#x27;获得生肖卡&#x27;)</span><br><span class="line">                    .fontColor(&#x27;#f5ebcf&#x27;)</span><br><span class="line">                    .fontSize(25)</span><br><span class="line">                    .fontWeight(FontWeight.Bold)</span><br><span class="line">                Image($r(`app.media.img_0$&#123;this.randomIndex&#125;`))</span><br><span class="line">                    .width(200)</span><br><span class="line">                // 控制元素的缩放</span><br><span class="line">                    .scale(&#123;</span><br><span class="line">                    x: this.maskImgX,</span><br><span class="line">                    y: this.maskImgY</span><br><span class="line">                &#125;)</span><br><span class="line">                    .animation(&#123;</span><br><span class="line">                    duration: 500</span><br><span class="line">                &#125;)</span><br><span class="line">                Button(&#x27;开心收下&#x27;)</span><br><span class="line">                    .width(200)</span><br><span class="line">                    .height(50)</span><br><span class="line">                    .backgroundColor(Color.Transparent)</span><br><span class="line">                    .border(&#123; width: 2, color: &#x27;#fff9e0&#x27; &#125;)</span><br><span class="line">                    .onClick(() =&gt; &#123;</span><br><span class="line">                    // 控制弹层显隐</span><br><span class="line">                    this.maskOpacity = 0</span><br><span class="line">                    this.maskZIndex = -1</span><br><span class="line"></span><br><span class="line">                    // 图像重置缩放比为 0</span><br><span class="line">                    this.maskImgX = 0</span><br><span class="line">                    this.maskImgY = 0</span><br><span class="line"></span><br><span class="line">                    // 开心收下, 对象数组的情况需要更新, 需要修改替换整个对象</span><br><span class="line">                    // this.images[this.randomIndex].count++</span><br><span class="line">                    this.images[this.randomIndex] = &#123;</span><br><span class="line">                        url: `app.media.img_0$&#123;this.randomIndex&#125;`,</span><br><span class="line">                        count: this.images[this.randomIndex].count + 1</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    // 每次收完卡片, 需要进行简单的检索, 判断是否集齐</span><br><span class="line">                    // 需求: 判断数组项的count, 是否都大于0, 只要有一个等于0,就意味着没集齐</span><br><span class="line">                    let flag: boolean = true // 假设集齐</span><br><span class="line"></span><br><span class="line">                    // 验证是否集齐</span><br><span class="line">                    for (let item of this.images) &#123;</span><br><span class="line">                        if (item.count == 0) &#123;</span><br><span class="line">                            flag = false // 没集齐</span><br><span class="line">                            break // 后面的没必要判断了</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    this.isGet = flag</span><br><span class="line"></span><br><span class="line">                    // 判断是否中奖了, 如果是 需要抽奖</span><br><span class="line">                    if (flag) &#123;</span><br><span class="line">                        let randomIndex: number = Math.floor(Math.random() * 3)</span><br><span class="line">                        this.prize = this.arr[randomIndex]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            .justifyContent(FlexAlign.Center)</span><br><span class="line">                .width(&#x27;100%&#x27;)</span><br><span class="line">                .height(&#x27;100%&#x27;)</span><br><span class="line">            // 颜色十六进制色值,如果是八位,前两位,就是透明度</span><br><span class="line">                .backgroundColor(&#x27;#cc000000&#x27;)</span><br><span class="line">            // 设置透明度</span><br><span class="line">                .opacity(this.maskOpacity)</span><br><span class="line">                .zIndex(this.maskZIndex)</span><br><span class="line">            // 动画 animation, 当我们元素有状态的改变,可以添加animation做动画</span><br><span class="line">                .animation(&#123;</span><br><span class="line">                duration: 200</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            // 抽大奖的遮罩层</span><br><span class="line">            if (this.isGet) &#123;</span><br><span class="line">                Column(&#123; space: 30 &#125;) &#123;</span><br><span class="line">                    Text(&#x27;恭喜获得手机一部&#x27;)</span><br><span class="line">                        .fontColor(&#x27;#f5ebcf&#x27;)</span><br><span class="line">                        .fontSize(25)</span><br><span class="line">                        .fontWeight(700)</span><br><span class="line">                    Image($r(`app.media.$&#123;this.prize&#125;`))</span><br><span class="line">                        .width(300)</span><br><span class="line">                    Button(&#x27;再来一次&#x27;)</span><br><span class="line">                        .width(200)</span><br><span class="line">                        .height(50)</span><br><span class="line">                        .backgroundColor(Color.Transparent)</span><br><span class="line">                        .border(&#123; width: 2, color: &#x27;#fff9e0&#x27; &#125;)</span><br><span class="line">                        .onClick(() =&gt; &#123;</span><br><span class="line">                        this.isGet = false</span><br><span class="line">                        this.prize = &#x27;&#x27;</span><br><span class="line">                        this.images = [</span><br><span class="line">                            &#123; url: &#x27;app.media.bg_00&#x27;, count: 0 &#125;,</span><br><span class="line">                            &#123; url: &#x27;app.media.bg_01&#x27;, count: 0 &#125;,</span><br><span class="line">                            &#123; url: &#x27;app.media.bg_02&#x27;, count: 0 &#125;,</span><br><span class="line">                            &#123; url: &#x27;app.media.bg_03&#x27;, count: 0 &#125;,</span><br><span class="line">                            &#123; url: &#x27;app.media.bg_04&#x27;, count: 0 &#125;,</span><br><span class="line">                            &#123; url: &#x27;app.media.bg_05&#x27;, count: 0 &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                .justifyContent(FlexAlign.Center)</span><br><span class="line">                    .width(&#x27;100%&#x27;)</span><br><span class="line">                    .height(&#x27;100%&#x27;)</span><br><span class="line">                    .backgroundColor(&#x27;#cc000000&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;生肖抽奖卡&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa</summary>
      
    
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/categories/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/tags/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>0.ArkTS基础语法</title>
    <link href="https://xinzaigeek.68565200.xyz/post/d98607ab.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/d98607ab.html</id>
    <published>2024-11-24T02:22:50.000Z</published>
    <updated>2024-12-20T03:55:09.246Z</updated>
    
    <content type="html"><![CDATA[<p>打印日志：console.log(‘消息说明’,‘打印的内容’)</p><p>对象等复杂数据，需要日志打印需要JSON.stringify()转换</p><h1>变量</h1><h2 id="基础数据类型">基础数据类型</h2><p>① string 字符串, ‘’ 和 &quot;&quot;都可以</p><p>② number 数字</p><p>③ boolean 布尔（真、假）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//语法</span><br><span class="line">let 变量名: 类型 = 值  </span><br><span class="line"></span><br><span class="line">// 字符类型，&#x27;&#x27; 或 &quot;&quot; 包裹</span><br><span class="line">let title: string = &#x27;巨无霸汉堡&#x27;;</span><br><span class="line">console.log(&#x27;字符串title&#x27;,title);</span><br><span class="line"></span><br><span class="line">//数字</span><br><span class="line">let age: number = 18</span><br><span class="line">console.log(&#x27;年龄age:&#x27;,age);</span><br><span class="line"></span><br><span class="line">//布尔</span><br><span class="line">let islogin: boolean = true</span><br><span class="line">console.log(&#x27;是否登陆成功：&#x27;,islogin)</span><br><span class="line"></span><br><span class="line">//修改</span><br><span class="line">title = &#x27;xinzai&#x27;</span><br><span class="line">console.log(&#x27;字符串title&#x27;,title);</span><br><span class="line">age = 90</span><br><span class="line">console.log(&#x27;年龄age:&#x27;,age);</span><br><span class="line">islogin = false</span><br><span class="line">console.log(&#x27;是否登陆成功：&#x27;,islogin)</span><br></pre></td></tr></table></figure><h2 id="状态变量">状态变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@State 变量名: 变量类型 = 值</span><br><span class="line"></span><br><span class="line">@State msg3: string = &#x27;Hello World&#x27;</span><br></pre></td></tr></table></figure><h2 id="联合类型">联合类型</h2><p>灵活的数据类型，它修饰的变量可以存储不同类型的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let 变量: 类型1 | 类型2 | 类型3 = 值</span><br><span class="line"></span><br><span class="line">let judge : number | string = 100</span><br><span class="line">judge = &#x27;A&#x27;</span><br><span class="line">console.log(judge)  //A</span><br><span class="line">//变量值限定在一组数据范围内选择</span><br><span class="line">let gender: &#x27;man&#x27; | &#x27;woman&#x27; | &#x27;secret&#x27; = &#x27;secret&#x27;</span><br><span class="line">console.log(&#x27;性别：&#x27;,gender)</span><br></pre></td></tr></table></figure><h2 id="枚举类型">枚举类型</h2><p>约定变量只能在一组数据范围内选择值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enum 枚举名 &#123;  </span><br><span class="line">    常量1 = 值,  </span><br><span class="line">    常量2 = 值,  </span><br><span class="line">    ......  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义枚举</span><br><span class="line">enum ThemeColor&#123;</span><br><span class="line">    //常量列表</span><br><span class="line">    Red = &#x27;#ff0f29&#x27;,</span><br><span class="line">    Orange = &#x27;#ff7100&#x27;,</span><br><span class="line">    Green = &#x27;#30b30e&#x27;</span><br><span class="line">&#125;</span><br><span class="line">//给变量设定枚举类型</span><br><span class="line">let color: ThemeColor = ThemeColor.Red</span><br><span class="line">console.log(&#x27;颜色&#x27;,color)</span><br></pre></td></tr></table></figure><h1>常量</h1><p>用来存储不可变数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const 常量名: 类型 = 值</span><br><span class="line"></span><br><span class="line">const PI: number = 3.14</span><br><span class="line">console.log(&quot;PI&quot;,PI);</span><br></pre></td></tr></table></figure><h1>运算符</h1><p>一元运算符单独一行的时候前加和后加效果都一致</p><table><thead><tr><th style="text-align:center">算数运算符</th><th style="text-align:center">作用</th><th style="text-align:center">赋值运算符</th><th style="text-align:center">作用</th><th style="text-align:center">一元运算符</th><th style="text-align:center">作用</th><th style="text-align:center">比较运算符</th><th style="text-align:center">作用</th><th style="text-align:center">逻辑运算符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">+=</td><td style="text-align:center">加等于</td><td style="text-align:center">++i</td><td style="text-align:center">先加后使用</td><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">与，都真才真</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">-=</td><td style="text-align:center">减等于</td><td style="text-align:center">i++</td><td style="text-align:center">先使用后加</td><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于</td><td style="text-align:center">||</td><td style="text-align:center">或，一真则真</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">*=</td><td style="text-align:center">乘等于</td><td style="text-align:center">–i</td><td style="text-align:center">先减后使用</td><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">!</td><td style="text-align:center">非，取反</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">/=</td><td style="text-align:center">除等于</td><td style="text-align:center">i–</td><td style="text-align:center">先使用后减</td><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td style="text-align:center">%=</td><td style="text-align:center">取余等于</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">==</td><td style="text-align:center">判断相等</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">!=</td><td style="text-align:center">判断不等于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let num: number = 1</span><br><span class="line">let num1: number = 2</span><br><span class="line">console.log(&#x27;值&#x27;, num + num1)//3</span><br><span class="line"></span><br><span class="line">let num: number = 1</span><br><span class="line">console.log(&#x27;值&#x27;, num += 1)//2</span><br><span class="line"></span><br><span class="line">let num: number = 1</span><br><span class="line">//let a: number = num++ //1</span><br><span class="line">let a1: number = ++num    //2</span><br><span class="line">console.log(&#x27;值：&#x27;,a1)</span><br></pre></td></tr></table></figure><h1>字符串</h1><h2 id="字符串拼接">字符串拼接</h2><p>用于拼接字符串和变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let name: string = &#x27;小明</span><br><span class="line">console.log（&#x27;简介信息&#x27;，&#x27;名字是&#x27; + name)</span><br></pre></td></tr></table></figure><h2 id="模板字符串">模板字符串</h2><p>更适合于 多个变量 的字符串拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`...$&#123;变量名1&#125;.....$&#123;变量名2&#125;.....`</span><br><span class="line"></span><br><span class="line">let name: string = &#x27;xinzai&#x27;</span><br><span class="line">let age: number = 18</span><br><span class="line">console.log(&#x27;信息：&#x27;,`名字是$&#123;name&#125;，年龄是$&#123;age&#125;`)</span><br></pre></td></tr></table></figure><h1>类型转换</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//字符串转数字</span><br><span class="line">Number(变量名)//字符串 直接转数字，转换失败返回NaN（字符串中包含非数字）</span><br><span class="line">parseInt(变量名)//去掉小数部分 转数字，转换失败返回NaN</span><br><span class="line">parseFloat(变量名)//保留小数部分 转数字，转换失败返回NaN</span><br><span class="line"></span><br><span class="line">let num: string = &#x27;1.1&#x27;</span><br><span class="line">let num1: string = &#x27;1.1a1&#x27;</span><br><span class="line">console.log(&#x27;值：&#x27;,Number(num))   //1.1</span><br><span class="line">console.log(&#x27;值：&#x27;,parseInt(num))//1</span><br><span class="line">console.log(&#x27;值：&#x27;,parseFloat(num))   //1.1</span><br><span class="line">console.log(&#x27;值：&#x27;,Number(num1))  //NaN</span><br><span class="line"></span><br><span class="line">//数字转字符串</span><br><span class="line">变量名.toString()//数字直接转字符串</span><br><span class="line">变量名.toFixed()//四舍五入转字符串，可设置保留几位小数</span><br><span class="line"></span><br><span class="line">let num: number = 1.12523</span><br><span class="line">console.log(&#x27;值：&#x27;,num.toString())   //&#x27;1.12523&#x27;</span><br><span class="line">console.log(&#x27;值：&#x27;,num.toFixed()) //&#x27;1&#x27;</span><br><span class="line">console.log(&#x27;值：&#x27;,num.toFixed(2))    //&#x27;1.13&#x27;，保留两位小数</span><br></pre></td></tr></table></figure><h1>数组</h1><p>下标从零开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let 数组名: 类型[] = []//定义</span><br><span class="line">let 数组名: 类型[] = [数据1, 数据2,...]</span><br><span class="line"></span><br><span class="line">let names: string[] = [&#x27;nihao&#x27;,&#x27;xinzai&#x27;,&#x27;bs&#x27;]</span><br><span class="line">console.log(&#x27;数组：&#x27;,names)</span><br><span class="line">console.log(&#x27;1:&#x27;,names[1])</span><br></pre></td></tr></table></figure><h2 id="数组的操作">数组的操作</h2><p>任意位置 增加 或删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名.splice(起始位置, 删除的个数, 新增元素1, 新增元素2, ......)//从起始位置开始增加或删除</span><br><span class="line"></span><br><span class="line">name.splice(1,1,&#x27;123&#x27;)</span><br><span class="line">console.log(&#x27;任意新增/删除：&#x27;,name)    //xinzai,123,wfeng,xiaowng</span><br></pre></td></tr></table></figure><h3 id="查找">查找</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组名[下标]//对应下标中的值</span><br><span class="line">数组名.length//数组长度</span><br><span class="line"></span><br><span class="line">let name: string[] = [&#x27;xinzai&#x27;,&#x27;jueni&#x27;,&#x27;wfeng&#x27;,&#x27;xiaowng&#x27;]</span><br><span class="line">console.log(&#x27;查询第1个数组中的值：&#x27;, name[1])//jueni</span><br><span class="line">console.log(&#x27;长度：&#x27;, name.length)//4</span><br></pre></td></tr></table></figure><h3 id="修改">修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名[下标] = 新值</span><br><span class="line"></span><br><span class="line">name[2] = &#x27;xinzai&#x27;</span><br><span class="line">console.log(&#x27;修改：&#x27;,name)//修改：xinzai,jueni,xinzai,xiaowng</span><br></pre></td></tr></table></figure><h3 id="增加">增加</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组名.unshift(数据1, 数据2, 数据3, ......)//从开头加</span><br><span class="line">数组名.push(数据1, 数据2, 数据3, ......)//从结尾加</span><br><span class="line"></span><br><span class="line">name.unshift(&#x27;123&#x27;,&#x27;321&#x27;)</span><br><span class="line">console.log(&#x27;增加：&#x27;,name) //123,321,xinzai,jueni,wfeng,xiaowng</span><br><span class="line">name.push(&#x27;123&#x27;,&#x27;321&#x27;)</span><br><span class="line">console.log(&#x27;增加：&#x27;,name) //xinzai,jueni,wfeng,xiaowng,123,321</span><br></pre></td></tr></table></figure><h3 id="删除">删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组名.shift()//从开头删</span><br><span class="line">数组名.pop()//从结尾删</span><br><span class="line"></span><br><span class="line">name.shift()</span><br><span class="line">console.log(&#x27;删除：&#x27;,name) //jueni,wfeng,xiaowng</span><br><span class="line">name.pop()</span><br><span class="line">console.log(&#x27;删除：&#x27;,name) //xinzai,jueni,wfeng</span><br></pre></td></tr></table></figure><h2 id="遍历数组">遍历数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//方式一：普通for循环遍历输出</span><br><span class="line">let name: string[] = [&#x27;xinzai&#x27;,&#x27;lisi&#x27;,&#x27;wangwu&#x27;]</span><br><span class="line">for (let i = 0;i &lt; name.length;i++)&#123;</span><br><span class="line">    console.log(&#x27;名字&#x27;,name[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方式二</span><br><span class="line">for (let item of 数组名) &#123;&#125;//item: 声明的一个变量, 用来在循环的时候接收 每一个数组元素</span><br><span class="line"></span><br><span class="line">let name: string[] = [&#x27;xinzai&#x27;,&#x27;lisi&#x27;,&#x27;wangwu&#x27;]</span><br><span class="line">for (let item of name)&#123;</span><br><span class="line">    console.log(&#x27;名字&#x27;,item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>对象数组</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//定义接口</span><br><span class="line">interface  接口名&#123;</span><br><span class="line">    //属性</span><br><span class="line">&#125;</span><br><span class="line">//定义对象数组</span><br><span class="line">let 对象数组名: 接口名[] = [&#123; 属性名1: 值, 属性名2: 值, ... &#125;, ...]</span><br><span class="line">//访问</span><br><span class="line">对象数组名[下标].属性值</span><br><span class="line">//需要修改数据，要整个对象都修改，不能修改对象中的一个数据</span><br><span class="line">this.对象数组名[下标值] = &#123;</span><br><span class="line">    属性名1: 值</span><br><span class="line">    属性名2: 值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface  Person&#123;</span><br><span class="line">    stuId: number</span><br><span class="line">    name: string</span><br><span class="line">&#125;</span><br><span class="line">let pArr: Person[] = [&#123;stuId: 1,name:&#x27;小红&#x27;&#125;,&#123;stuId: 2, name:&#x27;xinzai&#x27;&#125;]</span><br><span class="line">console.log(&#x27;数&#x27;,pArr[1].name)</span><br><span class="line">this.images[this.random] = &#123;</span><br><span class="line">    url: `app.media.img_0$&#123;this.random&#125;`,</span><br><span class="line">    count1: this.images[this.random].count1 + 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>函数(function)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//定义函数</span><br><span class="line">function 函数名(形参1: 类型, 形参2: 类型,...): 返回值类型&#123;</span><br><span class="line">    return 返回值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用函数</span><br><span class="line">let 变量名: 类型 = 函数名(实参1,实参2,...)</span><br><span class="line"></span><br><span class="line">//定义函数</span><br><span class="line">function test()&#123;</span><br><span class="line">    console.log(&#x27;五角星&#x27;,&#x27;*&#x27;)</span><br><span class="line">    console.log(&#x27;五角星&#x27;,&#x27;**&#x27;)</span><br><span class="line">    console.log(&#x27;五角星&#x27;,&#x27;***&#x27;)</span><br><span class="line">    console.log(&#x27;五角星&#x27;,&#x27;****&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">//调用函数</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">function buy(price: number,num: number)&#123;</span><br><span class="line">    let result: number = price*num</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;价格：&#x27;,buy(10,3));</span><br></pre></td></tr></table></figure><h1>箭头函数</h1><p>普通函数和箭头函数，在后面开发中会有不同的使用场景</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let 函数名 = (形参1: 类型, 形参2: 类型,...) =&gt; &#123;  </span><br><span class="line">    // 函数体</span><br><span class="line">    return 返回值</span><br><span class="line">&#125;</span><br><span class="line">函数名(实参1,实参2,...)</span><br><span class="line"></span><br><span class="line">let num_Price = (price: number, num: number)=&gt;&#123;</span><br><span class="line">    let result: number = price*num</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;总价格：&#x27;, num_Price(3,2))</span><br></pre></td></tr></table></figure><h1>剩余参数和展开运算符</h1><p>将 函数 或 方法 中一个不定数量的参数表示为一个数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(参数1, 参数2, ...剩余参数数组)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function num(a1: number,a2: number,...theArgs:number[])&#123;</span><br><span class="line">    let count = a1+a2</span><br><span class="line">    for(const flags of theArgs)&#123;</span><br><span class="line">        count += flags</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;值&#x27;,count)</span><br><span class="line">    return count</span><br><span class="line">&#125;</span><br><span class="line">num(1,2,3)</span><br></pre></td></tr></table></figure><p>展开运算符只能用在数组上(一般用在合并上)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const 数组名: 数据类型[] = [...数据名1, ...数组名2]</span><br><span class="line"></span><br><span class="line">const a1: number[] = [1,2,3,4,5,6]</span><br><span class="line">const a2: number[] = [3,4,6,17,27]</span><br><span class="line">const num: number[] = [...a1,...a2]</span><br><span class="line">console.log(&#x27;结果&#x27;,num)</span><br></pre></td></tr></table></figure><h1>接口</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//定义接口约束对象中变量及函数的类型</span><br><span class="line">interface 接口名&#123;</span><br><span class="line">    属性1: 类型1</span><br><span class="line">    属性2: 类型2</span><br><span class="line">    属性3: 类型3</span><br><span class="line"></span><br><span class="line">    方法名: (参数: 类型) =&gt; 返回值类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义接口</span><br><span class="line">interface Person&#123;</span><br><span class="line">    //声明属性类型</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">    weight: number</span><br><span class="line"></span><br><span class="line">    //声明方法</span><br><span class="line">    dance: () =&gt; void</span><br><span class="line">    sing: (sing: string) =&gt; void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口继承">接口继承</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface 接口2 extends 接口1 &#123;</span><br><span class="line">    //属性2:类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IAnimal&#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">&#125;</span><br><span class="line">interface IDog extends IAnimal&#123;</span><br><span class="line">    color: string</span><br><span class="line">&#125;</span><br><span class="line">let dog1: IDog = &#123;</span><br><span class="line">    //不仅要实现IDog子接口还需要实现父接口</span><br><span class="line">    name: &#x27;s&#x27;,</span><br><span class="line">    age: 12,</span><br><span class="line">    color: &#x27;s&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口实现">接口实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class 类 implements 接口&#123;</span><br><span class="line">    // 必须实现 接口中定义的 属性、方法，</span><br><span class="line">    // 否则会报错</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IDog &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">    color: string</span><br><span class="line">    jump: () =&gt; void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Test implements IDog &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">    color: string</span><br><span class="line"></span><br><span class="line">    constructor(name: string, age: number, color: string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">        this.color = color</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jump = () =&gt; &#123;</span><br><span class="line">        console.log(&#x27;名字&#x27;,this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let test:Test = new Test(&#x27;x&#x27;,12,&#x27;s&#x27;)</span><br><span class="line">test.jump()</span><br></pre></td></tr></table></figure><h1>对象</h1><p>存储多个不同数据的容器</p><p>定义的接口可以给不同的对象重复使用，但对象需要的是相同的结构类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//定义对象并使用属性及方法</span><br><span class="line">let 对象名称: 对象结构类型 = &#123;</span><br><span class="line">    属性名1: 值,</span><br><span class="line">    属性名2: 值,</span><br><span class="line">    </span><br><span class="line">    方法名: (形参名1: 类型,...) =&gt;&#123;</span><br><span class="line">        //方法体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用属性及方法</span><br><span class="line">对象名.属性名1</span><br><span class="line">对象名.方法名1()</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//定义对象</span><br><span class="line">let ym: Person = &#123;</span><br><span class="line">    name: &#x27;李四&#x27;,</span><br><span class="line">    age: 19,</span><br><span class="line">    weight: 88,</span><br><span class="line"></span><br><span class="line">    dance: () =&gt;&#123;</span><br><span class="line">    console.log(&#x27;nihao&#x27;,&#x27;xinzai&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    sing: (song: string) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;唱歌：&#x27;,song)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//调用对象属性</span><br><span class="line">console.log(&#x27;名字&#x27;,ym.name)</span><br><span class="line">console.log(&#x27;年龄：&#x27;,ym.age)</span><br><span class="line">//调用对象方法</span><br><span class="line">ym.dance()</span><br><span class="line">ym.sing(&#x27;奇迹&#x27;)</span><br></pre></td></tr></table></figure><h1>分支语句</h1><h2 id="if">if</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let score: number = 66</span><br><span class="line">if (score &gt;= 90)&#123;</span><br><span class="line">    console.log(&#x27;优秀&#x27;)</span><br><span class="line">&#125;else if (score &gt;= 70)&#123;</span><br><span class="line">    console.log(&#x27;良好&#x27;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    console.log(&#x27;不及格&#x27;)  //不及格</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch">switch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let m: number = 2</span><br><span class="line">switch (m)&#123;</span><br><span class="line">    case 1:</span><br><span class="line">        console.log(&#x27;1&#x27;)</span><br><span class="line">        break</span><br><span class="line">    case 2:</span><br><span class="line">        console.log(&#x27;2&#x27;)    //2</span><br><span class="line">        break</span><br><span class="line">    case 3:</span><br><span class="line">        console.log(&#x27;3&#x27;)</span><br><span class="line">        break</span><br><span class="line">    default :</span><br><span class="line">        console.log(&#x27;其他&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三元条件表达式">三元条件表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//当变量名1 的值大于 变量名2 的值，返回变量名1 的值否则返回变量名2 的值</span><br><span class="line">变量名1 &gt; 变量名2? 变量名1 : 变量名2</span><br><span class="line"></span><br><span class="line">let num1: number = 5</span><br><span class="line">let num2: number = 10</span><br><span class="line">let res: number = num1 &gt; num2 ? num1 : num2// 返回较大值</span><br><span class="line">console.log(&#x27;结果是&#x27;, res)//10</span><br></pre></td></tr></table></figure><h1>循环语句</h1><h2 id="for">for</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (let i: number = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    console.log(&#x27;for&#x27;, &#x27;重复执行的代码&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (const arg of 数组名) &#123;</span><br><span class="line">   console.log(&#x27;值&#x27;, &#x27;arg&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while">while</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while (条件) &#123;</span><br><span class="line">    条件成立重复执行的代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let i: number = 1</span><br><span class="line">while (i &lt; 5) &#123;</span><br><span class="line">    console.log(&#x27;while~i&#x27;, &#x27;重复执行的代码&#x27;)</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>随机数生成</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Math.random()//默认0~1</span><br><span class="line">//需要0~5，需要乘6</span><br><span class="line"></span><br><span class="line">Math.floor()//向下取整</span><br></pre></td></tr></table></figure><h1>Class类</h1><p>用于 创建对象 模板。同时类声明也会引入一个 新类型，可定义其 实例属性、方法 和 构造函数</p><h2 id="语法">语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 类名 首字母大写（规范）</span><br><span class="line">class 类名&#123;</span><br><span class="line">    // 1. 实例属性(字段)</span><br><span class="line">    // 2. 构造函数</span><br><span class="line">    // 3. 方法</span><br><span class="line">&#125;</span><br><span class="line">// 使用类 实例化对象 基于类 创建对象</span><br><span class="line">let 实例化类名: 类名 = new 类名()</span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">字段名.类型 = 值//没有构造函数时必须有初始化值</span><br><span class="line">字段名?:类型</span><br><span class="line"></span><br><span class="line">class cat&#123;</span><br><span class="line">    name: string = &#x27;小黑&#x27;</span><br><span class="line">    food?: string</span><br><span class="line">&#125;</span><br><span class="line">let mycat: cat = new cat()</span><br><span class="line">console.log(&#x27;名字&#x27;,mycat.name)</span><br><span class="line">//mycat.food = &#x27;小黄鱼&#x27;</span><br><span class="line">// ?. 可以保证若food没有赋值不会报错，没有赋值显示undefined</span><br><span class="line">console.log(&#x27;食物&#x27;,mycat?.food)</span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p>不同实例 有不同的 字段 初始值，在实例化对象时将参数传进构造函数将字段初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">constructor(形参名1: 类型, 形参名2: 类型) &#123;//也可以传对象</span><br><span class="line">    this.属性名1 = 形参1</span><br><span class="line">    this.属性名2 = 形参2</span><br><span class="line">&#125;</span><br><span class="line">let 实例化类名: 类名 = new 类名(值1 ,值2)//传入的参数必须和构造函数形参顺序一致</span><br><span class="line"></span><br><span class="line">class Food&#123;</span><br><span class="line">    name: string</span><br><span class="line">    price?: number</span><br><span class="line"></span><br><span class="line">    constructor(name: string, price: number) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.price = price</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let mycat: Food = new Food(&#x27;西蓝花&#x27;,20)</span><br><span class="line">console.log(&#x27;名字&#x27;,mycat.name)</span><br><span class="line">console.log(&#x27;食物&#x27;,mycat.price)</span><br><span class="line"></span><br><span class="line">//扩展，使用接口，构造函数传入对象</span><br><span class="line">interface IFood&#123;</span><br><span class="line">    name: string</span><br><span class="line">    price: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Food&#123;</span><br><span class="line">    name: string</span><br><span class="line">    price?: number</span><br><span class="line"></span><br><span class="line">    constructor(paramsObj: IFood) &#123;</span><br><span class="line">        this.name = paramsObj.name</span><br><span class="line">        this.price = paramsObj.price</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let myfood: Food = new Food(&#123;</span><br><span class="line">    //此时传入的参数可以不用按照构造函数参数的顺序</span><br><span class="line">    name: &#x27;菜心&#x27;,</span><br><span class="line">    price: 20</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#x27;名字&#x27;,myfood.name)</span><br><span class="line">console.log(&#x27;食物&#x27;,myfood.price)</span><br></pre></td></tr></table></figure><h2 id="定义方法">定义方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">方法名(参数...): 返回值类型&#123;</span><br><span class="line">    // 逻辑...</span><br><span class="line">    // 可以通过 this 获取实例对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Food&#123;</span><br><span class="line">    name: string</span><br><span class="line">    price?: number</span><br><span class="line"></span><br><span class="line">    constructor(name: string, price: number) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">        this.price = price</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    style(name:string)&#123;</span><br><span class="line">        console.log(`你好$&#123;name&#125;`,`菜名$&#123;this.name&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let myfood: Food = new Food(&#x27;西蓝花&#x27;,20)</span><br><span class="line">myfood.style(&#x27;xinzai&#x27;)</span><br></pre></td></tr></table></figure><h2 id="静态属性和静态方法">静态属性和静态方法</h2><p>给类添加 静态属性、方法，通过类名访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static 静态属性名: 类型 = 值</span><br><span class="line">static 静态方法名(参数): 返回值类型&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Roboot&#123;</span><br><span class="line">    static version: string = &#x27;v2.0&#x27;</span><br><span class="line">    static getRomdom(): number&#123;</span><br><span class="line">        return Math.random()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;版本&#x27;,Roboot.version)</span><br><span class="line">console.log(&#x27;随机数&#x27;,Roboot.getRomdom())</span><br></pre></td></tr></table></figure><h2 id="继承">继承</h2><p>子类可以继承父类的方法和属性，super 可以访问父类的实例字段、实例方法和构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类&#123;</span><br><span class="line">    // 自己的字段（属性）</span><br><span class="line">    // 自己的方法</span><br><span class="line">    // 可以重写父类方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">    </span><br><span class="line">    constructor(name: string,age: number) &#123;</span><br><span class="line">        this.age = age</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi()&#123;</span><br><span class="line">        console.log(&#x27;大家好&#x27;,this.name,this.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Student extends Person&#123;</span><br><span class="line">    worker: string = &#x27;学习&#x27;   //子类自己的属性</span><br><span class="line"></span><br><span class="line">    constructor(name: string,age: number, worker: string) &#123;</span><br><span class="line">        //子类无法继承父类构造方法，需要类似重写重新调用</span><br><span class="line">        super(name,age)</span><br><span class="line">        this.worker = worker    //初始化子类属性</span><br><span class="line">    &#125;</span><br><span class="line">    //重写父类方法</span><br><span class="line">    sayHi(): void &#123;</span><br><span class="line">        super.sayHi()   //调用父类的方法</span><br><span class="line">        console.log(&#x27;hello&#x27;, this.name,this.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let student: Student = new Student(&#x27;李四&#x27;,19,&#x27;学习&#x27;)</span><br></pre></td></tr></table></figure><h2 id="检测实例">检测实例</h2><p>instanceof 检测某个对象是否是某个类的实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">&#125;</span><br><span class="line">class Student extends Person&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let student: Student = new Student()</span><br><span class="line">console.log(&#x27;判断结果&#x27;, student instanceof Person)</span><br><span class="line"></span><br><span class="line">let temp: number[] = []</span><br><span class="line">console.log(&#x27;判断结果&#x27;,temp instanceof Array)   //判断变量是否是数组</span><br></pre></td></tr></table></figure><h2 id="修饰符">修饰符</h2><p>readonly：只可以取值，无法修改</p><p>private：修饰的成员只能在本类访问，不能在声明该成员的类之外访问, 包括子类</p><p>protected：与private修饰符非常相似，不同点protected修饰的成员允许在 派生类(子类)中访问</p><p>public：任何地方都可以访问，省略不写默认为 public</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">readonly legs: number = 4</span><br><span class="line"></span><br><span class="line">class 类&#123;</span><br><span class="line">    private 属性:类型</span><br><span class="line">    private 方法()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 类&#123;</span><br><span class="line">    protected 属性:类型</span><br><span class="line">    protected 方法()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>泛型</h1><p>让【函数】等， 与多种【不同的类型】一起工作，灵活可复用</p><h2 id="泛型函数">泛型函数</h2><p>类型是 可变 的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function 函数名&lt;泛型参数名&gt;(形参名1: 泛型参数名) : 泛型参数名&#123;</span><br><span class="line">&#125;</span><br><span class="line">//调用，类型传了什么类型，形参和返回值类型都是同样的类型</span><br><span class="line">函数名&lt;类型&gt;(实参)</span><br><span class="line">函数名(实参)//调用时也可以不用显式写出类型，会根据输入的参数判断</span><br><span class="line"></span><br><span class="line">function fn&lt;T&gt;(name: T): T &#123;</span><br><span class="line">    return name</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(&#x27;n&#x27;))</span><br><span class="line">console.log(&#x27;zhi&#x27;,fn&lt;number[]&gt;([1,2,3,45,5]))</span><br></pre></td></tr></table></figure><p>进阶</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function fn&lt;T&gt;(s: T[]): T[] &#123;</span><br><span class="line">    return s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn1&lt;T&gt;(s: T[]): T &#123;</span><br><span class="line">    return s[s.length-1]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(&#x27;值&#x27;, fn&lt;Number&gt;([1, 2, 3, 4, 5]).length)</span><br><span class="line">console.log(&#x27;值&#x27;, fn&lt;string&gt;([&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]).length)</span><br><span class="line">console.log(&#x27;值&#x27;, fn1&lt;string&gt;([&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;40&#x27;]))</span><br></pre></td></tr></table></figure><h3 id="多个泛型参数">多个泛型参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fn&lt;T1,T2&gt; (parm1:T1,parm2:T2)&#123;</span><br><span class="line">    console.log(&#x27;z1&#x27;,parm1)</span><br><span class="line">    console.log(&#x27;z2&#x27;,parm2)</span><br><span class="line">&#125;</span><br><span class="line">fn(&#x27;aa&#x27;,123)</span><br></pre></td></tr></table></figure><h2 id="泛型约束">泛型约束</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface 接口&#123;</span><br><span class="line">    //属性: 类型</span><br><span class="line">&#125;</span><br><span class="line">function 函数&lt;Type extends 接口&gt;()&#123;&#125;// 传入的类型必须要有 接口中的属性</span><br><span class="line"></span><br><span class="line">interface Ilength &#123;</span><br><span class="line">    length: number</span><br><span class="line">&#125;</span><br><span class="line">function fn&lt;T extends Ilength&gt;(param: T): T &#123;</span><br><span class="line">    return param</span><br><span class="line">&#125;</span><br><span class="line">//传入的参数必须有接口中length属性</span><br><span class="line">console.log(&#x27;值&#x27;, fn(&#x27;132&#x27;))</span><br><span class="line"></span><br><span class="line">class Desk &#123;</span><br><span class="line">    length: number = 2</span><br><span class="line">&#125;</span><br><span class="line">let d = new Desk()</span><br><span class="line">fn&lt;Desk&gt;(d)</span><br></pre></td></tr></table></figure><h2 id="泛型接口">泛型接口</h2><h2 id="泛型类">泛型类</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打印日志：console.log(‘消息说明’,‘打印的内容’)&lt;/p&gt;
&lt;p&gt;对象等复杂数据，需要日志打印需要JSON.stringify()转换&lt;/p&gt;
&lt;h1&gt;变量&lt;/h1&gt;
&lt;h2 id=&quot;基础数据类型&quot;&gt;基础数据类型&lt;/h2&gt;
&lt;p&gt;① string 字符串, ‘</summary>
      
    
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/categories/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/tags/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>1.界面开发</title>
    <link href="https://xinzaigeek.68565200.xyz/post/de777d6b.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/de777d6b.html</id>
    <published>2024-11-23T02:23:35.000Z</published>
    <updated>2024-12-20T03:55:12.311Z</updated>
    
    <content type="html"><![CDATA[<h1>组件属性方法</h1><p>Ctrl+p：提示方法</p><table><thead><tr><th style="text-align:center">属性方法</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">.width()，参数：数字 或 数字%</td><td style="text-align:center">宽度</td></tr><tr><td style="text-align:center">.height()，参数：数字 或 数字%</td><td style="text-align:center">高度</td></tr><tr><td style="text-align:center">.aspectRatio(数字)，参数比例</td><td style="text-align:center">宽高比例</td></tr><tr><td style="text-align:center">.pading()，参数：数字 或 {top/right/bottom(下)/left: 数字}</td><td style="text-align:center">内边距</td></tr><tr><td style="text-align:center">.margin()，参数：数字 或 {top/right/bottom(下)/left: 数字}</td><td style="text-align:center">外边距</td></tr><tr><td style="text-align:center">.border(参数)，参数：数值 或 对象 (四边单独设置)</td><td style="text-align:center">边框</td></tr><tr><td style="text-align:center">.borderRadius(参数)，参数：数值 或 对象 (四个角单独设置)</td><td style="text-align:center">圆角</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">.backgroundcolor()，参数：Color.自带枚举颜色 或 ‘#十六进制’</td><td style="text-align:center">背景色</td></tr><tr><td style="text-align:center">.backgroundImage(背景图地址, 背景图平铺方式)，图地址：本地或图片链接</td><td style="text-align:center">背景图</td></tr><tr><td style="text-align:center">.backgroundImagePosition(参数)</td><td style="text-align:center">背景图位置</td></tr><tr><td style="text-align:center">.backgroundImageSize(宽高对象 或 枚举)</td><td style="text-align:center">背景图尺寸</td></tr><tr><td style="text-align:center">.fillColor()，参数：Color.自带枚举颜色 或 ‘#十六进制’</td><td style="text-align:center">svg图标颜色</td></tr><tr><td style="text-align:center">.fontsize(数字)，默认16</td><td style="text-align:center">字体大小</td></tr><tr><td style="text-align:center">.fontWeight()，参数：FontWeight.自带枚举粗细 或 200~900值(默认400,粗700)</td><td style="text-align:center">字体粗细</td></tr><tr><td style="text-align:center">.fontColor()，参数：Color.自带枚举颜色 或 ‘#十六进制’</td><td style="text-align:center">字体颜色</td></tr><tr><td style="text-align:center">.textAlign(TextAlign.枚举值)</td><td style="text-align:center">字体对齐</td></tr><tr><td style="text-align:center">.fontStyle(FontStyle.Italic)</td><td style="text-align:center">字体倾斜</td></tr><tr><td style="text-align:center">.lineHeight(数字)</td><td style="text-align:center">行高</td></tr><tr><td style="text-align:center">.maxLines(行数)</td><td style="text-align:center">显示最大的行数</td></tr><tr><td style="text-align:center">.placeholderColor()，参数：Color.自带枚举颜色 或 ‘#十六进制’</td><td style="text-align:center">输入框占位符字体颜色</td></tr><tr><td style="text-align:center">.type(InputType.Normal)</td><td style="text-align:center">基本输入模式，无特殊限制</td></tr><tr><td style="text-align:center">.type(InputType.Password)</td><td style="text-align:center">密码输入模式</td></tr><tr><td style="text-align:center">{space: 间隙大小}</td><td style="text-align:center">控制组件间的距离</td></tr><tr><td style="text-align:center">.zIndex(数字)</td><td style="text-align:center">层级</td></tr><tr><td style="text-align:center">.position({x: 数字, y: 数字})</td><td style="text-align:center">绝对定位</td></tr><tr><td style="text-align:center">.layoutWeight(数字)</td><td style="text-align:center">自适应伸缩</td></tr><tr><td style="text-align:center">.opacity(数字) //0~1</td><td style="text-align:center">透明度</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h1>简单界面布局</h1><p>构建页面的最小单位就是 “组件”</p><p>布局思路：先排版，再放内容，再美化</p><p>组件分类：</p><ul><li>基础组件：界面呈现的基础元素<ul><li>如：文字、图片、按钮等</li></ul></li><li>容器组件：控制布局排布<ul><li>如：<code>Row行</code>、<code>Column列</code>(默认有居中效果)等</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">build() &#123;</span><br><span class="line">    //最外层只能有一个容器组件</span><br><span class="line">    容器组件()&#123;</span><br><span class="line">        基础组件(参数)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">build() &#123;</span><br><span class="line">    //纵向排列</span><br><span class="line">    Column()&#123;</span><br><span class="line">        Text(&#x27;小说简介&#x27;)</span><br><span class="line"></span><br><span class="line">        //横向排列</span><br><span class="line">        Row()&#123;</span><br><span class="line">            Text(&#x27;都市&#x27;)</span><br><span class="line">            Text(&#x27;都市生活&#x27;)</span><br><span class="line">            Text(&#x27;情感&#x27;)</span><br><span class="line">            Text(&#x27;男频&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>组件属性方法的使用</h1><p>参数有特殊符号都需要 ‘’ 包裹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">容器组件() &#123;</span><br><span class="line">&#125;</span><br><span class="line">.属性方法1(参数)</span><br><span class="line">.属性方法2(参数)</span><br><span class="line"></span><br><span class="line">基础组件(参数)</span><br><span class="line">    .属性方法1(参数)</span><br><span class="line">    .属性方法2(参数)</span><br><span class="line"></span><br><span class="line">build() &#123;</span><br><span class="line">    //纵向排列</span><br><span class="line">    Column()&#123;</span><br><span class="line">        Text(&#x27;小说简介&#x27;)</span><br><span class="line">            .fontSize(20)</span><br><span class="line">            .width(&#x27;100%&#x27;)  //有特殊符号都需要&#x27;&#x27;包裹</span><br><span class="line">            .height(30)</span><br><span class="line">        //.fontWeight(FontWeight.Bold)</span><br><span class="line">            .fontWeight(700)</span><br><span class="line">            .fontColor(Color.Red)</span><br><span class="line"></span><br><span class="line">        //横向排列</span><br><span class="line">        Row()&#123;</span><br><span class="line">            Text(&#x27;都市&#x27;)</span><br><span class="line">                .width(50)</span><br><span class="line">                .height(30)</span><br><span class="line">                .backgroundColor(Color.Orange)</span><br><span class="line">            Text(&#x27;都市生活&#x27;)</span><br><span class="line">                .width(90)</span><br><span class="line">                .height(30)</span><br><span class="line">                .backgroundColor(&#x27;#32f2&#x27;)</span><br><span class="line">            Text(&#x27;情感&#x27;)</span><br><span class="line">                .width(50)</span><br><span class="line">                .height(30)</span><br><span class="line">                .backgroundColor(Color.Yellow)</span><br><span class="line">        &#125;</span><br><span class="line">        .width(&#x27;100%&#x27;)</span><br><span class="line">        .height(30)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>文本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Text(&#x27;文本&#x27;)</span><br><span class="line">Text()&#123;</span><br><span class="line">    ImageSpan(图片资源)//文本中小图标</span><br><span class="line">    Span(&#x27;文本&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>文字溢出省略</h1><p>需要配合<code>.maxLines(行数)</code>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.textOverflow(&#123;</span><br><span class="line">    //XXX：文本超出后显示的样式</span><br><span class="line">    overflow: TextOverflow.XXX</span><br><span class="line">&#125;)</span><br><span class="line">    .maxLines(行数)</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Text(&#x27;HarmonyOS开发初体验&#x27;)</span><br><span class="line">        .width(&#x27;100%&#x27;)</span><br><span class="line">        .fontSize(20)</span><br><span class="line">        .lineHeight(20)</span><br><span class="line">        .fontWeight(FontWeight.Bold)</span><br><span class="line">    Text(&#x27;方舟开发框架（简称ArkUl）为HarmonyOS应用的\n&#x27; +</span><br><span class="line">         &#x27;UI开发提供了完整的基础设施，包括简洁的UI语\n&#x27; +</span><br><span class="line">         &#x27;法、丰富的UI功能（组件、布局、动画以及交互事\n&#x27; +</span><br><span class="line">         &#x27;件），以及实时界面预览工具等，可以支持开发者\n&#x27; +</span><br><span class="line">         &#x27;进行可视化界面开发&#x27;)</span><br><span class="line">        .width(&#x27;100%&#x27;)</span><br><span class="line">        .lineHeight(20)</span><br><span class="line">        .textOverflow(&#123;</span><br><span class="line">        overflow: TextOverflow.Ellipsis</span><br><span class="line">    &#125;)</span><br><span class="line">        .maxLines(2)</span><br><span class="line">&#125;</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br></pre></td></tr></table></figure><h1>图片组件</h1><p>工程中图片存放路径：<code>src/main/resources/base/media</code> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Image(&#x27;https://www.itheima.com/images/logo.png&#x27;)//网络图片资源</span><br><span class="line">Image( $r(&#x27;app.media.文件名&#x27;) )//本地图片资源</span><br><span class="line"></span><br><span class="line">Column() &#123;</span><br><span class="line">    Image(&#x27;https://www.itheima.com/images/logo.png&#x27;)</span><br><span class="line">        .width(200) //只需设置宽或高 就会等比例缩放</span><br><span class="line">    Image($r(&#x27;app.media.background&#x27;))</span><br><span class="line">        .width(200)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>输入框 与 按钮</h1><blockquote><p>placeholder 提示文本</p><p>type(InputType.Normal)：基本输入模式，无特殊限制</p><p>type(InputType.Password)：密码输入模式</p><p>给 Column 或 Row 设置 {space: 间隙大小}：控制组件间的距离</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//输入框</span><br><span class="line">TextInput(&#123;</span><br><span class="line">    placeholder: &#x27;占位符文本&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">.placeholderColor()//十六进制或枚举值</span><br><span class="line"></span><br><span class="line">//按钮</span><br><span class="line">Button(&#x27;按钮文本&#x27;)</span><br><span class="line"></span><br><span class="line">Column(&#123;space: 10&#125;) &#123;</span><br><span class="line">    TextInput(&#123;</span><br><span class="line">        placeholder: &#x27;请输入用户名&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    TextInput(&#123;</span><br><span class="line">        placeholder: &#x27;请输入密码&#x27;</span><br><span class="line">    &#125;).type(InputType.Password)</span><br><span class="line">    Button(&#x27;登录&#x27;)</span><br><span class="line">        .width(200)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>svg图标</h1><p>任意放大缩小不失真、可以改颜色，使用方法与普通图片一致，图片后缀 .svg</p><p>HarmonyOS图标库：<a href="https://developer.huawei.com/consumer/cn/design/harmonyos-icon/">地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Column() &#123;</span><br><span class="line">    Image($r(&#x27;app.media.ic_fly&#x27;))</span><br><span class="line">        .width(&#x27;10%&#x27;)</span><br><span class="line">        //.fillColor(Color.Green)</span><br><span class="line">        .fillColor(&#x27;#b0473d&#x27;) //设置图标颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>布局元素和边框</h1><p>内边距：padding 在 组件内 添加间距，拉开内容与组件边缘之间的距离</p><p>外边距：margin 在 组件外 添加间距，拉开两个组件之间的距离</p><p>边框：border 给组件添加边界</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//内边距</span><br><span class="line">.padding(20)//四周都有内边距</span><br><span class="line">.padding(&#123;</span><br><span class="line">    right: 20,//右内边距20</span><br><span class="line">    top: 30,//上内边距30</span><br><span class="line">    bottom: 40,//下内边距40</span><br><span class="line">    left: 20//左内边距20</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//外边距</span><br><span class="line">.margin(10)</span><br><span class="line">.margin(&#123;</span><br><span class="line">    right: 20,//右外边距20</span><br><span class="line">    top: 30,//上外边距30</span><br><span class="line">    bottom: 40,//下外边距40</span><br><span class="line">    left: 20//左外边距20</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//边框</span><br><span class="line">.border(&#123;</span><br><span class="line">    width: 1, //边框宽度</span><br><span class="line">    color: Color.Blue,</span><br><span class="line">    style: BorderStyle.Dotted //样式(虚线、实线、点线)</span><br><span class="line">&#125;)</span><br><span class="line">.border(&#123;</span><br><span class="line">    width: &#123; left: 1 &#125;,</span><br><span class="line">    color: &#123; left: &#x27;red&#x27; &#125;,</span><br><span class="line">    style: &#123; left: BorderStyle.Solid &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Column() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">        Text(&#x27;小龙女&#x27;)</span><br><span class="line">            .backgroundColor(Color.Green)</span><br><span class="line">            .padding(20)//四周都有内边距</span><br><span class="line">            .margin(&#123;</span><br><span class="line">            right: 20,//右外边距20</span><br><span class="line">            top: 30,//上外边距30</span><br><span class="line">            bottom: 40,//下外边距40</span><br><span class="line">            left: 20//左外边距20</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        Text(&#x27;大佬&#x27;)</span><br><span class="line">            .backgroundColor(Color.Orange)</span><br><span class="line">            .padding(&#123;</span><br><span class="line">            right: 20,//右内边距20</span><br><span class="line">            top: 30,//上内边距30</span><br><span class="line">            bottom: 40,//下内边距40</span><br><span class="line">            left: 20//左内边距20</span><br><span class="line">        &#125;)</span><br><span class="line">            .margin(10)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Text(&#x27;待完善&#x27;)</span><br><span class="line">        .padding(10)</span><br><span class="line">        .fontColor(Color.Blue)</span><br><span class="line">        .border(&#123;</span><br><span class="line">        width: 1, //边框宽度</span><br><span class="line">        color: Color.Blue,</span><br><span class="line">        style: BorderStyle.Dotted //样式(虚线、实线、点线)</span><br><span class="line">    &#125;)</span><br><span class="line">    Text(&#x27;单边框&#x27;)</span><br><span class="line">        .margin(&#123;</span><br><span class="line">        top: 10</span><br><span class="line">    &#125;)</span><br><span class="line">        .padding(10)</span><br><span class="line">        .border(&#123;</span><br><span class="line">            width: &#123; left: 1 &#125;,</span><br><span class="line">            color: &#123; left: &#x27;red&#x27; &#125;,</span><br><span class="line">            style: &#123; left: BorderStyle.Solid &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>角标组件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Badge(&#123;</span><br><span class="line">    count: 数字,//角标数值</span><br><span class="line">    position: BadgePosition.枚举值,//角标位置</span><br><span class="line">    style: &#123;</span><br><span class="line">        fontSize: 14,//角标文字大小</span><br><span class="line">        badgeSize: 20,// 角标大小</span><br><span class="line">        badgeColor:&#x27;#fa2a2d&#x27;// 角标底色</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    //这里写角标下面的图片</span><br><span class="line">    Image(图片链接)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Badge(&#123;</span><br><span class="line">    count: 1,</span><br><span class="line">    position: BadgePosition.RightTop,</span><br><span class="line">    style: &#123;</span><br><span class="line">        fontSize: 14,</span><br><span class="line">        badgeSize: 20,</span><br><span class="line">        badgeColor:&#x27;#fa2a2d&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    Image($r(&#x27;app.media.bg_00&#x27;))</span><br><span class="line">        .width(100)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>组件圆角</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.borderRadius(5) // 四个圆角相同</span><br><span class="line">    .borderRadius(&#123;</span><br><span class="line">    topLeft: 5,</span><br><span class="line">    topRight: 10,</span><br><span class="line">    bottomRight: 15,</span><br><span class="line">    bottomLeft: 20</span><br><span class="line">&#125;) // 四个方向圆角，单独设置</span><br><span class="line"></span><br><span class="line">Column() &#123;</span><br><span class="line">    Text(&#x27;xinzai&#x27;)</span><br><span class="line">        .width(50)</span><br><span class="line">        .height(50)</span><br><span class="line">        .backgroundColor(Color.Orange)</span><br><span class="line">    //.borderRadius(6)</span><br><span class="line">        .borderRadius(&#123;</span><br><span class="line">        topLeft: 5,</span><br><span class="line">        topRight: 10,</span><br><span class="line">        bottomLeft: 2,</span><br><span class="line">        bottomRight: 9</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊形状圆角">特殊形状圆角</h2><p>正圆：宽高都一样，圆角为宽或高的一半</p><p>胶囊：宽大高小，圆角为高的一半</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Column() &#123;</span><br><span class="line">    Image($r(&#x27;app.media.ic_more&#x27;))</span><br><span class="line">        .width(60)</span><br><span class="line">        .height(60)</span><br><span class="line">        .backgroundColor(Color.Green)</span><br><span class="line">        .borderRadius(30)</span><br><span class="line">    Text(&#x27;胶囊&#x27;)</span><br><span class="line">        .width(100)</span><br><span class="line">        .height(50)</span><br><span class="line">        .backgroundColor(Color.Orange)</span><br><span class="line">        .borderRadius(25)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>单位</h1><p>px：实际的物理像素点</p><p>vp：虚拟像素，相对于不同的设备会自动转换，保证不同设备视觉一致 （推荐）</p><p>px 转 vp：<code>px2vp(数值)</code></p><p>vp 转 px：<code>vp2px(数值)</code></p><h1>背景图</h1><p>背景图：backgroundImage</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.backgroundImage(背景图地址, ImageRepeat.平铺方式)</span><br><span class="line">/*</span><br><span class="line">背景图平铺方式(可省略)：</span><br><span class="line">    NoRepeat：不平铺，默认值</span><br><span class="line">    X：水平平铺</span><br><span class="line">    Y：垂直平铺</span><br><span class="line">    XY：水平垂直均平铺*/</span><br><span class="line"></span><br><span class="line">Column() &#123;</span><br><span class="line">    Text(&#x27;花朵&#x27;)</span><br><span class="line">        .width(200)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Pink)</span><br><span class="line">        .backgroundImage($r(&#x27;app.media.flower&#x27;),ImageRepeat.XY)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背景图位置：backgroundImagePosition</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.backgroundImagePosition(&#123; x: 数字, y: 数字 &#125;)</span><br><span class="line">.backgroundImagePosition(Alignment.枚举值)</span><br><span class="line"></span><br><span class="line">Column() &#123;</span><br><span class="line">    Text(&#x27;花朵&#x27;)</span><br><span class="line">        .width(200)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Pink)</span><br><span class="line">        .backgroundImage($r(&#x27;app.media.flower&#x27;))</span><br><span class="line">    //.backgroundImagePosition(&#123;x: 100,y: 10&#125;)</span><br><span class="line">        .backgroundImagePosition(Alignment.Center)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>背景图尺寸：backgroundImageSize</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.backgroundImageSize( &#123;&#123;width: 数字, height: 数字&#125; &#125;)</span><br><span class="line">.backgroundImageSize(ImageSize.枚举值)</span><br><span class="line">/*枚举值：</span><br><span class="line">Contain：等比例缩放背景图，当宽或高与组件尺寸相同停止缩放</span><br><span class="line">Cover：等比例缩放背景图至图片完全覆盖组件范围</span><br><span class="line">Auto：默认，原图尺寸*/</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Text()</span><br><span class="line">        .width(300)</span><br><span class="line">        .height(200)</span><br><span class="line">        .backgroundColor(Color.Pink)</span><br><span class="line">        .backgroundImage($r(&#x27;app.media.user&#x27;))</span><br><span class="line">        .backgroundImagePosition(Alignment.Center)</span><br><span class="line">            //.backgroundImageSize(&#123;width: 300, height: 200&#125;)</span><br><span class="line">        .backgroundImageSize(ImageSize.Contain)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>线性布局</h1><p>排布主方向上的对齐方式，<code>Row行</code>、<code>Column列</code>效果相似(主轴)，对齐的那个方向必须设置大小</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/11/16/XE1bMO9pfWusNDm.jpg" alt="效果图" style="zoom:15%;"></th></tr></thead><tbody></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.justifyContent(FlexAlign.枚举值)</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Text()</span><br><span class="line">        .width(200)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Pink)</span><br><span class="line">        .border(&#123;</span><br><span class="line">        width: 1</span><br><span class="line">    &#125;)</span><br><span class="line">    Text()</span><br><span class="line">        .width(200)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Blue)</span><br><span class="line">        .border(&#123;</span><br><span class="line">        width: 1</span><br><span class="line">    &#125;)</span><br><span class="line">    Text()</span><br><span class="line">        .width(200)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Green)</span><br><span class="line">        .border(&#123;</span><br><span class="line">        width: 1</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br><span class="line">.height(&#x27;100%&#x27;)</span><br><span class="line">.justifyContent(FlexAlign.Center)</span><br><span class="line">.justifyContent(FlexAlign.SpaceBetween)</span><br><span class="line">.justifyContent(FlexAlign.SpaceEvenly)</span><br><span class="line">.justifyContent(FlexAlign.SpaceAround)</span><br></pre></td></tr></table></figure><h2 id="交叉轴对齐方式">交叉轴对齐方式</h2><p>若主轴为垂直方向，则交叉轴为水平方向，反之则垂直方向，对齐的那个方向必须设置大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//交叉轴在水平方向</span><br><span class="line">.alignItems(HorizontalAlign.枚举值)</span><br><span class="line">//交叉轴在垂直方向</span><br><span class="line">.alignItems(VerticalAlign.枚举值)</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Text()</span><br><span class="line">        .width(100)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Blue)</span><br><span class="line">    Text()</span><br><span class="line">        .width(100)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Gray)</span><br><span class="line">&#125;</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br><span class="line">.height(&#x27;100%&#x27;)</span><br><span class="line">.backgroundColor(&#x27;#3c3c3c3c&#x27;)</span><br><span class="line">.alignItems(HorizontalAlign.Start)</span><br></pre></td></tr></table></figure><h1>自适应伸缩</h1><p>按照权重(数字越大权重越高) 进行分配 主轴 的 空间 (剩余空间)，必须设置交叉轴的大小，否则没效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.layoutWeight(数字)</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Row()&#123;</span><br><span class="line">        Text()</span><br><span class="line">            .width(100)</span><br><span class="line">            .height(100)</span><br><span class="line">            .backgroundColor(Color.Orange)</span><br><span class="line">        Text()</span><br><span class="line">            .layoutWeight(1)</span><br><span class="line">            .height(100)</span><br><span class="line">            .backgroundColor(Color.Blue)</span><br><span class="line">        Text()</span><br><span class="line">            .layoutWeight(2)</span><br><span class="line">            .height(100)</span><br><span class="line">            .backgroundColor(Color.Green)</span><br><span class="line">    &#125;</span><br><span class="line">    .width(300)</span><br><span class="line">        .height(200)</span><br><span class="line">        .backgroundColor(Color.White)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>弹性布局和弹簧组件</h1><p>弹簧组件：Blank()</p><p>线性布局性能更高，不规则的时候需要换行，才使用，如下图所示</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/11/23/IjZYl42K8PxuGHq.webp" alt="场景" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Flex(&#123;</span><br><span class="line">    direction: FlexDirection.枚举值,//主轴方向</span><br><span class="line">    justifyContent: FlexAlign.枚举值,//主轴对齐方式</span><br><span class="line">    alignItems: ItemAlign.枚举值,//交叉轴对齐方式</span><br><span class="line">    wrap: FlexWrap.枚举值//布局换行</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    //组件</span><br><span class="line">&#125;</span><br><span class="line">//FlexWrap.NoWrap  单行布局</span><br><span class="line">//FlexWrap.Wrap   多行布局</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Flex(&#123;</span><br><span class="line">        direction: FlexDirection.Row, //设置主轴方向</span><br><span class="line">        justifyContent: FlexAlign.SpaceAround,  //主轴对齐方式</span><br><span class="line">        alignItems: ItemAlign.End,  //交叉轴对齐方式</span><br><span class="line">        wrap: FlexWrap.NoWrap   //布局换行</span><br><span class="line">    &#125;)&#123;</span><br><span class="line">        Text()</span><br><span class="line">            .width(100)</span><br><span class="line">            .height(100)</span><br><span class="line">            .backgroundColor(     Color.Blue)</span><br><span class="line">            .margin(10)</span><br><span class="line">        Text()</span><br><span class="line">            .width(100)</span><br><span class="line">            .height(100)</span><br><span class="line">            .backgroundColor(Color.Orange)</span><br><span class="line">            .margin(10)</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">        .height(500)</span><br><span class="line">        .backgroundColor(&#x27;#ece&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>轮播组件</h1><p>容器组件，当设置了多个子组件后，可以对子组件 进行轮播显示</p><h2 id="语法">语法</h2><p>一般轮播要设置宽高比例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Swiper() &#123;</span><br><span class="line">    //  轮播内容</span><br><span class="line">&#125;</span><br><span class="line">//设置尺寸（内容会自动拉伸）</span><br><span class="line"></span><br><span class="line">Swiper()&#123;</span><br><span class="line">    Text(&#x27;1&#x27;)</span><br><span class="line">    Text(&#x27;2&#x27;)</span><br><span class="line">    Text(&#x27;3&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br><span class="line">.height(100)</span><br></pre></td></tr></table></figure><h2 id="基本属性">基本属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//是否开启循环</span><br><span class="line">.loop(false)//默认true</span><br><span class="line"></span><br><span class="line">//是否自动播放</span><br><span class="line">.autoPlay(true)//默认false</span><br><span class="line"></span><br><span class="line">//自动播放的时间间隔（ms）</span><br><span class="line">.interval(1000)//3000</span><br><span class="line"></span><br><span class="line">//纵向滑动轮播</span><br><span class="line">.vertical(true)//默认false</span><br></pre></td></tr></table></figure><h2 id="样式自定义">样式自定义</h2><p>一般选中的比默认的要高一点点，动画会好些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Swiper() &#123;</span><br><span class="line">   // ...</span><br><span class="line">&#125;</span><br><span class="line">.indicator(</span><br><span class="line">    Indicator.dot()// 小圆点</span><br><span class="line">    .itemWidth(20)// 默认的宽</span><br><span class="line">    .itemHeight(20)// 默认的高</span><br><span class="line">    .color(Color.Black)// 默认的颜色</span><br><span class="line">    .selectedItemWidth(30)// 选中的宽</span><br><span class="line">    .selectedItemHeight(30)// 选中的高</span><br><span class="line">    .selectedColor(Color.White)// 选中的颜色</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1>绝对定位和层级</h1><p>绝对定位作用：控制组件位置，可以实现层叠效果</p><ol><li>参照 父组件左上角 进行偏移</li><li>绝对定位后的组件 不再占用自身原有位置</li></ol><p>层级作用：调整组件层级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.position(&#123; x: 水平偏移量, y: 垂直偏移量 &#125;)</span><br><span class="line">.zIndex(数字)//取值为整数数字，取值越大，显示层级越高</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Text(&#x27;1&#x27;)</span><br><span class="line">        .width(100)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Green)</span><br><span class="line">    Text(&#x27;定位&#x27;)</span><br><span class="line">        .width(100)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Grey)</span><br><span class="line">        .position(&#123; x: 20, y: 20 &#125;) //绝对定位</span><br><span class="line">        .zIndex(1)</span><br><span class="line">    Text(&#x27;1&#x27;)</span><br><span class="line">        .width(100)</span><br><span class="line">        .height(100)</span><br><span class="line">        .backgroundColor(Color.Red)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>层叠布局</h1><p>卡片层叠效果，层叠操作更简洁，编码效率高（绝对定位的优势是更灵活）</p><p>子元素的顺序为 Item1 -&gt; Item2 -&gt; Item3（越往后层级越高）也可以zIndex手动调层级(若手动则每一层都需要手动设置)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Stack(&#123;</span><br><span class="line">    alignContent: Alignment.枚举值//层叠方向</span><br><span class="line">&#125;) &#123;</span><br><span class="line">    Item1()</span><br><span class="line">    Item2()</span><br><span class="line">    Item3()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Column()&#123;</span><br><span class="line">    Stack(&#123;</span><br><span class="line">        alignContent: Alignment.Bottom</span><br><span class="line">    &#125;)&#123;</span><br><span class="line">        Text(&#x27;1&#x27;)</span><br><span class="line">            .width(250)</span><br><span class="line">            .height(250)</span><br><span class="line">            .backgroundColor(Color.Brown)</span><br><span class="line">        //.zIndex(1)</span><br><span class="line">        Text(&#x27;2&#x27;)</span><br><span class="line">            .width(200)</span><br><span class="line">            .height(200)</span><br><span class="line">            .backgroundColor(Color.Blue)</span><br><span class="line">        //.zIndex(2)</span><br><span class="line">        Text(&#x27;3&#x27;)</span><br><span class="line">            .width(150)</span><br><span class="line">            .height(150)</span><br><span class="line">            .backgroundColor(Color.Green)</span><br><span class="line">        //.zIndex(3)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Grid 布局</h1><p>一般使用在固定行列的布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Grid()&#123;</span><br><span class="line">    GridItem()&#123;//每个小方格</span><br><span class="line">//小方格中写的内容</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.columnsTemplate(&#x27;1fr 1fr 1fr&#x27;)//列有几个1fr就有几个小方格，1代表小方格所占的空间份数</span><br><span class="line">.columnsGap(10)//列方向小方块之间的间隙</span><br><span class="line">.rowsTemplate(&#x27;1fr 1fr 1fr&#x27;)//行有几个1fr就有几个小方格，1代表小方格所占的空间份数</span><br><span class="line">.rowsGap(10)//行方向小方块之间的间隙</span><br><span class="line"></span><br><span class="line">Grid()&#123;</span><br><span class="line">    GridItem()&#123;</span><br><span class="line">        Column()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        .width(80)</span><br><span class="line">            .height(80)</span><br><span class="line">            .backgroundColor(Color.Green)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    GridItem()&#123;</span><br><span class="line">        Column()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        .width(80)</span><br><span class="line">            .height(80)</span><br><span class="line">            .backgroundColor(Color.Green)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line">.columnsTemplate(&#x27;1fr 1fr 1fr&#x27;)</span><br><span class="line">.columnsGap(10)</span><br><span class="line">.rowsTemplate(&#x27;1fr 1fr 1fr&#x27;)</span><br><span class="line">.rowsGap(10)</span><br></pre></td></tr></table></figure><h1>透明度</h1><p>设置透明度之后，注意层级关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//十六进制若为八位则前两位则为透明度//设置背景颜色透明度</span><br><span class="line"></span><br><span class="line">//设置整个组件或整个布局的透明度</span><br><span class="line">.opacity(数字)//0~1</span><br></pre></td></tr></table></figure><h1>动画</h1><p>元素配合点击事件来改变 缩放中xy值、透明度、层级等等的值 再配置动画才有效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//元素有状态的改变，可以添加animation做动画</span><br><span class="line">.animation(&#123;</span><br><span class="line">    duration: 300//动画时间，单位毫秒</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//缩放</span><br><span class="line">.scale(&#123;</span><br><span class="line">    x: 1,//1：原组件大小</span><br><span class="line">    y: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>滚动容器</h1><p>当子组件的布局尺寸 超过Scroll的尺寸 时，内容可以滚动</p><h2 id="语法">语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Scroll()&#123;</span><br><span class="line">    //只支持一个子组件</span><br><span class="line">    Column()&#123;</span><br><span class="line">        // 内容放在内部</span><br><span class="line">        // 尺寸超过 Scroll 即可滚动</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br><span class="line">.height(200)</span><br><span class="line">.scrollable(ScrollDirection.xxx)//滚动方向</span><br><span class="line"></span><br><span class="line">Scroll()&#123;</span><br><span class="line">    Column(&#123;space: 20&#125;)&#123;</span><br><span class="line">        ForEach(Array.from(&#123;length: 10&#125;),(item: string,index) =&gt; &#123;</span><br><span class="line">            Text(&#x27;测试文本&#x27; + (index+1))</span><br><span class="line">                .width(&#x27;100%&#x27;)</span><br><span class="line">                .height(100)</span><br><span class="line">                .backgroundColor(Color.Orange)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br><span class="line">.height(500)</span><br><span class="line">..scrollable(ScrollDirection.Vertical)//滚动方向</span><br></pre></td></tr></table></figure><h2 id="常见属性">常见属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> //滚动条状态</span><br><span class="line">.scrollBar(BarState.枚举值)  </span><br><span class="line"></span><br><span class="line">//滚动条颜色</span><br><span class="line">.scrollBarColor(Color.Red)</span><br><span class="line"></span><br><span class="line">//滚动条宽度</span><br><span class="line">.scrollBarWidth(数值)</span><br><span class="line"></span><br><span class="line">//边缘滑动效果</span><br><span class="line">.edgeEffect(EdgeEffect.枚举值)</span><br></pre></td></tr></table></figure><h2 id="控制器">控制器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//创建Scroller对象(实例化)</span><br><span class="line">实例变量名: Scroller = new Scroller()</span><br><span class="line">//绑定Scroller对象</span><br><span class="line">Scroll(this.scroller)</span><br><span class="line">//控制滚动位置，不一定得Edge(有动画) 也可以别的</span><br><span class="line">this.scroller.scrollEdge(Edge.枚举值)</span><br><span class="line">//获取已经滚动的距离，返回number类型</span><br><span class="line">this.scroller.currentOffset().枚举值</span><br><span class="line"></span><br><span class="line">Button(&#x27;控制滚动位置&#x27;)</span><br><span class="line">    .onClick(() =&gt;&#123;</span><br><span class="line">        this.scroller.scrollEdge(Edge.Top)</span><br><span class="line">    &#125;)</span><br><span class="line">Button(&#x27;获取已经滚动的距离&#x27;)</span><br><span class="line">    .onClick(() =&gt;&#123;</span><br><span class="line">        const y = this.scroller.currentOffset().yOffset</span><br><span class="line">        AlertDialog.show(&#123;message: `y: $&#123;y&#125;`&#125;)//弹窗</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="事件">事件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.onDidScroll((x,y) =&gt;&#123;</span><br><span class="line">    // 滚动时 一直触发</span><br><span class="line">    // 可以结合 scroller的currentOffset方法 获取滚动距离</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.onDidScroll((x,y) =&gt;&#123;</span><br><span class="line">    console.log(&#x27;1&#x27;,this.scroller.currentOffset().yOffset)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>分类容器组件</h1><p>当页面内容较多时，可以通过<code>Tabs</code>组件进行 分类展示</p><h2 id="语法">语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Tabs()&#123;</span><br><span class="line">    TabContent()&#123;</span><br><span class="line">        //导航显示的内容</span><br><span class="line">    &#125;</span><br><span class="line">    .tabBar(导航按钮样式)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tabs()&#123;</span><br><span class="line">    TabContent()&#123;</span><br><span class="line">        Text(&#x27;首页内容&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .tabBar(&#x27;首页&#x27;)</span><br><span class="line">    TabContent()&#123;</span><br><span class="line">        Text(&#x27;推荐内容&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .tabBar(&#x27;推荐&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用属性">常用属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//调整导航栏位置(垂直：左还是右，水平：上方、下方)</span><br><span class="line">Tabs(&#123;barPosition: BarPosition.枚举值&#125;)</span><br><span class="line"></span><br><span class="line">//设置导航栏方向，true：垂直，flase：水平</span><br><span class="line">.vertical(false)</span><br><span class="line"></span><br><span class="line">//设置导航栏是否允许滑动</span><br><span class="line">.scrollable(true)</span><br><span class="line"></span><br><span class="line">//导航切换动画时间</span><br><span class="line">.animationDuration(1)</span><br><span class="line"></span><br><span class="line">//设置导航栏是否滚动</span><br><span class="line">.barMode(BarMode.枚举值)//Scrollable：滚动</span><br></pre></td></tr></table></figure><h2 id="自定义tabbar">自定义TabBar</h2><p>导航栏显示 图形 和 文字，甚至有 特殊的图标，若有</p><p>onChange：滑动切换、点击切换 均会触发</p><p>onTabBarClick：只有点击才会触发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Builder</span><br><span class="line">自定义函数名() &#123;</span><br><span class="line">    // 自定义的Tabbar结构</span><br><span class="line">&#125;</span><br><span class="line">Tabs() &#123;</span><br><span class="line">    TabContent() &#123;</span><br><span class="line">        // 内容略</span><br><span class="line">    &#125;.</span><br><span class="line">    tabBar(this.自定义函数名())</span><br><span class="line">&#125;</span><br><span class="line">.onChange((index: number) =&gt; &#123;//index索引值，从0开始，但代表的是导航栏1开始</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//存储激活的索引值</span><br><span class="line">@State selectedIndex:number = 0</span><br><span class="line">@Builder</span><br><span class="line">mytabs(itemIndex: number, name: string,url: ResourceStr,selurl: ResourceStr)&#123;</span><br><span class="line">    Column(&#123;space: 5&#125;)&#123;</span><br><span class="line">        Image(itemIndex == this.selectedIndex? selurl : url)</span><br><span class="line">            .width(30)</span><br><span class="line">        Text(name)</span><br><span class="line">            .fontSize(12)</span><br><span class="line">        //通过传递本身和获取到的索引作比较，从而知道选中的是哪个</span><br><span class="line">            .fontColor(itemIndex == this.selectedIndex? Color.Red: Color.Black)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">build() &#123;</span><br><span class="line">    Tabs()&#123;</span><br><span class="line">        TabContent()&#123;</span><br><span class="line">            Text(&#x27;购物车内容&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        .tabBar(this.mytabs(0,&#x27;购物车&#x27;,$r(&#x27;app.media.ic_tabbar_icon_2&#x27;),$r(&#x27;app.media.ic_tabbar_icon_2_selected&#x27;)))</span><br><span class="line">        TabContent()&#123;</span><br><span class="line">            Text(&#x27;我的内容&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        .tabBar(this.mytabs(1,&#x27;我的&#x27;,$r(&#x27;app.media.ic_tabbar_icon_3&#x27;),$r(&#x27;app.media.ic_tabbar_icon_3_selected&#x27;)))</span><br><span class="line">    &#125;</span><br><span class="line">    .onChange((index: number) =&gt; &#123;</span><br><span class="line">        this.selectedIndex = index</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>渲染控制</h1><p>基于数组的个数，渲染组件的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//如果不在组件内的变量不用加this，属性类型也可能是接口名</span><br><span class="line">//测试时可用Array.from(&#123;length: 10&#125; 替代this.数组名</span><br><span class="line">ForEach(this.数组名, (自定义属性变量名: 属性类型, 自定义下标变量名: 下标类型) =&gt; &#123;</span><br><span class="line">    //组件</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ForEach([1,2,3,4,5,6], () =&gt; &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">@State titles: string[] = [&#x27;电子产品&#x27;,&#x27;精品服饰&#x27;,&#x27;母婴产品&#x27;]</span><br><span class="line">build() &#123;</span><br><span class="line">    Column()&#123;</span><br><span class="line">        ForEach(this.titles, (item: string,index: number) =&gt; &#123;</span><br><span class="line">            Text(`$&#123;index + 1&#125;,$&#123;item&#125;`)</span><br><span class="line">                .fontSize(20)</span><br><span class="line">                .width(500)</span><br><span class="line">                .padding(15)</span><br><span class="line">                .fontWeight(700)</span><br><span class="line">                .width(&#x27;100%&#x27;)</span><br><span class="line">                .fontColor(Color.Orange)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>样式&amp;结构重用</h1><p>重点：@Extend、@Builder，了解：@Styles</p><p>全局有function，组件内没function</p><h2 id="extend-扩展组件">@Extend(扩展组件)</h2><p>扩展 组件的 样式、事件，实现 复用 效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Extend(复用的组件名)</span><br><span class="line">function 自定义函数名(参数)&#123;</span><br><span class="line">//封装的组件、事件等</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Extend(Text)</span><br><span class="line">function textExtend(color: ResourceColor,txt: string)&#123;</span><br><span class="line">    .textAlign(TextAlign.Center)</span><br><span class="line">    .backgroundColor(color)</span><br><span class="line">    .fontSize(30)</span><br><span class="line">    .onClick(() =&gt;&#123;</span><br><span class="line">        AlertDialog.show(&#123;</span><br><span class="line">            message: txt</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Text(&#x27;1&#x27;)</span><br><span class="line">    .textExtend(Color.Orange, &#x27;轮播1&#x27;)</span><br></pre></td></tr></table></figure><h2 id="抽取-styles">抽取(@Styles)</h2><p>抽取<code>通用</code>属性、事件，侧重样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//全局定义</span><br><span class="line">@Styles function 自定义函数名()&#123;</span><br><span class="line">    //抽取的样式、事件</span><br><span class="line">&#125;</span><br><span class="line">//组件内定义 需要调用组件内属性变量时</span><br><span class="line">@Styles setBg()&#123;</span><br><span class="line">    //抽取的样式、事件</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//全局定义</span><br><span class="line">@Styles function commonStyle()&#123;</span><br><span class="line">    .width(200)</span><br><span class="line">    .height(200)</span><br><span class="line">&#125;</span><br><span class="line">struct Index &#123;</span><br><span class="line">    @State colors: string = &#x27;#3333&#x27;</span><br><span class="line">    //组件内定义</span><br><span class="line">    @Styles setBg()&#123;</span><br><span class="line">        .backgroundColor(this.colors)</span><br><span class="line">    &#125;</span><br><span class="line">    build() &#123;</span><br><span class="line">        Column() &#123;</span><br><span class="line">            Text(&#x27;1&#x27;)</span><br><span class="line">                .setBg()</span><br><span class="line">                .commonStyle()</span><br><span class="line">            Button(&#x27;点击&#x27;)</span><br><span class="line">                .commonStyle()</span><br><span class="line">                .setBg()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义构建函数-builder">自定义构建函数@Builder</h2><p>结构(侧重)、样式、事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//全局</span><br><span class="line">@Builder</span><br><span class="line">function 自定义函数名(参数)&#123;</span><br><span class="line">    //封装的结构以及组件 样式等</span><br><span class="line">&#125;</span><br><span class="line">//局部</span><br><span class="line">@Builder</span><br><span class="line">自定义函数名(参数)&#123;</span><br><span class="line">    //封装的结构以及组件 样式等</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Builder</span><br><span class="line">function navItem(icon: ResourceStr, text: string)&#123;</span><br><span class="line">    Column()&#123;</span><br><span class="line">        Image(icon)</span><br><span class="line">            .width(&#x27;80%&#x27;)</span><br><span class="line">        Text(text)</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;25%&#x27;)</span><br><span class="line">    .onClick(() =&gt;&#123;</span><br><span class="line">        AlertDialog.show(&#123;message: &#x27;点了&#x27; + text&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">    build() &#123;</span><br><span class="line">        Column() &#123;</span><br><span class="line">            navItem($r(&#x27;app.media.ic_reuse_01&#x27;),&#x27;阿里拍卖&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;组件属性方法&lt;/h1&gt;
&lt;p&gt;Ctrl+p：提示方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;属性方法&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
</summary>
      
    
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/categories/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/tags/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2.交互开发</title>
    <link href="https://xinzaigeek.68565200.xyz/post/36f99b3f.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/36f99b3f.html</id>
    <published>2024-11-22T08:44:16.000Z</published>
    <updated>2024-12-20T03:55:16.208Z</updated>
    
    <content type="html"><![CDATA[<h1>点击事件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onClick( (参数) =&gt; &#123;&#125; )//当点击的时候</span><br><span class="line"></span><br><span class="line">Button(&#x27;点我&#x27;)</span><br><span class="line">    .onClick(() =&gt; &#123;</span><br><span class="line">    //弹窗</span><br><span class="line">    AlertDialog.show(&#123;</span><br><span class="line">        message: &#x27;你好~ 这是个弹框 &#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>状态管理</h1><p>普通变量：只能在初始化时渲染，后续将不会再刷新</p><p>状态变量：需要装饰器装饰，改变会引起 UI 的渲染刷新</p><p>定义在 组件内(struct Index内) 普通变量 或 状态变量，都需要 通过 <code>this</code> 访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct Index &#123;</span><br><span class="line">    @State msg3: string = &#x27;Hello World&#x27;;//状态变量</span><br><span class="line">    build() &#123;</span><br><span class="line">        Column()&#123;</span><br><span class="line">            Text(this.msg3)</span><br><span class="line">            Button(&#x27;点我&#x27;)</span><br><span class="line">                .onClick(() =&gt; &#123;</span><br><span class="line">                    this.msg3 = &#x27;xinzai&#x27;</span><br><span class="line">                &#125;)</span><br><span class="line">                .width(&#x27;80%&#x27;)</span><br><span class="line">                .margin(50)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;点击事件&lt;/h1&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/categories/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="鸿蒙next应用开发" scheme="https://xinzaigeek.68565200.xyz/tags/%E9%B8%BF%E8%92%99next%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>4.Linux应用编程</title>
    <link href="https://xinzaigeek.68565200.xyz/post/9d10e9f6.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/9d10e9f6.html</id>
    <published>2024-11-20T12:47:12.000Z</published>
    <updated>2024-11-24T12:28:30.356Z</updated>
    
    <content type="html"><![CDATA[<p>C语言各种版本发展史(<a href="https://www.cnblogs.com/god-of-death/p/8017414.html">参考</a>)，C89 和 C99 区别(<a href="https://www.cnblogs.com/xiaoyoucai/p/6146784.html">参考</a>)</p><p>查看编译器C版本方法： <code>gcc -E -dM - &lt;/dev/null | grep &quot;STDC_VERSION&quot;</code></p><p>Linux下编译C代码的指令：<code>gcc main.c -o 生成文件名</code></p><p>Linux下指定c版本编译指令：<code> gcc -std=c89 main.c -o main</code></p><p>查看C语言的语法说明：<code>man 查询的函数等</code></p><h1>编译器和编译脚本</h1><p>源代码(.c) --&gt;(预处理) 预处理文件(.i) --&gt;(编译) 汇编文件(.s) --&gt;(汇编) 目标文件(.o) --&gt;(链接) 可执行文件(.exe)</p><p>各个编译器的区别：<a href="https://cloud.tencent.com/developer/article/2032451">参考</a></p><p>GNU工具集：<a href="https://www.cnblogs.com/kele-dad/p/9394568.html">参考</a></p><p>GCC基本编译规则</p><ul><li>-c 预编译</li><li>-o 链接</li><li>-D define宏链接</li><li>-O 编译优化</li><li>-g Debug调试</li><li>-I 添加头文件遍历</li><li>-Wall 显示编译警告</li></ul><p>Makefile基本语法：<a href="https://blog.csdn.net/wohu1104/article/details/110905996">参考</a></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">targets : prerequisites</span><br><span class="line">    command</span><br><span class="line"><span class="comment">#targets：规则的目标，是必须要有的，可以是 Object File（一般称它为中间文件）也可以是可执行文件，还可以是一个标签</span></span><br><span class="line"><span class="comment">#prerequisites：是我们的依赖文件，要生成 targets 需要的文件或者是目标。可以是多个，用空格隔开，也可以是没有</span></span><br><span class="line"><span class="comment">#command：make 需要执行的命令（任意的 shell 命令）。可以有多条命令，每一条命令占一行，如果 command 太长, 可以用 \ 作为换行符 </span></span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置编译器为gcc</span></span><br><span class="line">CC = gcc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置生成的目标文件名为main</span></span><br><span class="line">TARGET = main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 源代码文件列表，这里有两个源文件：main.c 和 hello_pr.c</span></span><br><span class="line">SRCS = main.c hello_pr.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从源代码文件名生成目标对象文件名（将 .c 替换为 .o）</span></span><br><span class="line">OBJS = $(SRCS:.c=.o)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件的目录路径</span></span><br><span class="line">INCS = -I ./Inc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认执行的任务是all，即编译程序</span></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGET)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个规则说明如何从目标对象文件生成最终可执行文件</span></span><br><span class="line"><span class="comment"># $^ 表示所有依赖项（这里是所有的 .o 文件）</span></span><br><span class="line"><span class="comment"># $@ 表示目标文件（这里是 main）</span></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="comment"># 打印源代码文件列表</span></span><br><span class="line">echo <span class="variable">$(SRCS)</span></span><br><span class="line"><span class="comment"># 打印目标对象文件列表</span></span><br><span class="line">echo <span class="variable">$(OBJS)</span></span><br><span class="line"><span class="comment"># 使用编译器链接所有目标对象文件并生成可执行文件</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(INCS)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个规则说明如何从单个源代码文件生成对应的目标文件(.o)</span></span><br><span class="line"><span class="comment"># $&lt; 表示第一个依赖项（这里是对应的 .c 文件）</span></span><br><span class="line"><span class="comment"># %.o:%.c 是一个模式匹配规则，表示任何 .c 文件都可以通过这个规则生成对应的 .o 文件</span></span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line"><span class="comment"># 使用编译器将 .c 文件编译成 .o 文件</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(INCS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理任务，删除所有中间文件和生成的可执行文件</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f *.o <span class="variable">$(TARGET)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪目标，makefile中存在的指令作为系统指令处理</span></span><br><span class="line"><span class="comment"># 防止工程中有同样名字的可执行文件，如果没有这个可能会执行可执行文件而不是执行命令</span></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all clean</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello_pr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    hello_print_func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hello_pr.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hello_pr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello_print_func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%s:%d]hello func\r\n&quot;</span>,__FUNCTION__,__LINE__);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hello_pr.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __HELLO_PR_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HELLO_PR_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello_print_func</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>优化版的Makefile</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#软件版本号</span></span><br><span class="line">VERSION=1.00</span><br><span class="line"><span class="comment">#生成的可执行的名字</span></span><br><span class="line">TARGET=app</span><br><span class="line"></span><br><span class="line"><span class="comment"># :=//直接赋值 </span></span><br><span class="line"><span class="comment"># ?=//判断环境变量或者makefile脚本中是否已经定义此变量，如果定义就直接使用原有的定义</span></span><br><span class="line"><span class="comment"># +=//累加操作，将我们执行的命令 逐一添加在变量的后方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#交叉编译环境的定义</span></span><br><span class="line">CROSS_COMPILE = </span><br><span class="line"></span><br><span class="line"><span class="comment">#gcc</span></span><br><span class="line"><span class="comment">#GCC 指令的定义</span></span><br><span class="line">CC      := <span class="variable">$(CROSS_COMPILE)</span>gcc</span><br><span class="line">CXX     := <span class="variable">$(CROSS_COMPILE)</span>g++</span><br><span class="line">LD      := <span class="variable">$(CROSS_COMPILE)</span>ld</span><br><span class="line">AR      := <span class="variable">$(CROSS_COMPILE)</span>ar</span><br><span class="line">AS      := <span class="variable">$(CROSS_COMPILE)</span>as</span><br><span class="line">NM      := <span class="variable">$(CROSS_COMPILE)</span>nm</span><br><span class="line">OBJDUMP := <span class="variable">$(CROSS_COMPILE)</span>objdump</span><br><span class="line">OBJCOPY := <span class="variable">$(CROSS_COMPILE)</span>objcopy</span><br><span class="line">SIZE    := <span class="variable">$(CROSS_COMPILE)</span>size</span><br><span class="line"></span><br><span class="line"><span class="comment">#DUSE_DEBUG 开启GDB调试功能</span></span><br><span class="line">DEBUG   =-DUSE_DEBUG</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译参数和编译宏的添加</span></span><br><span class="line"><span class="comment">#在编译时显示所有的警告信息</span></span><br><span class="line">CFLAGS  =-Wall</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加源文件的路径</span></span><br><span class="line">SRC_C = .</span><br><span class="line">SRC_C += test</span><br><span class="line"></span><br><span class="line"><span class="comment">#引用头文件路径</span></span><br><span class="line">INCLUDES =./Inc </span><br><span class="line">INCLUDES += ./test_Inc</span><br><span class="line"></span><br><span class="line"><span class="comment">#Lib 名</span></span><br><span class="line">LIB_NAMES  =</span><br><span class="line"><span class="comment">#Lib 目录</span></span><br><span class="line">LIB_PATH  = ./SRC ./Pay_SRC</span><br><span class="line"></span><br><span class="line">SOURCES := <span class="variable">$(<span class="built_in">foreach</span> <span class="built_in">dir</span>,<span class="variable">$(SRC_C)</span>,$(<span class="built_in">wildcard</span> <span class="variable">$(dir)</span>/*.c)</span>)</span><br><span class="line"><span class="comment">#-I./Inc -I./test_Inc</span></span><br><span class="line">INC_FLAGS = <span class="variable">$(<span class="built_in">addprefix</span> -I,<span class="variable">$(INCLUDES)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用单个Lib库</span></span><br><span class="line">LIB_NAME_FLAGS = <span class="variable">$(<span class="built_in">addprefix</span> -l,<span class="variable">$(LIB_NAMES)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用lib库路径下的多个lib库</span></span><br><span class="line"><span class="comment"># -L./SRC -L./Pay_SRC</span></span><br><span class="line">LIB_PATH_FLAGS = <span class="variable">$(<span class="built_in">addprefix</span> -L,<span class="variable">$(LIB_PATH)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把对应的.c-&gt;.o</span></span><br><span class="line"><span class="comment">#OBJ = $(SOURCES:.c=.o)</span></span><br><span class="line">OBJ   =<span class="variable">$(<span class="built_in">patsubst</span> %.c, %.o, <span class="variable">$(SOURCES)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#links 链接</span></span><br><span class="line"><span class="comment"># app:$(SOURCES:.c=.o)</span></span><br><span class="line"><span class="variable">$(TARGET)</span>:<span class="variable">$(OBJ)</span></span><br><span class="line"><span class="comment">#创建output目录</span></span><br><span class="line">@mkdir -p output</span><br><span class="line"><span class="comment">#输出生成的.o文件</span></span><br><span class="line">@echo <span class="string">&quot;obj file:&quot;</span> <span class="variable">$(OBJ)</span></span><br><span class="line"><span class="comment">#输出生成的.c文件</span></span><br><span class="line">@echo <span class="string">&quot;.c file:&quot;</span> <span class="variable">$(SOURCES)</span></span><br><span class="line"><span class="comment">#执行链接过程</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(OBJ)</span> <span class="variable">$(LIB_PATH_FLAGS)</span> <span class="variable">$(LIB_NAME_FLAGS)</span> -o output/<span class="variable">$(TARGET)</span><span class="variable">$(VERSION)</span></span><br><span class="line"><span class="comment">#删除过程.o文件</span></span><br><span class="line">@rm -rf <span class="variable">$(OBJ)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#compile 编译</span></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">@echo <span class="string">&quot;INC out:&quot;</span> <span class="variable">$(INC_FLAGS)</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(INC_FLAGS)</span> <span class="variable">$(DEBUG)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#clean清理编译产物</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">@echo <span class="string">&quot;Remove linked and compiled files......&quot;</span></span><br><span class="line">rm -rf <span class="variable">$(OBJ)</span> <span class="variable">$(TARGET)</span><span class="variable">$(VERSION)</span> output</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C语言各种版本发展史(&lt;a href=&quot;https://www.cnblogs.com/god-of-death/p/8017414.html&quot;&gt;参考&lt;/a&gt;)，C89 和 C99 区别(&lt;a href=&quot;https://www.cnblogs.com/xiaoyoucai</summary>
      
    
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>3.驱动和存储器</title>
    <link href="https://xinzaigeek.68565200.xyz/post/55a07e0f.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/55a07e0f.html</id>
    <published>2024-11-02T12:40:20.000Z</published>
    <updated>2024-11-20T12:43:51.958Z</updated>
    
    <content type="html"><![CDATA[<h1>驱动</h1><h2 id="含义">含义</h2><p>物理驱动：电机驱动…</p><p>软件驱动：</p><ul><li><p>应用层</p></li><li><p>内核层</p><ul><li><p>系统调用（open、read、write、ioctrl、colse）</p></li><li><p>虚拟文件系统</p></li><li><p>驱动代码（字符设备、块设备、网络设备驱动）</p></li><li><p>设备接口</p></li></ul></li></ul><p>硬件层：各种硬件设备</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/11/12/TqmVLHQZsDtv4GU.png" alt="层级图" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><h2 id="驱动分类">驱动分类</h2><p>字符设备驱动：按照字节流顺序传输</p><p>块设备驱动：多个字节一块传输</p><p>网络设备驱动：基于TCP/IP协议栈、socket</p><p>内核模块三要素：</p><ol><li>入口（module_init   insmod）</li><li>出口（module_exit   rmmod）</li><li>许可证（MODULE_LICENSE(“GPL”);）</li></ol><h2 id="mpu6050驱动流程">MPU6050驱动流程</h2><p>查看主次设备号(串口dev中)：<code>ls -l</code></p><p>mpu6050_drv.c(Z:\app_drv\drv\mpu6050_drv.c)，需要结合内核源码查看原理(Z:\linux\kernel\linux-imx-rel_imx_4.1.15_2.1.0_ga)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------------字符设备内容----------------------*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_NAME <span class="string">&quot;I2C1_mpu6050&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEV_CNT (1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义 led 资源结构体，保存获取得到的节点信息以及转换后的虚拟寄存器地址*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">dev_t</span> mpu6050_devno; <span class="comment">//定义字符设备的设备号</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">mpu6050_chr_dev</span>;</span> <span class="comment">//定义字符设备结构体chr_dev</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">class_mpu6050</span>;</span> <span class="comment">//保存创建的类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">device_mpu6050</span>;</span> <span class="comment">// 保存创建的设备</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device_node</span> *<span class="title">mpu6050_device_node</span>;</span> <span class="comment">//rgb_led的设备树节点结构体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------IIC设备内容----------------------*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">mpu6050_client</span> =</span> <span class="literal">NULL</span>; <span class="comment">//保存mpu6050设备对应的i2c_client结构体，匹配成功后由.prob函数带回。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//宏定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMPLRT_DIV                                  0x19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONFIG                                      0x1A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_CONFIG                                 0x1B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_CONFIG                                0x1C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_XOUT_H                                0x3B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_XOUT_L                                0x3C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_YOUT_H                                0x3D</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_YOUT_L                                0x3E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_ZOUT_H                                0x3F</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ACCEL_ZOUT_L                                0x40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMP_OUT_H                                  0x41</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEMP_OUT_L                                  0x42</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_XOUT_H                                 0x43</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_XOUT_L                                 0x44</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_YOUT_H                                 0x45</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_YOUT_L                                 0x46</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_ZOUT_H                                 0x47</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GYRO_ZOUT_L                                 0x48</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PWR_MGMT_1                                  0x6B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WHO_AM_I                                    0x75</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SlaveAddress                                0xD0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Address                                     0x68                  <span class="comment">//MPU6050地址</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_RETRIES                                 0x0701</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_TIMEOUT                                 0x0702</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_SLAVE                                   0x0703       <span class="comment">//IIC从器件的地址设置</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_BUS_MODE                                0x0780</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过i2c 向mpu6050写入数据</span></span><br><span class="line"><span class="comment">*mpu6050_client：mpu6050的i2c_client结构体。</span></span><br><span class="line"><span class="comment">*address, 数据要写入的地址，</span></span><br><span class="line"><span class="comment">*data, 要写入的数据</span></span><br><span class="line"><span class="comment">*返回值，错误，-1。成功，0  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">i2c_write_mpu6050</span><span class="params">(<span class="keyword">struct</span> i2c_client *mpu6050_client, u8 address, u8 data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> error = <span class="number">0</span>;</span><br><span class="line">    u8 write_data[<span class="number">2</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">send_msg</span>;</span> <span class="comment">//要发送的数据结构体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置要发送的数据*/</span></span><br><span class="line">    write_data[<span class="number">0</span>] = address;</span><br><span class="line">    write_data[<span class="number">1</span>] = data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*发送 iic要写入的地址 reg*/</span></span><br><span class="line">    send_msg.addr = mpu6050_client-&gt;addr; <span class="comment">//mpu6050在 iic 总线上的地址</span></span><br><span class="line">    send_msg.flags = <span class="number">0</span>;  <span class="comment">//标记为发送数据</span></span><br><span class="line">    send_msg.buf = write_data;  <span class="comment">//写入的首地址</span></span><br><span class="line">    send_msg.len = <span class="number">2</span>;  <span class="comment">//reg长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*执行发送*/</span></span><br><span class="line">    error = i2c_transfer(mpu6050_client-&gt;adapter, &amp;send_msg, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (error != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(KERN_DEBUG <span class="string">&quot;\n i2c_transfer error \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过i2c 向mpu6050写入数据</span></span><br><span class="line"><span class="comment">*mpu6050_client：mpu6050的i2c_client结构体。</span></span><br><span class="line"><span class="comment">*address, 要读取的地址，</span></span><br><span class="line"><span class="comment">*data，保存读取得到的数据</span></span><br><span class="line"><span class="comment">*length，读长度</span></span><br><span class="line"><span class="comment">*返回值，错误，-1。成功，0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">i2c_read_mpu6050</span><span class="params">(<span class="keyword">struct</span> i2c_client *mpu6050_client, u8 address, <span class="type">void</span> *data, u32 length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> error = <span class="number">0</span>;</span><br><span class="line">    u8 address_data = address;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">mpu6050_msg</span>[2];</span></span><br><span class="line">    <span class="comment">/*设置读取位置msg*/</span></span><br><span class="line">    mpu6050_msg[<span class="number">0</span>].addr = mpu6050_client-&gt;addr; <span class="comment">//mpu6050在 iic 总线上的地址</span></span><br><span class="line">    mpu6050_msg[<span class="number">0</span>].flags = <span class="number">0</span>;<span class="comment">//标记为发送数据</span></span><br><span class="line">    mpu6050_msg[<span class="number">0</span>].buf = &amp;address_data;<span class="comment">//写入的首地址</span></span><br><span class="line">    mpu6050_msg[<span class="number">0</span>].len = <span class="number">1</span>;<span class="comment">//写入长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置读取位置msg*/</span></span><br><span class="line">    mpu6050_msg[<span class="number">1</span>].addr = mpu6050_client-&gt;addr; <span class="comment">//mpu6050在 iic 总线上的地址</span></span><br><span class="line">    mpu6050_msg[<span class="number">1</span>].flags = I2C_M_RD;<span class="comment">//标记为读取数据</span></span><br><span class="line">    mpu6050_msg[<span class="number">1</span>].buf = data;<span class="comment">//读取得到的数据保存位置</span></span><br><span class="line">    mpu6050_msg[<span class="number">1</span>].len = length;<span class="comment">//读取长度</span></span><br><span class="line"></span><br><span class="line">    error = i2c_transfer(mpu6050_client-&gt;adapter, mpu6050_msg, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (error != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(KERN_DEBUG <span class="string">&quot;\n i2c_read_mpu6050 error \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化i2c</span></span><br><span class="line"><span class="comment">*返回值，成功，返回0。失败，返回 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mpu6050_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> error = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*配置mpu6050*/</span></span><br><span class="line">    error += i2c_write_mpu6050(mpu6050_client, PWR_MGMT_1, <span class="number">0X00</span>);</span><br><span class="line">    error += i2c_write_mpu6050(mpu6050_client, SMPLRT_DIV, <span class="number">0X07</span>);</span><br><span class="line">    error += i2c_write_mpu6050(mpu6050_client, CONFIG, <span class="number">0X06</span>);</span><br><span class="line">    error += i2c_write_mpu6050(mpu6050_client, ACCEL_CONFIG, <span class="number">0X01</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (error &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*初始化错误*/</span></span><br><span class="line">        printk(KERN_DEBUG <span class="string">&quot;\n mpu6050_init error \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字符设备操作函数集，open函数实现*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mpu6050_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;\n mpu6050_open \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*向 mpu6050 发送配置数据，让mpu6050处于正常工作状态*/</span></span><br><span class="line">    mpu6050_init();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字符设备操作函数集，.read函数实现*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">mpu6050_read</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">char</span> __user *buf, <span class="type">size_t</span> cnt, <span class="type">loff_t</span> *off)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> data_H;</span><br><span class="line">    <span class="type">char</span> data_L;</span><br><span class="line">    <span class="type">int</span> error;</span><br><span class="line">    <span class="type">short</span> mpu6050_result[<span class="number">6</span>]; <span class="comment">//保存mpu6050转换得到的原始数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, ACCEL_XOUT_H, &amp;data_H, <span class="number">1</span>);</span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, ACCEL_XOUT_L, &amp;data_L, <span class="number">1</span>);</span><br><span class="line">    mpu6050_result[<span class="number">0</span>] = data_H &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    mpu6050_result[<span class="number">0</span>] += data_L;</span><br><span class="line"></span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, ACCEL_YOUT_H, &amp;data_H, <span class="number">1</span>);</span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, ACCEL_YOUT_L, &amp;data_L, <span class="number">1</span>);</span><br><span class="line">    mpu6050_result[<span class="number">1</span>] = data_H &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    mpu6050_result[<span class="number">1</span>] += data_L;</span><br><span class="line"></span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, ACCEL_ZOUT_H, &amp;data_H, <span class="number">1</span>);</span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, ACCEL_ZOUT_L, &amp;data_L, <span class="number">1</span>);</span><br><span class="line">    mpu6050_result[<span class="number">2</span>] = data_H &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    mpu6050_result[<span class="number">2</span>] += data_L;</span><br><span class="line"></span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, GYRO_XOUT_H, &amp;data_H, <span class="number">1</span>);</span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, GYRO_XOUT_L, &amp;data_L, <span class="number">1</span>);</span><br><span class="line">    mpu6050_result[<span class="number">3</span>] = data_H &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    mpu6050_result[<span class="number">3</span>] += data_L;</span><br><span class="line"></span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, GYRO_YOUT_H, &amp;data_H, <span class="number">1</span>);</span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, GYRO_YOUT_L, &amp;data_L, <span class="number">1</span>);</span><br><span class="line">    mpu6050_result[<span class="number">4</span>] = data_H &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    mpu6050_result[<span class="number">4</span>] += data_L;</span><br><span class="line"></span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, GYRO_ZOUT_H, &amp;data_H, <span class="number">1</span>);</span><br><span class="line">    i2c_read_mpu6050(mpu6050_client, GYRO_ZOUT_L, &amp;data_L, <span class="number">1</span>);</span><br><span class="line">    mpu6050_result[<span class="number">5</span>] = data_H &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    mpu6050_result[<span class="number">5</span>] += data_L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将读取得到的数据(内核)拷贝到用户空间*/</span></span><br><span class="line">    error = copy_to_user(buf, mpu6050_result, cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(error != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;copy_to_user error!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字符设备操作函数集，.release函数实现*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mpu6050_release</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;\n mpu6050_release \n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字符设备操作函数集*/</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">mpu6050_chr_dev_fops</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .open = mpu6050_open,</span><br><span class="line">    .read = mpu6050_read,</span><br><span class="line">    .release = mpu6050_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------------4.平台驱动函数集-----------------*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mpu6050_probe</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="type">const</span> <span class="keyword">struct</span> i2c_device_id *id)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>; <span class="comment">//保存错误状态码</span></span><br><span class="line">    printk(KERN_EMERG <span class="string">&quot;mpu6050  match successed  \n&quot;</span>);</span><br><span class="line">    <span class="comment">/*---------------------注册 字符设备部分-----------------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//采用动态分配的方式，获取设备编号，次设备号为0，</span></span><br><span class="line">    ret = alloc_chrdev_region(&amp;mpu6050_devno, <span class="number">0</span>, DEV_CNT, DEV_NAME);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;fail to alloc mpu6050_devno\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关联字符设备结构体cdev与文件操作结构体file_operations</span></span><br><span class="line">    mpu6050_chr_dev.owner = THIS_MODULE;</span><br><span class="line">    <span class="comment">//初始化字符设备，文件操作函数(mpu6050_chr_dev_fops)集赋值给 mpu6050_chr_dev</span></span><br><span class="line">    cdev_init(&amp;mpu6050_chr_dev, &amp;mpu6050_chr_dev_fops);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加设备至cdev_map散列表中</span></span><br><span class="line">    ret = cdev_add(&amp;mpu6050_chr_dev, mpu6050_devno, DEV_CNT);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printk(<span class="string">&quot;fail to add cdev\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*创建类 在/sys/class(串口) 中可以看到创建的class_mpu6050*/</span></span><br><span class="line">    class_mpu6050 = class_create(THIS_MODULE, DEV_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*创建设备 DEV_NAME 指定设备名，*/</span></span><br><span class="line">    device_mpu6050 = device_create(class_mpu6050, <span class="literal">NULL</span>, mpu6050_devno, <span class="literal">NULL</span>, DEV_NAME);</span><br><span class="line">    mpu6050_client = client;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">mpu6050_remove</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*删除设备*/</span></span><br><span class="line">    device_destroy(class_mpu6050, mpu6050_devno);  <span class="comment">//清除设备</span></span><br><span class="line">    class_destroy(class_mpu6050);  <span class="comment">//清除类</span></span><br><span class="line">    cdev_del(&amp;mpu6050_chr_dev);  <span class="comment">//清除设备号</span></span><br><span class="line">    unregister_chrdev_region(mpu6050_devno, DEV_CNT); <span class="comment">//取消注册字符设备</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义ID 匹配表*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">gtp_device_id</span>[] =</span> &#123;</span><br><span class="line">    &#123;<span class="string">&quot;mpu6050&quot;</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义设备树匹配表*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">mpu6050_of_match_table</span>[] =</span> &#123;</span><br><span class="line">    <span class="comment">//在设备树文件中中有与之对应的 mpu6050,INV_MPU6050</span></span><br><span class="line">    &#123;.compatible = <span class="string">&quot;mpu6050,INV_MPU6050&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="comment">/* sentinel */</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义i2c总线设备结构体*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">mpu6050_driver</span> =</span> &#123;</span><br><span class="line">    <span class="comment">//3.如果内核匹配设备树上的设备是否有与之对应的，则调用.probe(也就是上面的mpu6050_probe)</span></span><br><span class="line">    .probe = mpu6050_probe,</span><br><span class="line">    <span class="comment">//注销调用</span></span><br><span class="line">    .remove = mpu6050_remove,</span><br><span class="line">    <span class="comment">//与该驱动程序兼容的设备列表(上面有gtp_device_id函数)</span></span><br><span class="line">    .id_table = gtp_device_id,</span><br><span class="line">    <span class="comment">//提供了关于驱动程序的一般信息</span></span><br><span class="line">    .driver = &#123;</span><br><span class="line">        .name = <span class="string">&quot;mpu6050&quot;</span>,</span><br><span class="line">        .owner = THIS_MODULE,</span><br><span class="line">        <span class="comment">//设备树匹配表(mpu6050_of_match_table上面有)与内核匹配</span></span><br><span class="line">        .of_match_table = mpu6050_of_match_table,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*驱动初始化函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">mpu6050_driver_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    pr_info(<span class="string">&quot;mpu6050_driver_init\n&quot;</span>);</span><br><span class="line">    <span class="comment">//2.将mpu6050_driver结构体注册到内核中，内核匹配设备树上的设备是否有与之对应的</span></span><br><span class="line">    ret = i2c_add_driver(&amp;mpu6050_driver);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*驱动注销函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">mpu6050_driver_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    pr_info(<span class="string">&quot;mpu6050_driver_exit\n&quot;</span>);</span><br><span class="line">    <span class="comment">//内核匹配设备树上的设备是否有与之对应的，有则调用注销 .remove</span></span><br><span class="line">    i2c_del_driver(&amp;mpu6050_driver);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.加载驱动</span></span><br><span class="line">module_init(mpu6050_driver_init);</span><br><span class="line"><span class="comment">//卸载驱动</span></span><br><span class="line">module_exit(mpu6050_driver_exit);</span><br><span class="line"><span class="comment">//许可证</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure><p>i2c_add_driver函数（mpu6050_drv.c中294行）（Z:\linux\kernel\linux-imx-rel_imx_4.1.15_2.1.0_ga\drivers\i2c\i2c-core.c）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> i2c_add_driver(driver) \</span></span><br><span class="line"><span class="meta">i2c_register_driver(THIS_MODULE, driver)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">i2c_register_driver</span><span class="params">(<span class="keyword">struct</span> module *owner, <span class="keyword">struct</span> i2c_driver *driver)</span><span class="comment">//1719</span></span><br></pre></td></tr></table></figure><p>alloc_chrdev_region函数（mpu6050_drv.c中217行）（Z:\linux\kernel\linux-imx-rel_imx_4.1.15_2.1.0_ga\fs\char_dev.c）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">alloc_chrdev_region</span><span class="params">(<span class="type">dev_t</span> *, <span class="type">unsigned</span>, <span class="type">unsigned</span>, <span class="type">const</span> <span class="type">char</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">alloc_chrdev_region</span><span class="params">(<span class="type">dev_t</span> *dev, <span class="type">unsigned</span> baseminor, <span class="type">unsigned</span> count,</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> *name)</span></span><br></pre></td></tr></table></figure><p>cdev_init函数（mpu6050_drv.c中227行）(Z:\linux\kernel\linux-imx-rel_imx_4.1.15_2.1.0_ga\fs\char_dev.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cdev_init</span><span class="params">(<span class="keyword">struct</span> cdev *cdev, <span class="type">const</span> <span class="keyword">struct</span> file_operations *fops)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(cdev, <span class="number">0</span>, <span class="keyword">sizeof</span> *cdev);</span><br><span class="line">INIT_LIST_HEAD(&amp;cdev-&gt;<span class="built_in">list</span>);</span><br><span class="line">kobject_init(&amp;cdev-&gt;kobj, &amp;ktype_cdev_default);</span><br><span class="line">cdev-&gt;ops = fops;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cdev_add函数（mpu6050_drv.c中230行）(Z:\linux\kernel\linux-imx-rel_imx_4.1.15_2.1.0_ga\fs\char_dev.c)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cdev_init</span><span class="params">(<span class="keyword">struct</span> cdev *cdev, <span class="type">const</span> <span class="keyword">struct</span> file_operations *fops)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(cdev, <span class="number">0</span>, <span class="keyword">sizeof</span> *cdev);</span><br><span class="line">INIT_LIST_HEAD(&amp;cdev-&gt;<span class="built_in">list</span>);</span><br><span class="line">kobject_init(&amp;cdev-&gt;kobj, &amp;ktype_cdev_default);</span><br><span class="line">cdev-&gt;ops = fops;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int cdev_add(struct cdev *p, dev_t dev, unsigned count)</span><br></pre></td></tr></table></figure><p>查看内核详细信息数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//串口中的 /proc</span></span><br><span class="line"></span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line">cat /proc/devices</span><br><span class="line">cat /proc/interrupts</span><br><span class="line">cat /proc/meminfo</span><br><span class="line"></span><br><span class="line"><span class="comment">//串口中的 /sys</span></span><br></pre></td></tr></table></figure><h2 id="oled驱动流程">OLED驱动流程</h2><p>oled_drv.c(Z:\app_drv\drv\oled_drv.c)，需要结合内核源码查看原理(Z:\linux\kernel\linux-imx-rel_imx_4.1.15_2.1.0_ga)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* I2C设备驱动 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">oled_driver</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* I2C从设备 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_client</span> *<span class="title">oled_client</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* i2c设备地址 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">short</span> addr = <span class="number">0x3C</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* i2c驱动需要探测的从设备地址 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">short</span> address_list[] = &#123; <span class="number">0x3c</span>,<span class="number">0xfffe</span>U &#125;;  <span class="comment">// 0xfffeU 结束标志</span></span><br><span class="line"><span class="comment">/* 设备编号 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">dev_t</span> devid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设备class */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">oled_class</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* oled字符设备哦 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">i2c_cdev</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pos</span> &#123;</span></span><br><span class="line">    <span class="type">short</span> x;</span><br><span class="line">    <span class="type">short</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pos</span> <span class="title">pos1</span>;</span></span><br><span class="line">    <span class="type">short</span> ax;</span><br><span class="line">    <span class="type">short</span> ay;</span><br><span class="line">    <span class="type">short</span> az;</span><br><span class="line"></span><br><span class="line">    <span class="type">short</span> gx;</span><br><span class="line">    <span class="type">short</span> gy;</span><br><span class="line">    <span class="type">short</span> gz;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span>   MAGIC_NUMBER    <span class="string">&#x27;x&#x27;</span><span class="comment">//</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>   OLED_CLEAR    _IO(MAGIC_NUMBER    ,0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>   OLED_OPS   _IOWR(MAGIC_NUMBER    ,1, struct pos)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>   OLED_DATA  _IOWR(MAGIC_NUMBER    ,2, unsigned char [200])</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_Column128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************************</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Function  : 通过I2C协议写命令</span></span><br><span class="line"><span class="comment">*  Input     : data 数据</span></span><br><span class="line"><span class="comment">*  Return    : 写入字节长度  负数写入失败</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">oled_write_cmd</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[1];</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> cmds[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    cmds[<span class="number">0</span>] = <span class="number">0x00</span>;</span><br><span class="line">    cmds[<span class="number">1</span>] = cmd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数据传输三要素：源，目的，长度 */</span></span><br><span class="line">    msg[<span class="number">0</span>].addr = oled_client-&gt;addr;     <span class="comment">/* 目的 */</span></span><br><span class="line">    msg[<span class="number">0</span>].buf    = cmds;                       <span class="comment">/* 源 */</span></span><br><span class="line">    msg[<span class="number">0</span>].len    = <span class="number">2</span>;                    <span class="comment">/*  buf长度 */</span></span><br><span class="line">    msg[<span class="number">0</span>].flags = <span class="number">0</span>;                     <span class="comment">/* 0表示写 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i2c_transfer(oled_client-&gt;adapter,msg,<span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************************</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Function  : 通过I2C协议写数据</span></span><br><span class="line"><span class="comment">*  Input     : data 数据</span></span><br><span class="line"><span class="comment">*  Return    : 写入字节长度  负数写入失败</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">oled_write_data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">i2c_msg</span> <span class="title">msg</span>[1];</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> datas[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    datas[<span class="number">0</span>] = <span class="number">0x40</span>;</span><br><span class="line">    datas[<span class="number">1</span>] = data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数据传输三要素：源，目的，长度 */</span></span><br><span class="line">    msg[<span class="number">0</span>].addr = oled_client-&gt;addr;  <span class="comment">/* 目的 */</span></span><br><span class="line">    msg[<span class="number">0</span>].buf    = datas;              <span class="comment">/* 源 */</span></span><br><span class="line">    msg[<span class="number">0</span>].len    = <span class="number">2</span>;                 <span class="comment">/*  buf长度 */</span></span><br><span class="line">    msg[<span class="number">0</span>].flags= <span class="number">0</span>;                   <span class="comment">/* 0表示写 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i2c_transfer(oled_client-&gt;adapter,msg,<span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************************</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Function  : 坐标设定</span></span><br><span class="line"><span class="comment">*  Input     : x x坐标    0x00~0x7F</span></span><br><span class="line"><span class="comment">*              y y坐标    0~7</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">oled_pos</span><span class="params">(u8 x,u8 y)</span></span><br><span class="line">&#123;</span><br><span class="line">    oled_write_cmd(<span class="number">0xB0</span>+y);</span><br><span class="line">    oled_write_cmd(((x&amp;<span class="number">0xF0</span>)&gt;&gt;<span class="number">4</span>)|<span class="number">0x10</span>);            <span class="comment">/* 设置列地址高四位 */</span></span><br><span class="line">    oled_write_cmd(x&amp;<span class="number">0x0F</span>);                        <span class="comment">/* 设置列地址低四位 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*************************************************************</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Function  : 清屏</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">oled_clear</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 x;</span><br><span class="line">    u8 y;</span><br><span class="line">    <span class="keyword">for</span>(y=<span class="number">0</span>;y&lt;<span class="number">8</span>;y++)</span><br><span class="line">    &#123;</span><br><span class="line">        oled_write_cmd(<span class="number">0xB0</span>+y);            <span class="comment">/* 选择页 */</span></span><br><span class="line">        oled_write_cmd(<span class="number">0x00</span>);              <span class="comment">/* 设置列地址低四位 */</span></span><br><span class="line">        oled_write_cmd(<span class="number">0x10</span>);              <span class="comment">/* 设置列地址高四位 */</span></span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;x&lt;<span class="number">0x80</span>;x++)</span><br><span class="line">            oled_write_data(<span class="number">0x00</span>);           <span class="comment">/* 每次清1列 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Function  : 初始化</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">oled_hw_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    oled_write_cmd(<span class="number">0xAE</span>);<span class="comment">//--display off</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x00</span>);<span class="comment">//---set low column address</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x10</span>);<span class="comment">//---set high column address</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x40</span>);<span class="comment">//--set start line address  </span></span><br><span class="line">    oled_write_cmd(<span class="number">0xB0</span>);<span class="comment">//--set page address</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x81</span>); <span class="comment">// contract control</span></span><br><span class="line">    oled_write_cmd(<span class="number">0xFF</span>);<span class="comment">//--128   </span></span><br><span class="line">    oled_write_cmd(<span class="number">0xA1</span>);<span class="comment">//set segment remap </span></span><br><span class="line">    oled_write_cmd(<span class="number">0xA6</span>);<span class="comment">//--normal / reverse</span></span><br><span class="line">    oled_write_cmd(<span class="number">0xA8</span>);<span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x3F</span>);<span class="comment">//--1/32 duty</span></span><br><span class="line">    oled_write_cmd(<span class="number">0xC8</span>);<span class="comment">//Com scan direction</span></span><br><span class="line">    oled_write_cmd(<span class="number">0xD3</span>);<span class="comment">//-set display offset</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x00</span>);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    oled_write_cmd(<span class="number">0xD5</span>);<span class="comment">//set osc division</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x80</span>);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    oled_write_cmd(<span class="number">0xD8</span>);<span class="comment">//set area color mode off</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x05</span>);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    oled_write_cmd(<span class="number">0xD9</span>);<span class="comment">//Set Pre-Charge Period</span></span><br><span class="line">    oled_write_cmd(<span class="number">0xF1</span>);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    oled_write_cmd(<span class="number">0xDA</span>);<span class="comment">//set com pin configuartion</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x12</span>);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    oled_write_cmd(<span class="number">0xDB</span>);<span class="comment">//set Vcomh</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x30</span>);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    oled_write_cmd(<span class="number">0x8D</span>);<span class="comment">//set charge pump enable</span></span><br><span class="line">    oled_write_cmd(<span class="number">0x14</span>);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    oled_write_cmd(<span class="number">0xAF</span>);<span class="comment">//--turn on oled panel</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 Char_Size)</span></span><br><span class="line">&#123;      </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">0</span>,i = <span class="number">0</span>;</span><br><span class="line">    c = chr - <span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; Max_Column - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        y = y + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Char_Size == <span class="number">16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        oled_pos(x,y);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">            oled_write_data(F8X16[c*<span class="number">16</span>+i]);</span><br><span class="line">        oled_pos(x,y+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">            oled_write_data(F8X16[c*<span class="number">16</span>+i+<span class="number">8</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        oled_pos(x,y);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">            oled_write_data(F6x8[c][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示一个字符号串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowString</span><span class="params">(u8 x,u8 y,u8 *chr,u8 Char_Size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (chr[j]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        OLED_ShowChar(x, y, chr[j], Char_Size);</span><br><span class="line">        x += <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">120</span>) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            y += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 打开设备</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **************************************************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">oled_open</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line">    oled_hw_init();</span><br><span class="line"></span><br><span class="line">    oled_clear();                     <span class="comment">/* 初始清屏 */</span></span><br><span class="line">    oled_pos(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;oled open\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************************************************************************************************</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Function:    oled写函数</span></span><br><span class="line"><span class="comment"> *   Input       : buffer 2个字节 第一个字节oled片内地址0~0xFF，第二个字节为要写入的数据</span></span><br><span class="line"><span class="comment"> *                 size  写数据的长度  两个字节</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **************************************************************************************************/</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">oled_write</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">const</span> <span class="type">char</span> __user *buffer, <span class="type">size_t</span> size, <span class="type">loff_t</span> *off)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 一共可以显示168字</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">168</span>];</span><br><span class="line">    <span class="comment">//将数据从用户空间拷贝到内核(6050获取到到数据存在用户空间，将用户空间的数据传给内核用于屏幕显示)</span></span><br><span class="line">    copy_from_user(data,buffer,<span class="number">168</span>);</span><br><span class="line">    OLED_ShowString(<span class="number">0</span>, <span class="number">0</span>, data, <span class="number">16</span>);</span><br><span class="line">    <span class="comment">//oled_p6x8str(0, 0, data);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字符设备操作函数集，.release函数实现*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">oled_release</span><span class="params">(<span class="keyword">struct</span> inode *inode, <span class="keyword">struct</span> file *filp)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pos</span> <span class="title">pos_xy</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">oled_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filep, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pos</span> <span class="title">pos_temp</span> =</span> &#123;.x = <span class="number">0</span>, .y = <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span>(cmd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> OLED_CLEAR:</span><br><span class="line">            oled_clear();                     <span class="comment">/* 初始清屏 */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> OLED_OPS:</span><br><span class="line">            <span class="comment">//通过copy_to_user向用户空间传递数据</span></span><br><span class="line">            <span class="keyword">if</span>(copy_from_user(&amp;pos_temp, (<span class="type">void</span> *)arg, <span class="keyword">sizeof</span>(pos_temp)) != <span class="number">0</span>)&#123;</span><br><span class="line">                printk(<span class="string">&quot;copy_to_user error \n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            pos_xy.x = pos_temp.x;</span><br><span class="line">            pos_xy.y = pos_temp.y;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//用于处理需要显示在OLED屏幕上的数据</span></span><br><span class="line">        <span class="keyword">case</span> OLED_DATA:<span class="comment">//暂时不要写入超过255的数值</span></span><br><span class="line">            ret = copy_from_user(buf, (<span class="type">void</span> *)arg, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="keyword">if</span>( ret != <span class="number">0</span>)&#123;<span class="comment">//通过copy_to_user向用户空间传递数据</span></span><br><span class="line">                printk(<span class="string">&quot;copy_to_user error \n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//oled_p6x8str(pos_xy.x, pos_xy.y, buf);</span></span><br><span class="line">            OLED_ShowString(pos_xy.x, pos_xy.y, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="keyword">return</span> -EINVAL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * oled操作集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">oled_fops</span> =</span> &#123;</span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    <span class="comment">//将用户空间中的数据（6050传感器或其他源的数据）写入内核空间</span></span><br><span class="line">    .write = oled_write,</span><br><span class="line">    .open = oled_open,</span><br><span class="line">    .release = oled_release,</span><br><span class="line">    .unlocked_ioctl  = oled_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 当驱动和设备信息匹配成功之后，就会调用probe函数，驱动所有的资源的注册和初始化全部放在probe函数中；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">oled_probe</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="type">const</span> <span class="keyword">struct</span> i2c_device_id *i2c_device)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    printk(KERN_EMERG <span class="string">&quot;oled match successed  \n&quot;</span>);</span><br><span class="line">    <span class="comment">/* 动态分配字符设备编号: (major,0) */</span></span><br><span class="line">    <span class="keyword">if</span>(alloc_chrdev_region(&amp;devid, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;oled&quot;</span>) == OK)&#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;alloc device number : major:[%d], minor:[%d] succeed!\n&quot;</span>, MAJOR(devid), MINOR(devid));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;register device number error!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 字符设备初始化以及注册 */</span></span><br><span class="line">    cdev_init(&amp;i2c_cdev, &amp;oled_fops);</span><br><span class="line">    cdev_add(&amp;i2c_cdev, devid, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建类,它会在sys目录下创建/sys/class/oled_class这个类  */</span></span><br><span class="line">    oled_class = class_create(THIS_MODULE, <span class="string">&quot;oled_class&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(oled_class))&#123;</span><br><span class="line">        printk(<span class="string">&quot;can&#x27;t create class\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  在/sys/class/oled_class下创建oled设备，然后mdev通过这个自动创建/dev/oled这个设备节点 */</span></span><br><span class="line">    device_create(oled_class, <span class="literal">NULL</span>, devid, <span class="literal">NULL</span>, <span class="string">&quot;oled&quot;</span>);</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;create device file &#x27;oled&#x27; succeed!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 保存当前i2c_client */</span></span><br><span class="line">    oled_client = client;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;get i2c_client, client name = %s, addr = 0x%x\n&quot;</span>, oled_client-&gt;name, oled_client-&gt;addr);</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;get i2c_adapter, adapter name = %s\n&quot;</span>, oled_client-&gt;adapter-&gt;name);</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;oled probe\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设备被移除了，或者驱动被卸载了，全部要释放，释放资源的操作就放在该函数中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">oled_remove</span><span class="params">(<span class="keyword">struct</span> i2c_client *client)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 注销类、以及类设备 /sys/class/oled_class会被移除*/</span></span><br><span class="line">    device_destroy(oled_class, devid);</span><br><span class="line">    class_destroy(oled_class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 移除字符设备 */</span></span><br><span class="line">    cdev_del(&amp;i2c_cdev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注销设备编号 */</span></span><br><span class="line">    unregister_chrdev_region(devid, <span class="number">1</span>);</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;oled remove\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义设备树匹配表*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">of_device_id</span> <span class="title">oled_of_match_table</span>[] =</span> &#123;</span><br><span class="line">    &#123;.compatible = <span class="string">&quot;i2c_oled&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="comment">/* sentinel */</span>&#125;&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * oled设备探测到的回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">oled_detect</span><span class="params">(<span class="keyword">struct</span> i2c_client *client, <span class="keyword">struct</span> i2c_board_info *info)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;oled detect success\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置I2C从设备名称 必须要和i2c_driver.idtable里面名称匹配</span></span><br><span class="line">    <span class="built_in">strcpy</span>(info-&gt;type,<span class="string">&quot;oled&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* i2c设备id列表 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_device_id</span> <span class="title">oled_id</span>[] =</span> &#123;</span><br><span class="line">    &#123; <span class="string">&quot;oled&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line">    &#123; &#125; <span class="comment">/* 最后一个必须为空,表示结束 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * i2c驱动入口函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">i2c_driver</span> <span class="title">oled_driver</span> =</span> &#123;</span><br><span class="line">    .probe = oled_probe,</span><br><span class="line">    .remove = oled_remove,</span><br><span class="line">    .driver = &#123;</span><br><span class="line">        .name = <span class="string">&quot;oled&quot;</span>,      <span class="comment">/* 驱动名称 */</span></span><br><span class="line">            .owner = THIS_MODULE,</span><br><span class="line">        .of_match_table = oled_of_match_table,</span><br><span class="line">    &#125;,</span><br><span class="line">    .id_table = oled_id, <span class="comment">/* id列表 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *init入口函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">oled_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    i2c_add_driver(&amp;oled_driver); <span class="comment">/* 将i2c_driver注册到系统中去 */</span></span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;oled i2c_driver was added into the system.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * exit出口函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">oled_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    i2c_del_driver(&amp;oled_driver);</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;oled i2c_driver was deleted from the system.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(oled_init);</span><br><span class="line">module_exit(oled_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;oled device driver, 2023-02-21&quot;</span>);</span><br></pre></td></tr></table></figure><h1>存储器</h1><ul><li>寄存器</li><li>RAM(<a href="https://baike.baidu.com/item/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8/4099402?fr=ge_ala">参考</a>)：断电之后，数据消失，相当于手机运行内存<ul><li>DRAM：电脑的内存条，靠电容存储信息</li><li>SRAM：CPU的多级缓存，cache</li></ul></li><li>ROM(<a href="https://baike.baidu.com/item/%E5%8F%AA%E8%AF%BB%E5%AD%98%E5%82%A8%E5%99%A8/2399075?fr=ge_ala">参考</a>)：断电之后，数据长久保存<ul><li>EEPROM：带电可擦可编程只读存储器<ul><li>NorFlash：一次可以读取一个字节，每个bit都可以被寻址，可以直接运行程序代码</li><li>NandFlash：块访问，不适合直接运行程序代码</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;驱动&lt;/h1&gt;
&lt;h2 id=&quot;含义&quot;&gt;含义&lt;/h2&gt;
&lt;p&gt;物理驱动：电机驱动…&lt;/p&gt;
&lt;p&gt;软件驱动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统调用（open、read、write、</summary>
      
    
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Win11相关设置</title>
    <link href="https://xinzaigeek.68565200.xyz/post/f705831.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/f705831.html</id>
    <published>2024-10-21T02:23:24.000Z</published>
    <updated>2024-11-28T12:28:04.018Z</updated>
    
    <content type="html"><![CDATA[<h1>使用 Win10的文件资源管理器</h1><p>在 Windows 11 中恢复旧文件资源管理器 首先打开记事本并粘贴以下文本代码，然后保存，将记事本重命名为：文件名.reg，如：<code>file.reg</code>，然后双击添加注册表即可</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;<span class="number">2</span>aa9162e-c906-<span class="number">4</span>dd9-ad0b-<span class="number">3</span>d24a8eef5a0&#125;]</span><br><span class="line">@=&quot;CLSID_ItemsViewAdapter&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;<span class="number">2</span>aa9162e-c906-<span class="number">4</span>dd9-ad0b-<span class="number">3</span>d24a8eef5a0&#125;\InProcServer32]</span><br><span class="line">@=&quot;C:\\Windows\\System32\\Windows.UI.FileExplorer.dll_&quot;</span><br><span class="line">&quot;ThreadingModel&quot;=&quot;Apartment&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;<span class="number">6480100</span>b-<span class="number">5</span>a83-<span class="number">4</span>d1e-<span class="number">9</span>f69-<span class="number">8</span>ae5a88e9a33&#125;]</span><br><span class="line">@=&quot;File Explorer Xaml Island View Adapter&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;<span class="number">6480100</span>b-<span class="number">5</span>a83-<span class="number">4</span>d1e-<span class="number">9</span>f69-<span class="number">8</span>ae5a88e9a33&#125;\InProcServer32]</span><br><span class="line">@=&quot;C:\\Windows\\System32\\Windows.UI.FileExplorer.dll_&quot;</span><br><span class="line">&quot;ThreadingModel&quot;=&quot;Apartment&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\Toolbar\ShellBrowser]</span><br><span class="line">&quot;ITBar7Layout&quot;=hex:<span class="number">13</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">20</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">10</span>,<span class="number">00</span>,<span class="number">01</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">01</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">01</span>,<span class="number">07</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">5</span>e,<span class="number">01</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,\</span><br><span class="line">  <span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span></span><br></pre></td></tr></table></figure><p>关闭 Windows 10 的文件资源管理器，切换回 Windows 11</p><p>再次打开记事本，把下面的文本粘贴进去，保存同样的 .reg 文件，双击执行即可</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span> </span><br><span class="line"></span><br><span class="line">[-HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;<span class="number">2</span>aa9162e-c906-<span class="number">4</span>dd9-ad0b-<span class="number">3</span>d24a8eef5a0&#125;] </span><br><span class="line"></span><br><span class="line">[-HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;<span class="number">6480100</span>b-<span class="number">5</span>a83-<span class="number">4</span>d1e-<span class="number">9</span>f69-<span class="number">8</span>ae5a88e9a33&#125;]</span><br></pre></td></tr></table></figure><h1>Win11右键修改成Win10</h1><p><code>win + r</code>以管理员运行命令窗口，输入下列代码，重启电脑或文件管理区</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\CLSID\&#123;<span class="number">86</span>ca1aa0-<span class="number">34</span>aa-<span class="number">4</span>e8b-a509-<span class="number">50</span>c905bae2a2&#125;\InprocServer32&quot; /f /ve</span><br></pre></td></tr></table></figure><h1>家庭版系统增加Hyper-V</h1><p>新建txt文件，将下面复制进去，改名为<code>Hyper-V.bat</code>，以管理员身份运行，然后重启电脑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pushd &quot;%~dp0&quot;</span><br><span class="line"></span><br><span class="line">dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txt</span><br><span class="line"></span><br><span class="line">for /f %%i in (&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span><br><span class="line"></span><br><span class="line">del hyper-v.txt</span><br><span class="line"></span><br><span class="line">Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;使用 Win10的文件资源管理器&lt;/h1&gt;
&lt;p&gt;在 Windows 11 中恢复旧文件资源管理器 首先打开记事本并粘贴以下文本代码，然后保存，将记事本重命名为：文件名.reg，如：&lt;code&gt;file.reg&lt;/code&gt;，然后双击添加注册表即可&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="技术积累记录" scheme="https://xinzaigeek.68565200.xyz/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Win11相关设置" scheme="https://xinzaigeek.68565200.xyz/tags/Win11%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>0.MySQL数据准备</title>
    <link href="https://xinzaigeek.68565200.xyz/post/68ec1b16.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/68ec1b16.html</id>
    <published>2024-10-18T06:36:15.000Z</published>
    <updated>2024-12-12T13:38:24.181Z</updated>
    
    <content type="html"><![CDATA[<p><strong>mydb2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">create database if not exists mydb2;</span><br><span class="line">use mydb2;</span><br><span class="line">-- 创建商品表：</span><br><span class="line">create table product(</span><br><span class="line"> pid int primary key auto_increment, -- 商品编号</span><br><span class="line"> pname varchar(20) not null , -- 商品名字</span><br><span class="line"> price double,  -- 商品价格</span><br><span class="line"> category_id varchar(20) -- 商品所属分类</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into product values(null,&#x27;海尔洗衣机&#x27;,5000,&#x27;c001&#x27;);</span><br><span class="line">insert into product values(null,&#x27;美的冰箱&#x27;,3000,&#x27;c001&#x27;);</span><br><span class="line">insert into product values(null,&#x27;格力空调&#x27;,5000,&#x27;c001&#x27;);</span><br><span class="line">insert into product values(null,&#x27;九阳电饭煲&#x27;,200,&#x27;c001&#x27;);</span><br><span class="line">insert into product values(null,&#x27;啄木鸟衬衣&#x27;,300,&#x27;c002&#x27;);</span><br><span class="line">insert into product values(null,&#x27;恒源祥西裤&#x27;,800,&#x27;c002&#x27;);</span><br><span class="line">insert into product values(null,&#x27;花花公子夹克&#x27;,440,&#x27;c002&#x27;);</span><br><span class="line">insert into product values(null,&#x27;劲霸休闲裤&#x27;,266,&#x27;c002&#x27;);</span><br><span class="line">insert into product values(null,&#x27;海澜之家卫衣&#x27;,180,&#x27;c002&#x27;);</span><br><span class="line">insert into product values(null,&#x27;杰克琼斯运动裤&#x27;,430,&#x27;c002&#x27;);</span><br><span class="line">insert into product values(null,&#x27;兰蔻面霜&#x27;,300,&#x27;c003&#x27;);</span><br><span class="line">insert into product values(null,&#x27;雅诗兰黛精华水&#x27;,200,&#x27;c003&#x27;);</span><br><span class="line">insert into product values(null,&#x27;香奈儿香水&#x27;,350,&#x27;c003&#x27;);</span><br><span class="line">insert into product values(null,&#x27;SK-II神仙水&#x27;,350,&#x27;c003&#x27;);</span><br><span class="line">insert into product values(null,&#x27;资生堂粉底液&#x27;,180,&#x27;c003&#x27;);</span><br><span class="line">insert into product values(null,&#x27;老北京方便面&#x27;,56,&#x27;c004&#x27;);</span><br><span class="line">insert into product values(null,&#x27;良品铺子海带丝&#x27;,17,&#x27;c004&#x27;);</span><br><span class="line">insert into product values(null,&#x27;三只松鼠坚果&#x27;,88,null);</span><br></pre></td></tr></table></figure><p><strong>mydb3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">use mydb3;</span><br><span class="line"></span><br><span class="line">-- 创建部门表</span><br><span class="line">create table if not exists dept3(</span><br><span class="line">  deptno varchar(20) primary key ,  -- 部门号</span><br><span class="line">  name varchar(20) -- 部门名字</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">-- 创建员工表</span><br><span class="line">create table if not exists emp3(</span><br><span class="line">  eid varchar(20) primary key , -- 员工编号</span><br><span class="line">  ename varchar(20), -- 员工名字</span><br><span class="line">  age int,  -- 员工年龄</span><br><span class="line">  dept_id varchar(20)  -- 员工所属部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 给dept3表添加数据</span><br><span class="line">insert into dept3 values(&#x27;1001&#x27;,&#x27;研发部&#x27;);</span><br><span class="line">insert into dept3 values(&#x27;1002&#x27;,&#x27;销售部&#x27;);</span><br><span class="line">insert into dept3 values(&#x27;1003&#x27;,&#x27;财务部&#x27;);</span><br><span class="line">insert into dept3 values(&#x27;1004&#x27;,&#x27;人事部&#x27;);</span><br><span class="line"> </span><br><span class="line">-- 给emp表添加数据</span><br><span class="line">insert into emp3 values(&#x27;1&#x27;,&#x27;乔峰&#x27;,20, &#x27;1001&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;2&#x27;,&#x27;段誉&#x27;,21, &#x27;1001&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;3&#x27;,&#x27;虚竹&#x27;,23, &#x27;1001&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;4&#x27;,&#x27;阿紫&#x27;,18, &#x27;1001&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;5&#x27;,&#x27;扫地僧&#x27;,85, &#x27;1002&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;6&#x27;,&#x27;李秋水&#x27;,33, &#x27;1002&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;7&#x27;,&#x27;鸠摩智&#x27;,50, &#x27;1002&#x27;); </span><br><span class="line">insert into emp3 values(&#x27;8&#x27;,&#x27;天山童姥&#x27;,60, &#x27;1003&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;9&#x27;,&#x27;慕容博&#x27;,58, &#x27;1003&#x27;);</span><br><span class="line">insert into emp3 values(&#x27;10&#x27;,&#x27;丁春秋&#x27;,71, &#x27;1005&#x27;);</span><br></pre></td></tr></table></figure><p><strong>mydb4</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">    emp_id int primary key auto_increment comment &#x27;编号&#x27;,</span><br><span class="line">    emp_name char(20) not null default &#x27;&#x27; comment &#x27;姓名&#x27;,</span><br><span class="line">    salary decimal(10,2) not null default 0 comment &#x27;工资&#x27;,</span><br><span class="line">    department char(20) not null default &#x27;&#x27; comment &#x27;部门&#x27;</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">insert into emp(emp_name,salary,department) </span><br><span class="line">values(&#x27;张晶晶&#x27;,5000,&#x27;财务部&#x27;),(&#x27;王飞飞&#x27;,5800,&#x27;财务部&#x27;),(&#x27;赵刚&#x27;,6200,&#x27;财务部&#x27;),(&#x27;刘小贝&#x27;,5700,&#x27;人事部&#x27;),</span><br><span class="line">(&#x27;王大鹏&#x27;,6700,&#x27;人事部&#x27;),(&#x27;张小斐&#x27;,5200,&#x27;人事部&#x27;),(&#x27;刘云云&#x27;,7500,&#x27;销售部&#x27;),(&#x27;刘云鹏&#x27;,7200,&#x27;销售部&#x27;),</span><br><span class="line">(&#x27;刘云鹏&#x27;,7800,&#x27;销售部&#x27;);</span><br></pre></td></tr></table></figure><p><strong>mydb6_view</strong>、<strong>mydb7_procedure</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">-- 视图</span><br><span class="line">create table dept(</span><br><span class="line">    deptno int primary key,</span><br><span class="line">    dname varchar(20),</span><br><span class="line">    loc varchar(20)</span><br><span class="line">);</span><br><span class="line">insert into dept values(10, &#x27;教研部&#x27;,&#x27;北京&#x27;),</span><br><span class="line">(20, &#x27;学工部&#x27;,&#x27;上海&#x27;),</span><br><span class="line">(30, &#x27;销售部&#x27;,&#x27;广州&#x27;),</span><br><span class="line">(40, &#x27;财务部&#x27;,&#x27;武汉&#x27;);</span><br><span class="line"></span><br><span class="line">create table emp(</span><br><span class="line">    empno int primary key,</span><br><span class="line">    ename varchar(20),</span><br><span class="line">    job varchar(20),</span><br><span class="line">    mgr int,</span><br><span class="line">    hiredate date,</span><br><span class="line">    sal numeric(8,2),</span><br><span class="line">    comm numeric(8, 2),</span><br><span class="line">    deptno int,</span><br><span class="line">    -- FOREIGN KEY (mgr) REFERENCES emp(empno),</span><br><span class="line">    FOREIGN KEY (deptno) REFERENCES dept(deptno) ON DELETE SET NULL ON UPDATE CASCADE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into emp values</span><br><span class="line">(1001, &#x27;甘宁&#x27;, &#x27;文员&#x27;, 1013, &#x27;2000-12-17&#x27;, 8000.00, null, 20),</span><br><span class="line">(1002, &#x27;黛绮丝&#x27;, &#x27;销售员&#x27;, 1006, &#x27;2001-02-20&#x27;, 16000.00, 3000.00, 30),</span><br><span class="line">(1003, &#x27;殷天正&#x27;, &#x27;销售员&#x27;, 1006, &#x27;2001-02-22&#x27;, 12500.00, 5000.00, 30),</span><br><span class="line">(1004, &#x27;刘备&#x27;, &#x27;经理&#x27;, 1009, &#x27;2001-4-02&#x27;, 29750.00, null, 20),</span><br><span class="line">(1005, &#x27;谢逊&#x27;, &#x27;销售员&#x27;, 1006, &#x27;2001-9-28&#x27;, 12500.00, 14000.00, 30),</span><br><span class="line">(1006, &#x27;关羽&#x27;, &#x27;经理&#x27;, 1009, &#x27;2001-05-01&#x27;, 28500.00, null, 30),</span><br><span class="line">(1007, &#x27;张飞&#x27;, &#x27;经理&#x27;, 1009, &#x27;2001-09-01&#x27;, 24500.00, null, 10),</span><br><span class="line">(1008, &#x27;诸葛亮&#x27;, &#x27;分析师&#x27;, 1004, &#x27;2007-04-19&#x27;, 30000.00, null, 20),</span><br><span class="line">(1009, &#x27;曾阿牛&#x27;, &#x27;董事长&#x27;, null, &#x27;2001-11-17&#x27;, 50000.00, null, 10),</span><br><span class="line">(1010, &#x27;韦一笑&#x27;, &#x27;销售员&#x27;, 1006, &#x27;2001-09-08&#x27;, 15000.00, 0.00, 30),</span><br><span class="line">(1011, &#x27;周泰&#x27;, &#x27;文员&#x27;, 1008, &#x27;2007-05-23&#x27;, 11000.00, null, 20),</span><br><span class="line">(1012, &#x27;程普&#x27;, &#x27;文员&#x27;, 1006, &#x27;2001-12-03&#x27;, 9500.00, null, 30),</span><br><span class="line">(1013, &#x27;庞统&#x27;, &#x27;分析师&#x27;, 1004, &#x27;2001-12-03&#x27;, 30000.00, null, 20),</span><br><span class="line">(1014, &#x27;黄盖&#x27;, &#x27;文员&#x27;, 1007, &#x27;2002-01-23&#x27;, 13000.00, null, 10);</span><br><span class="line"></span><br><span class="line">create table salgrade(</span><br><span class="line">    grade int primary key,</span><br><span class="line">    losal int,</span><br><span class="line">    hisal int</span><br><span class="line">);</span><br><span class="line">insert into salgrade values</span><br><span class="line">(1, 7000, 12000),</span><br><span class="line">(2, 12010, 14000),</span><br><span class="line">(3, 14010, 20000),</span><br><span class="line">(4, 20010, 30000),</span><br><span class="line">(5, 30010, 99990);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;mydb2&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="MySQL" scheme="https://xinzaigeek.68565200.xyz/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://xinzaigeek.68565200.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>1.MySQL基础</title>
    <link href="https://xinzaigeek.68565200.xyz/post/c24675b4.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/c24675b4.html</id>
    <published>2024-10-17T06:36:15.000Z</published>
    <updated>2024-12-18T02:30:09.608Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">database</td><td style="text-align:center">库</td></tr><tr><td style="text-align:center">table</td><td style="text-align:center">表</td></tr><tr><td style="text-align:center">create</td><td style="text-align:center">创建</td></tr><tr><td style="text-align:center">drop</td><td style="text-align:center">删除(数据库或表)</td></tr><tr><td style="text-align:center">alter</td><td style="text-align:center">修改</td></tr><tr><td style="text-align:center">update</td><td style="text-align:center">数据修改</td></tr><tr><td style="text-align:center">insert into</td><td style="text-align:center">插入</td></tr><tr><td style="text-align:center">where</td><td style="text-align:center">筛选</td></tr><tr><td style="text-align:center">delete from</td><td style="text-align:center">删除(数据)</td></tr><tr><td style="text-align:center">select</td><td style="text-align:center">查询</td></tr></tbody></table><h1>查看所有数据库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查看所有数据库</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><h1>查看当前数据库所有的表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><h1>查看指定表的创建语句</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show create table 查看的表名;</span><br><span class="line">show create table student;</span><br></pre></td></tr></table></figure><h1>查看表结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;</span><br><span class="line">desc student;</span><br></pre></td></tr></table></figure><h1>创建数据库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database 创建数据库名字;</span><br><span class="line">create database mydb1;</span><br><span class="line"></span><br><span class="line">-- if not exists：当数据库mydbq不存在时才创建</span><br><span class="line">create database if not exists 创建数据库名字;</span><br><span class="line">create database if not exists mydbq;</span><br></pre></td></tr></table></figure><h1>使用哪个数据库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use 使用的数据库名;</span><br><span class="line">use mydb1;</span><br></pre></td></tr></table></figure><h1>删除数据库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drop database 删除的数据库名;</span><br><span class="line">drop database mydb1;</span><br><span class="line"></span><br><span class="line">-- if exists：当数据库mydb1存在时才删除</span><br><span class="line">drop database if exists 删除的数据库名;</span><br><span class="line">drop database if exists mydb1;</span><br></pre></td></tr></table></figure><h1>修改数据库编码（默认utf8）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter database 修改的数据库名 character set 编码格式;</span><br><span class="line">alter database mydb1 character set utf8;</span><br></pre></td></tr></table></figure><h1>创建表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表是构建一张空表，指定这个表的名字，这个表有几列，每一列叫什么名字，以及每一列存储的数据类型</span><br><span class="line">-- 字段名：每一列的名字，中括号中的内容可以省略也可以添加</span><br><span class="line">create table [if not exists]表名(</span><br><span class="line">  字段名1 类型[(宽度)] [约束条件] [comment &#x27;字段说明&#x27;],</span><br><span class="line">  字段名2 类型[(宽度)] [约束条件] [comment &#x27;字段说明&#x27;],</span><br><span class="line">  字段名3 类型[(宽度)] [约束条件] [comment &#x27;字段说明&#x27;]</span><br><span class="line">)[表的一些设置];</span><br><span class="line"></span><br><span class="line">create table if not exists student(</span><br><span class="line">    sid int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    gender varchar(10),</span><br><span class="line">    age int,</span><br><span class="line">    birth date,</span><br><span class="line">    address varchar(20),</span><br><span class="line">    score double</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1>数据类型</h1><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">描述</th><th>大小</th></tr></thead><tbody><tr><td style="text-align:center">tinyint</td><td style="text-align:center">非常小的整数，带符号的范围是(-128, 127)，无符号的范围是(0, 255)</td><td>1 byte</td></tr><tr><td style="text-align:center">smallint</td><td style="text-align:center">较小的整数，带符号的范围是(-32,768, 32,767)，无符号的范围是(0, 65,535)</td><td>2 byte</td></tr><tr><td style="text-align:center">mediumint</td><td style="text-align:center">中等大小的整数，带符号的范围是(-8,388,608, 8,388,607)，无符号的范围是(0, 16,777,215)</td><td>3 byte</td></tr><tr><td style="text-align:center">int或integer</td><td style="text-align:center">普通大小的整数，带符号的范围是(-2,147,483,648, 2,147,483,647)，无符号的范围是(0, 4,294,967,295)</td><td>4 byte</td></tr><tr><td style="text-align:center">bigint</td><td style="text-align:center">大整数，带符号的范围是(-9,223,372,036,854,775,808, 9,223,372,036,854,775,807)，无符号的范围是(0, 18,446,744,073,709,551,615)</td><td>8 byte</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">单精度浮点数</td><td>4 byte</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">双精度浮点数</td><td>8 byte</td></tr><tr><td style="text-align:center">decimal</td><td style="text-align:center">小数，精度和标度可变</td><td></td></tr><tr><td style="text-align:center">varchar</td><td style="text-align:center">变长字符串，0-65535</td><td></td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">日期，格式为YYYY-MM-DD(1000-01-01~9999-12-31)</td><td>3</td></tr><tr><td style="text-align:center">datetime</td><td style="text-align:center">混合日期和时间值(1000-01-01 00:00:00~9999-12-31 23:59:59)</td><td>8</td></tr><tr><td style="text-align:center">timestamp</td><td style="text-align:center">混合日期和时间值 时间戳(获取当前时区时间)</td><td>4</td></tr></tbody></table><h1>删除表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名;</span><br><span class="line">drop table student;</span><br></pre></td></tr></table></figure><h1>修改表结构</h1><h2 id="表添加列">表添加列</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 列名 类型(长度) [约束];</span><br><span class="line"></span><br><span class="line">-- 为student表添加一个新的字段为：系别 dept 类型为 varchar(20)</span><br><span class="line">alter table student add dept varchar(20);</span><br></pre></td></tr></table></figure><h2 id="修改列名和类型">修改列名和类型</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 change 旧列名 新列名 类型(长度) 约束; </span><br><span class="line"></span><br><span class="line">-- 为student表的dept字段更换为department varchar(30)</span><br><span class="line">alter table student change dept department varchar(30);</span><br></pre></td></tr></table></figure><h2 id="删除列">删除列</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 drop 列名;</span><br><span class="line"></span><br><span class="line">-- 删除student表中department这列</span><br><span class="line">alter table student drop department;</span><br></pre></td></tr></table></figure><h2 id="修改表名">修改表名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rename table 表名 to 新表名;</span><br><span class="line"></span><br><span class="line">-- 将表student改名成 stu</span><br><span class="line">rename table student to stu;</span><br></pre></td></tr></table></figure><h1>表的增删改(DML)</h1><h2 id="插入数据">插入数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 向某些列插入值</span><br><span class="line">-- 值要与列名的数据类型保持一致</span><br><span class="line">insert into 表 (列名1,列名2,列名3...) values (值1,值2,值3...);</span><br><span class="line">-- 向表中所有列插入值</span><br><span class="line">insert into 表 values (值1,值2,值3...);</span><br><span class="line"></span><br><span class="line">insert into student(sid,name,gender,age,birth,address,score)</span><br><span class="line">values (1001,&#x27;张三&#x27;,&#x27;男&#x27;,18,&#x27;2001-11-12&#x27;,&#x27;北京&#x27;,13.9),</span><br><span class="line">(1002,&#x27;李四&#x27;,&#x27;女&#x27;,15,&#x27;2001-11-12&#x27;,&#x27;北京&#x27;,10.9);</span><br><span class="line"></span><br><span class="line">insert into student values (1003,&#x27;王五&#x27;,&#x27;女&#x27;,34,&#x27;1992-12-01&#x27;,&#x27;深圳&#x27;,23);</span><br></pre></td></tr></table></figure><h2 id="数据修改">数据修改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 将字段名那一列全部行都修改</span><br><span class="line">update 表名 set 字段名=值,字段名=值...;</span><br><span class="line">-- 满足条件的行才修改</span><br><span class="line">update 表名 set 字段名=值,字段名=值... where 条件;</span><br><span class="line"></span><br><span class="line">-- 将所有学生的地址修改为重庆</span><br><span class="line">update student set address=&#x27;重庆&#x27;;</span><br><span class="line">-- id为1002的学生的地址修改为北京</span><br><span class="line">update student set address=&#x27;北京&#x27; where sid = 1002;</span><br><span class="line">-- id为1001的学生的地址修改为上海，成绩修成绩修改为100</span><br><span class="line">update student set address=&#x27;上海&#x27;,score=100 where sid = 1001;</span><br></pre></td></tr></table></figure><h2 id="数据删除">数据删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名 [where 条件];</span><br><span class="line">-- 整个表删除，然后再创建该表</span><br><span class="line">truncate table 表名; 或者 truncate 表名;</span><br><span class="line"></span><br><span class="line">-- 删除sid为1004的学生数据</span><br><span class="line">delete from student where sid = 1003;</span><br><span class="line">-- 2.删除表所有数据</span><br><span class="line">delete from student;</span><br><span class="line">-- 3.清空表数据</span><br><span class="line">truncate table student;</span><br><span class="line">truncate student;</span><br></pre></td></tr></table></figure><h1>约束</h1><h2 id="主键约束">主键约束</h2><p>主键可以是一个列或者多个列的组合，其值能唯一地标识表中的每一行，方便在RDBMS中尽快的找到某一行</p><p><code>不允许重复，不允许空值</code>，每个表最多只允许<code>一个主键</code>，当创建主键的约束时，系统默认会在所在的列和列组合上建立对应的唯一索引</p><p>关键字：<code>primary key</code></p><h3 id="添加单列主键">添加单列主键</h3><p>方式1：在定义字段的同时指定主键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">   ...</span><br><span class="line">   &lt;字段名&gt; &lt;数据类型&gt; primary key</span><br><span class="line">   ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table emp1(</span><br><span class="line">    -- 将eid添加主键约束</span><br><span class="line">eid int primary key,</span><br><span class="line">name varchar(20),</span><br><span class="line">deptId int,</span><br><span class="line">salary double</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>方式2：在定义字段之后再指定主键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">   ...</span><br><span class="line">    -- []里面可以省略</span><br><span class="line">   [constraint &lt;约束名&gt;] primary key [字段名]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table emp2(</span><br><span class="line">eid int,</span><br><span class="line">name varchar(20),</span><br><span class="line">deptId int,</span><br><span class="line">salary double,</span><br><span class="line">    -- constraint pk1可以省略</span><br><span class="line">constraint pk1 primary key(eid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="添加多列联合主键">添加多列联合主键</h3><ul><li>主键由一张表中多个字段组成，只要主键的字段不完全相同即可但任何一个都不能为空</li><li>当主键是由多个字段组成时，不能直接在字段名后面声明主键约束</li><li>一张表只能有一个主键，联合主键也是一个主键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">   ...</span><br><span class="line">   primary key (字段1，字段2，…,字段n)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table emp3(</span><br><span class="line">eid int,</span><br><span class="line">name varchar(20),</span><br><span class="line">deptId int,</span><br><span class="line">salary double,</span><br><span class="line">constraint pk2 primary key (eid,deptId)</span><br><span class="line">);</span><br><span class="line">insert into emp3 values(1001,&#x27;李四&#x27;,2001,23);</span><br><span class="line">-- eid 和 deptId两个都相同添加不了</span><br><span class="line">-- insert into emp3 values(1001,&#x27;李四&#x27;,2001,23);</span><br><span class="line">-- 只要两个有一个不同即可添加，但是两个任何一个都不能为空</span><br><span class="line">insert into emp3 values(1001,&#x27;李四&#x27;,2002,23);</span><br></pre></td></tr></table></figure><h3 id="修改表结构添加主键">修改表结构添加主键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">   ...</span><br><span class="line">);</span><br><span class="line">alter table &lt;表名&gt; add primary key（字段列表);</span><br><span class="line"></span><br><span class="line">create table emp4(</span><br><span class="line">eid int,</span><br><span class="line">name varchar(20),</span><br><span class="line">deptId int,</span><br><span class="line">salary double</span><br><span class="line">);</span><br><span class="line">-- 添加单列主键</span><br><span class="line">alter table emp4 add primary key(eid);</span><br><span class="line"></span><br><span class="line">create table emp5(</span><br><span class="line">eid int,</span><br><span class="line">name varchar(20),</span><br><span class="line">deptId int,</span><br><span class="line">salary double</span><br><span class="line">);</span><br><span class="line">-- 添加联合主键</span><br><span class="line">alter table emp5 add primary key(name,eid);</span><br></pre></td></tr></table></figure><h3 id="删除主键">删除主键</h3><p>修改表结构实现删除主键，删除主键不分单列主键或多列联合主键，删除全删</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alter table &lt;数据表名&gt; drop primary key;</span><br><span class="line"></span><br><span class="line">-- 删除单列主键</span><br><span class="line">alter table emp1 drop primary key;</span><br><span class="line">-- 删除多列联合主键</span><br><span class="line">alter table emp5 drop primary key;</span><br></pre></td></tr></table></figure><h2 id="自增长约束">自增长约束</h2><p>当主键定义为自增长后，这个主键的值就不再需要用户输入数据了，而由数据库系统根据定义自动赋值。每增加一条记录，主键会自动以相同的步长进行增长</p><blockquote><p>给字段添加 <code>auto_increment</code> 属性来实现主键自增长</p><ul><li>初始值是 1，每新增一条记录，字段值自动加 1</li><li>一个表中只能有一个字段使用 auto_increment约束，且该字段必须有唯一索引，以避免序号重复（即为主键或主键的一部分）</li><li>字段必须具备 NOT NULL 属性</li><li>字段只能是整数类型(TINYINT、SMALLINT、INT、BIGINT )</li><li>增长的最大值为该字段数据类型的最大值</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 primary key auto_increment</span><br><span class="line"></span><br><span class="line">-- 添加自增站约束</span><br><span class="line">create table t_user1(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line">-- 从1开始自增长，每次加1</span><br><span class="line">insert into t_user1 values(NULL,&#x27;张三&#x27;);</span><br><span class="line">insert into t_user1(name) values(&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>指定自增字段初始值</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 方式一：创建表时指定</span><br><span class="line">create table t_user2(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20)</span><br><span class="line">)auto_increment=100;</span><br><span class="line"></span><br><span class="line">-- 方式二：创建表之后指定</span><br><span class="line">create table t_user3(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line">-- 通过修改表结构来指定初始值</span><br><span class="line">alter table t_user3 auto_increment = 200;</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>delete</code> 和 <code>truncate</code> 在删除后自增列的变化</strong></p></blockquote><ul><li>delete 数据之后自动增长从断点开始</li><li>truncate 数据之后自动增长从默认起始值开始</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- delete删除数据之后，自增长还是在最后一个值基础上加1</span><br><span class="line">delete from t_user2;</span><br><span class="line">-- 如最后一个id值为100，则删除重新添加数据之后从101开始</span><br><span class="line">insert into t_user2(name) values(&#x27;李四&#x27;);</span><br><span class="line"></span><br><span class="line">-- truncate删除之后，自增长从1开始</span><br><span class="line">truncate t_user3;</span><br><span class="line">insert into t_user3(name) values(&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure><h2 id="非空约束">非空约束</h2><p>使用了非空约束的字段，如果用户在添加数据时没有指定值，数据库系统就会报错</p><blockquote><p>添加</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 方式一：创建表时指定</span><br><span class="line">字段名 数据类型 not null;</span><br><span class="line">create table t_user6(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20) not null,-- 指定非空约束</span><br><span class="line">address varchar(20) not null</span><br><span class="line">);</span><br><span class="line">-- insert into t_user6(id) values(1001);name、address为空报错</span><br><span class="line">-- 控制字符串可以</span><br><span class="line">insert into t_user6(id,name,address) values(1001,&#x27;&#x27;,&#x27;&#x27;);</span><br><span class="line">-- 字符串为NULL</span><br><span class="line">insert into t_user6(id,name,address) values(1001,&#x27;NULL&#x27;,&#x27;NULL&#x27;);</span><br><span class="line"></span><br><span class="line">-- 方式二：创建表之后通过修改表结构指定</span><br><span class="line">alter table 表名 modify 字段 类型 not null;</span><br><span class="line">create table t_user7(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">address varchar(20)</span><br><span class="line">);</span><br><span class="line">alter table t_user7 modify name varchar(20) not null;</span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t_user7 modify name varchar(20);</span><br></pre></td></tr></table></figure><h2 id="唯一约束">唯一约束</h2><p>一个表可以有多个唯一约束，可以包含NULL值</p><blockquote><p>添加</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 方式一：创建表时指定</span><br><span class="line">&lt;字段名&gt; &lt;数据类型&gt; unique</span><br><span class="line">create table t_user8(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">phone_number varchar(20) unique</span><br><span class="line">);</span><br><span class="line">insert into t_user8 values(1001,&#x27;张三&#x27;,138);</span><br><span class="line">-- phone_number不能重复</span><br><span class="line">-- insert into t_user8 values(1001,&#x27;张三&#x27;,138);</span><br><span class="line">-- 在mysql中NULL和任何值都不相同，甚至和自己都不相同</span><br><span class="line">insert into t_user8 values(1002,&#x27;张1&#x27;,NULL);</span><br><span class="line">insert into t_user8 values(1003,&#x27;张2&#x27;,NULL);</span><br><span class="line"></span><br><span class="line">-- 方式二：创建表之后通过修改表结构指定</span><br><span class="line">alter table 表名 add constraint 约束名 unique(列);</span><br><span class="line">create table t_user9(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">phone_number varchar(20)</span><br><span class="line">);</span><br><span class="line">alter table t_user9 add constraint unique_pn unique(phone_number);</span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alter table &lt;表名&gt; drop index &lt;唯一约束名&gt;;</span><br><span class="line"></span><br><span class="line">-- 使用第二种创建的约束删除</span><br><span class="line">alter table t_user9 drop index unique_pn;</span><br><span class="line">-- 使用第一种创建的约束删除，约束名为约束那一列的列名</span><br><span class="line">alter table t_user8 drop index phone_number;</span><br></pre></td></tr></table></figure><h2 id="默认约束">默认约束</h2><p>默认值约束用来指定某列的默认值</p><blockquote><p>创建</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 方式一：创建表时指定</span><br><span class="line">&lt;字段名&gt; &lt;数据类型&gt; default &lt;默认值&gt;;</span><br><span class="line">create table t_user10(</span><br><span class="line">id INT,</span><br><span class="line">name varchar(20),</span><br><span class="line">address varchar(20) default &#x27;北京&#x27;</span><br><span class="line">);</span><br><span class="line">-- address没给定值，默认为北京</span><br><span class="line">insert into t_user10(id,name) values(1001,&#x27;李四&#x27;);</span><br><span class="line"></span><br><span class="line">-- 方式二：创建表之后通过修改表结构指定</span><br><span class="line">alter table 表名 modify 列名 类型 default 默认值;</span><br><span class="line">create table t_user11(</span><br><span class="line">id INT,</span><br><span class="line">name varchar(20),</span><br><span class="line">address varchar(20)</span><br><span class="line">);</span><br><span class="line">alter table t_user11 modify address varchar(20) default &#x27;深圳&#x27;;</span><br><span class="line">insert into t_user11(id,name) values(1001,&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table &lt;表名&gt; modify column &lt;字段名&gt; &lt;类型&gt; default null;</span><br><span class="line"></span><br><span class="line">alter table t_user11 modify address varchar(20) default null;</span><br></pre></td></tr></table></figure><h2 id="零填充约束">零填充约束</h2><p>插入数据时，当该字段的值的长度小于定义的长度时，会在该值的前面补上相应的0</p><blockquote><p>创建</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t_user12(</span><br><span class="line">id int zerofill,</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line">insert into t_user12 values(20,&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure><blockquote><p>删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table t_user12 modify id int;</span><br></pre></td></tr></table></figure><h1>基本查询</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">  [all | distinct]</span><br><span class="line">  &lt;目标列的表达式1&gt; [别名],</span><br><span class="line">  &lt;目标列的表达式2&gt; [别名]...</span><br><span class="line">from &lt;表名或视图名&gt; [别名],&lt;表名或视图名&gt; [别名]...</span><br><span class="line">[where&lt;条件表达式&gt;]</span><br><span class="line">[group by &lt;列名&gt; </span><br><span class="line">[having &lt;条件表达式&gt;]]</span><br><span class="line">[order by &lt;列名&gt; [asc|desc]]</span><br><span class="line">[limit &lt;数字或者列表&gt;];</span><br><span class="line"></span><br><span class="line">-- 简化版</span><br><span class="line">select *|列名 from 表 where 条件</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有商品</span><br><span class="line">select pid,pname,price,category_id from product;</span><br><span class="line">-- *：代表所有列</span><br><span class="line">select * from product;</span><br><span class="line"></span><br><span class="line">-- 查询商品名和商品价格</span><br><span class="line">select 列名1,列名2 from product;</span><br><span class="line">select pname,price from product;</span><br><span class="line"></span><br><span class="line">-- 别名查询.使用的关键字是as（as可以省略的）</span><br><span class="line">select * from product 别名;</span><br><span class="line">-- 别名在多表查询有作用，表别名</span><br><span class="line">select * from product as p;</span><br><span class="line">select * from product p;</span><br><span class="line"></span><br><span class="line">-- 列别名</span><br><span class="line">select pname as 别名,price 别名 from product;</span><br><span class="line">select pname as &#x27;商品名&#x27;,price &#x27;商品价格&#x27; from product;</span><br><span class="line"></span><br><span class="line">-- 去掉重复值</span><br><span class="line">select distinct 列名 from product;</span><br><span class="line">select distinct price from product;</span><br><span class="line">select distinct * from product;</span><br><span class="line"></span><br><span class="line">-- 查询结果是表达式（运算查询）：将所有商品的价格+10元进行显示</span><br><span class="line">select pname, price+10 别名 from product;</span><br><span class="line">select pname, price+10 new_price from product;</span><br></pre></td></tr></table></figure><h2 id="运算符">运算符</h2><table><thead><tr><th style="text-align:center">算术运算符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><strong>+</strong></td><td style="text-align:center">加法运算</td></tr><tr><td style="text-align:center"><strong>-</strong></td><td style="text-align:center">减法运算</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘法运算</td></tr><tr><td style="text-align:center"><strong>/</strong> 或 <strong>DIV</strong></td><td style="text-align:center">除法运算，返回商</td></tr><tr><td style="text-align:center"><strong>%</strong> 或 <strong>MOD</strong></td><td style="text-align:center">求余运算，返回余数</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 将每件商品的价格加10</span><br><span class="line">select pname,price +10 as new_price from product;</span><br><span class="line">-- 将所有商品的价格上调10%</span><br><span class="line">select pname,price *1.1 as new_price from product;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">比较运算符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><strong>=</strong></td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center"><strong>&lt;</strong>  <strong>和</strong>  <strong>&lt;=</strong></td><td style="text-align:center">小于和小于等于</td></tr><tr><td style="text-align:center"><strong>&gt;</strong>  <strong>和</strong>  <strong>&gt;=</strong></td><td style="text-align:center">大于和大于等于</td></tr><tr><td style="text-align:center"><strong>&lt;=&gt;</strong></td><td style="text-align:center">完全等于，两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td style="text-align:center"><strong>&lt;&gt;</strong> <strong>或!=</strong></td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center"><strong>IS NULL</strong> <strong>或</strong> <strong>ISNULL</strong></td><td style="text-align:center">判断一个值是否为  NULL</td></tr><tr><td style="text-align:center"><strong>IS NOT NULL</strong></td><td style="text-align:center">判断一个值是否不为  NULL</td></tr><tr><td style="text-align:center"><strong>least</strong></td><td style="text-align:center">当有两个或多个参数时，返回最小值</td></tr><tr><td style="text-align:center"><strong>greatest</strong></td><td style="text-align:center">当有两个或多个参数时，返回最大值</td></tr><tr><td style="text-align:center"><strong>between and</strong></td><td style="text-align:center">判断一个值是否落在两个值之间</td></tr><tr><td style="text-align:center"><strong>in</strong></td><td style="text-align:center">判断一个值是IN列表中的任意一个值</td></tr><tr><td style="text-align:center"><strong>NOT IN</strong></td><td style="text-align:center">判断一个值不是IN列表中的任意一个值</td></tr><tr><td style="text-align:center"><strong>like</strong></td><td style="text-align:center">通配符匹配</td></tr><tr><td style="text-align:center"><strong>regexp</strong></td><td style="text-align:center">正则表达式匹配</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><strong>逻辑运算符</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>NOT</strong> 或 <strong>!</strong></td><td style="text-align:center">逻辑非</td></tr><tr><td style="text-align:center"><strong>AND</strong> 或 <strong>&amp;&amp;</strong></td><td style="text-align:center">逻辑与</td></tr><tr><td style="text-align:center"><strong>OR</strong> 或 <strong>||</strong></td><td style="text-align:center">逻辑或</td></tr><tr><td style="text-align:center"><strong>XOR</strong></td><td style="text-align:center">逻辑异或</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><strong>位运算符</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>|</strong></td><td style="text-align:center">按位或</td></tr><tr><td style="text-align:center"><strong>&amp;</strong></td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center"><strong>^</strong></td><td style="text-align:center">按位异或</td></tr><tr><td style="text-align:center"><strong>&lt;&lt;</strong></td><td style="text-align:center">按位左移</td></tr><tr><td style="text-align:center"><strong>&gt;&gt;</strong></td><td style="text-align:center">按位右移</td></tr><tr><td style="text-align:center"><strong>~</strong></td><td style="text-align:center">按位取反，反转所有比特</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">-- 查询商品名称为“海尔洗衣机”的商品所有信息：</span><br><span class="line">select * from product where pname = &#x27;海尔洗衣机&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询价格为800商品</span><br><span class="line">select * from product where price = 800;</span><br><span class="line"></span><br><span class="line">-- 查询价格不是800的所有商品</span><br><span class="line">select * from product where price != 800;</span><br><span class="line">select * from product where price &lt;&gt; 800;</span><br><span class="line">select * from product where not (price = 800);</span><br><span class="line"></span><br><span class="line">-- 查询商品价格大于60元的所有商品信息</span><br><span class="line">select * from product where price &gt; 60;</span><br><span class="line"></span><br><span class="line">-- 查询商品价格在200到1000之间所有商品</span><br><span class="line">select * from product where price between 200 and 1000;</span><br><span class="line">select * from product where price &gt;= 200 and price &lt;= 1000;</span><br><span class="line">select * from product where price &gt;= 200 &amp;&amp; price &lt;= 1000;</span><br><span class="line"></span><br><span class="line">-- 查询商品价格是200或800的所有商品</span><br><span class="line">select * from product where price in (200,800);</span><br><span class="line">select * from product where price = 200 or price = 800;</span><br><span class="line">select * from product where price = 200 || price = 800;</span><br><span class="line"></span><br><span class="line">-- 查询含有‘裤&#x27;字的所有商品</span><br><span class="line">-- %：用来匹配任意字符</span><br><span class="line">select * from product where pname like &#x27;%裤&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询以&#x27;海&#x27;开头的所有商品</span><br><span class="line">select * from product where pname like &#x27;海%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询第二个字为&#x27;蔻&#x27;的所有商品</span><br><span class="line">-- _：匹配单个字符</span><br><span class="line">select * from product where pname like &#x27;_蔻%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询category_id为null的商品</span><br><span class="line">select * from product where category_id is null;</span><br><span class="line"></span><br><span class="line">-- 查询category_id不为null分类的商品</span><br><span class="line">select * from product where category_id is not null;</span><br><span class="line"></span><br><span class="line">-- 使用least求最小值</span><br><span class="line">select least(10,5,20) as small_number;</span><br><span class="line">-- 如果最小或最大值，有为null，则不会比较，结果直接为null</span><br><span class="line">select least(10,null,20) as small_number; -- null</span><br><span class="line"></span><br><span class="line">-- 使用greatest求最大值</span><br><span class="line">select greatest(10,5,20) as small_number;</span><br><span class="line">select least(10,null,20) as small_number; -- null</span><br></pre></td></tr></table></figure><h2 id="排序查询">排序查询</h2><blockquote><p>对读取的数据进行排序使用 <code>order by</code> 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果</p><p>asc代表升序，desc代表降序，如果不写默认升序</p><p>放在查询语句的最后面，LIMIT子句除外</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line"> 字段名1，字段名2，……</span><br><span class="line">from 表名</span><br><span class="line">order by 字段名1 [asc|desc]，字段名2[asc|desc]……</span><br><span class="line"></span><br><span class="line">-- 使用价格排序(降序)</span><br><span class="line">select * from product order by price desc;</span><br><span class="line"></span><br><span class="line">-- 在价格排序(降序)的基础上，以分类排序(降序)</span><br><span class="line">select * from product order by price desc, category_id desc;</span><br><span class="line"></span><br><span class="line">-- 显示商品的价格(去重复)，并排序(降序)</span><br><span class="line">select distinct price from product order by price desc;</span><br></pre></td></tr></table></figure><h2 id="聚合查询">聚合查询</h2><p>纵向查询，对一列的值进行计算，返回一个单一的值，会忽略空值</p><table><thead><tr><th style="text-align:center"><strong>聚合函数</strong></th><th style="text-align:center"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>count()</strong></td><td style="text-align:center">统计指定列不为NULL的记录行数</td></tr><tr><td style="text-align:center"><strong>sum()</strong></td><td style="text-align:center">计算指定列的数值和，如果指定列类型不是数值类型，计算结果为0</td></tr><tr><td style="text-align:center"><strong>max()</strong></td><td style="text-align:center">计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算</td></tr><tr><td style="text-align:center"><strong>min()</strong></td><td style="text-align:center">计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算</td></tr><tr><td style="text-align:center"><strong>avg()</strong></td><td style="text-align:center">计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 查询商品的总条数</span><br><span class="line">select count(pid) from product;</span><br><span class="line">select count(*) from product;</span><br><span class="line"></span><br><span class="line">-- 查询价格大于200商品的总条数</span><br><span class="line">select count(pid) from product where price &gt; 200;</span><br><span class="line"></span><br><span class="line">-- 查询分类为&#x27;c001&#x27;的所有商品的总和</span><br><span class="line">select sum(price) from product where category_id = &#x27;c001&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询商品的最大价格</span><br><span class="line">select max(price) fromproduct;</span><br><span class="line"></span><br><span class="line">-- 查询商品的最小价格</span><br><span class="line">select min(price) from product;</span><br><span class="line"></span><br><span class="line">select max(price) max_price,min(price) min_price from product;</span><br><span class="line"></span><br><span class="line">-- 查询分类为&#x27;c002&#x27;所有商品的平均价格</span><br><span class="line">select avg(price) from product where category_id = &#x27;c003&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>NULL值的处理</p></blockquote><p>count函数：参数为星号（*），则统计所有记录的个数，参数为某字段，不统计含null值的记录个数</p><p>sum和avg函数：忽略null值的存在</p><p>max和min函数：忽略null值的存在</p><h2 id="分组查询">分组查询</h2><p>使用<code>group by</code>字句对查询信息进行分组</p><blockquote><p>SELECT子句之后，只能出现分组的字段和统计函数，其他的字段不能出现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 按照分组字段进行分组，每个分组字段相同的变成一张临时表</span><br><span class="line">-- 再按照字段的规则进行查询</span><br><span class="line">select 字段1,字段2… from 表名 group by 分组字段1,... having 分组条件;</span><br><span class="line"></span><br><span class="line">--  统计各个分类商品的个数</span><br><span class="line">select category_id,count(pid) from product group by category_id;</span><br></pre></td></tr></table></figure><blockquote><p>分组之后条件筛选 - <code>having</code></p></blockquote><blockquote><p>[!CAUTION]</p><p><code>where</code>子句：筛选 FROM 子句中指定的操作所产生的行</p><p><code>group by</code>子句：分组 WHERE 子句的输出</p><p><code>having</code>子句：从分组的结果中筛选行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 统计各个分类商品的个数，且只显示个数大于4的信息</span><br><span class="line">select category_id,count(pid) from product group by category_id having count(pid) &gt; 4;</span><br></pre></td></tr></table></figure><h2 id="分页查询">分页查询</h2><p>由于数据量很大，显示屏长度有限，因此对数据需要采取分页显示方式</p><p>例如数据共有30条，每页显示5条，第一页显示1-5条，第二页显示6-10条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1-显示前n条</span><br><span class="line">select 字段1，字段2... from 表明 limit n</span><br><span class="line"></span><br><span class="line">-- 方式2-分页显示</span><br><span class="line">select 字段1，字段2... from 表明 limit m,n</span><br><span class="line"></span><br><span class="line">-- m: 整数，表示从第几条索引开始，计算方式 ：(当前页-1) * 每页显示条数</span><br><span class="line">-- n: 整数，表示查询多少条数据</span><br><span class="line"></span><br><span class="line">-- 查询product表的前5条记录</span><br><span class="line">select * from product limit 5;</span><br><span class="line"></span><br><span class="line">-- 从第4条开始显示，显示5条 </span><br><span class="line">select * from product limit 3,5;</span><br></pre></td></tr></table></figure><h2 id="导入表格">导入表格</h2><p>将一张表的数据导入到另一张表中，<code>目标表必须存在</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 将查询出来的表插入前面的表，两个表列需要一致</span><br><span class="line">insert into Table2(field1,field2,…) select value1,value2,… from Table1</span><br><span class="line">-- 全部导入</span><br><span class="line">insert into Table2 select * from Table1</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">create table test(</span><br><span class="line">pname varchar(20),</span><br><span class="line">price double</span><br><span class="line">);</span><br><span class="line">-- 导入test表格</span><br><span class="line">insert into test(pname,price) select pname,price from product;</span><br><span class="line"></span><br><span class="line">create table test1(</span><br><span class="line">category_id varchar(20),</span><br><span class="line">product_count int</span><br><span class="line">);</span><br><span class="line">insert into test1 select category_id, count(*) from product group by category_id;</span><br></pre></td></tr></table></figure><h2 id="正则表达式">正则表达式</h2><p>本身就是一个字符串，用来检索、替换哪些符合某个规则的文本</p><p>通过<code>REGEXP</code>关键字支持正则表达式进行字符串匹配</p><table><thead><tr><th style="text-align:center"><strong>模式</strong></th><th style="text-align:center"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>^</strong></td><td style="text-align:center">匹配输入字符串的开始位置</td></tr><tr><td style="text-align:center"><strong>$</strong></td><td style="text-align:center">匹配输入字符串的结束位置</td></tr><tr><td style="text-align:center"><strong>.</strong></td><td style="text-align:center">匹配除 “\n” 之外的任何单个字符</td></tr><tr><td style="text-align:center"><strong>[…]</strong></td><td style="text-align:center">字符集合。匹配所包含的任意一个字符。例如：’[abc]’ 可以匹配 “plain” 中的 ‘a’</td></tr><tr><td style="text-align:center"><strong>[^…]</strong></td><td style="text-align:center">负值字符集合。匹配未包含的任意字符。例如：’[^abc]’ 可以匹配  “plain” 中的’p’</td></tr><tr><td style="text-align:center"><strong>p1|p2|p3</strong></td><td style="text-align:center">匹配 p1 或 p2  或 p3。例如：‘z|food’能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”</td></tr><tr><td style="text-align:center">*****</td><td style="text-align:center">匹配前面的子表达式零次或多次。例如：zo* 能匹配 “z” 以及 “zoo” *等价于{0,}</td></tr><tr><td style="text-align:center"><strong>+</strong></td><td style="text-align:center">匹配前面的子表达式一次或多次。例如：‘zo+’ 能匹配  “zo” 以及  “zoo”，但不能匹配  “z”。+ 等价于  {1,}</td></tr><tr><td style="text-align:center"><strong>{n}</strong></td><td style="text-align:center">n 是一个非负整数。匹配确定的 n 次。例如：‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o</td></tr><tr><td style="text-align:center"><strong>{n,m}</strong></td><td style="text-align:center">m 和 n 均为非负整数，其中n  &lt;= m。最少匹配 n 次且最多匹配 m 次</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">-- ^ 在字符串开头处进行匹配</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;^a&#x27;;  -- 1</span><br><span class="line">select * from product where pname regexp &#x27;^海&#x27;;</span><br><span class="line"></span><br><span class="line">-- $ 在字符串末尾开始匹配</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;a$&#x27;;-- 0</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;c$&#x27;;-- 1</span><br><span class="line">select * from product where pname regexp &#x27;水$&#x27;;</span><br><span class="line"></span><br><span class="line">-- . 匹配任意字符(除了换行符)</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;.b&#x27;;-- 1</span><br><span class="line"></span><br><span class="line">-- [...] 括号内任意单个字符是否有与之匹配的</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;[xyz]&#x27;;-- 0</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;[xaz]&#x27;;-- 1</span><br><span class="line"></span><br><span class="line">-- [^...] 没有出现在括号内任意的字符</span><br><span class="line">-- 注意^符合只有在[]内才是取反的意思，在别的地方都是表示开始处匹配</span><br><span class="line">select &#x27;a&#x27; regexp &#x27;[^abc]&#x27;;-- 0</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;[^axz]&#x27;;-- 1</span><br><span class="line"></span><br><span class="line">-- a* 匹配0个或多个a,包括空字符串。 可以作为占位符使用.有没有指定字符都可以匹配到数据</span><br><span class="line">select &#x27;stab&#x27; regexp &#x27;.ta*b&#x27;; -- 1</span><br><span class="line">select &#x27;&#x27; regexp &#x27;a*&#x27;;</span><br><span class="line"></span><br><span class="line">-- a+ 匹配1个或者多个a,但是不包括空字符</span><br><span class="line">select &#x27;stab&#x27; regexp &#x27;.ta+b&#x27;;-- 1</span><br><span class="line">select &#x27;stb&#x27; regexp &#x27;.ta+b&#x27;;-- 0</span><br><span class="line"></span><br><span class="line">-- a? 匹配0个或者1个a</span><br><span class="line">select &#x27;stb&#x27; regexp &#x27;ta?b&#x27;;-- 1</span><br><span class="line">select &#x27;staab&#x27; regexp &#x27;ta?b&#x27;; -- 0</span><br><span class="line"></span><br><span class="line">-- a1|a2 匹配a1或者a2</span><br><span class="line">select &#x27;a&#x27; regexp &#x27;a|b&#x27;;-- 1</span><br><span class="line">select &#x27;c&#x27; regexp &#x27;a|b&#x27;;-- 0</span><br><span class="line">select &#x27;a&#x27; regexp &#x27;^(a|b)&#x27;;-- 1,以a或b开头的</span><br><span class="line"></span><br><span class="line">-- a&#123;m&#125; 匹配m个a(小于等于m个)</span><br><span class="line">select &#x27;abc&#x27; regexp &#x27;a&#123;1&#125;b&#x27;;-- 1</span><br><span class="line">select &#x27;aaad&#x27; regexp &#x27;a&#123;6&#125;d&#x27;; -- 0</span><br><span class="line"></span><br><span class="line">-- a&#123;m,&#125; 匹配m个或更多个u</span><br><span class="line">select &#x27;auuuuuc&#x27; regexp &#x27;au&#123;3,&#125;c&#x27;;-- 1</span><br><span class="line">select &#x27;auuc&#x27; regexp &#x27;au&#123;3,&#125;c&#x27;;-- 0</span><br><span class="line"></span><br><span class="line">-- a&#123;m,n&#125; 匹配m到n个a,包含m和n</span><br><span class="line">select &#x27;auuuuc&#x27; regexp &#x27;au&#123;2,3&#125;c&#x27;;-- 0</span><br><span class="line">select &#x27;auuuc&#x27; regexp &#x27;au&#123;2,3&#125;c&#x27;;-- 1</span><br><span class="line"></span><br><span class="line">-- (abc) abc作为一个序列匹配，不用括号括起来都是用单个字符去匹配，如果要把多个字符作为一个整体去匹配就需要用到括号，所以括号适合上面的所有情况</span><br><span class="line">select &#x27;xababy&#x27; regexp &#x27;x(abab)y&#x27;;-- 1</span><br><span class="line">select &#x27;xababy&#x27; regexp &#x27;x(ab)*y&#x27;;-- 1</span><br><span class="line">select &#x27;xababy&#x27; regexp &#x27;x(ab)&#123;1,2&#125;y&#x27;;-- 1</span><br></pre></td></tr></table></figure><h1>多表操作</h1><h2 id="多表关系">多表关系</h2><blockquote><p>一对多/多对一关系</p></blockquote><p>部门和员工</p><p>分析：一个部门有多个员工，一个员工只能对应一个部门</p><p>实现原则：在多的一方建立外键，指向一的一方的主键</p><blockquote><p>多对多关系</p></blockquote><p>学生和课程</p><p>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</p><p>原则：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，将多对多的关系，拆成一对多的关系，中间表至少要有两个外键，这两个外键分别指向原来的那两张表的主键</p><h2 id="外键约束">外键约束</h2><p>经常与主键约束一起使用，对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表（父表）外键所在的表就是从表（子表）</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/31/9Vva7n5CiwJuc63.jpg" alt="示例" style="zoom: 20%;"></th></tr></thead><tbody></tbody></table><ul><li>外键中列的数据类型必须和主表主键中对应列的数据类型相同</li><li>必须给主表定义主键</li><li>主表必须已经存在于数据库中，或者是当前正在创建的表</li></ul><h3 id="添加外键约束">添加外键约束</h3><p>通过 <code>foreign key</code> 关键字来指定外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表时设置外键约束</span><br><span class="line">[constraint 外键名] foreign key (字段名) [，字段名2，…] references 主表名 主键列1 [，主键列2，…]</span><br><span class="line"></span><br><span class="line">-- 创建表后设置外键约束</span><br><span class="line">alter table 数据表名 add constraint 外键名 foreign key(列名) references 主表名 (&lt;列名&gt;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 创建部门表</span><br><span class="line">create table if not exists dept(</span><br><span class="line">deptno varchar(20) primary key, -- 部门号 主键列</span><br><span class="line">name varchar(20) -- 部门名字</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 在创建表时设置外键约束</span><br><span class="line">-- 员工表</span><br><span class="line">create table if not exists emp(</span><br><span class="line">eid varchar(20) primary key,-- 员工编号</span><br><span class="line">ename varchar(20),-- 员工名字</span><br><span class="line">age int,-- 员工年龄</span><br><span class="line">dept_id varchar(20),-- 员工所属部门</span><br><span class="line">constraint emp_fk foreign key (dept_id) references dept(deptno) -- 外键约束</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 员工表</span><br><span class="line">create table if not exists emp1(</span><br><span class="line">eid varchar(20) primary key,-- 员工编号</span><br><span class="line">ename varchar(20),-- 员工名字</span><br><span class="line">age int,-- 员工年龄</span><br><span class="line">dept_id varchar(20)-- 员工所属部门</span><br><span class="line">);</span><br><span class="line">-- 创建表后设置外键约束</span><br><span class="line">alter table emp1 add constraint emp_fk1 foreign key(dept_id) references dept(deptno); </span><br></pre></td></tr></table></figure><h3 id="删除外键约束">删除外键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table &lt;表名&gt; drop foreign key &lt;外键约束名&gt;;</span><br><span class="line"></span><br><span class="line">alter table emp1 drop foreign key emp_fk1;</span><br></pre></td></tr></table></figure><h3 id="外键约束下的数据操作">外键约束下的数据操作</h3><blockquote><p>数据插入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> -- 添加主表数据</span><br><span class="line"> -- 注意必须先给主表添加数据</span><br><span class="line">insert into dept values(&#x27;1001&#x27;,&#x27;研发部&#x27;);</span><br><span class="line">insert into dept values(&#x27;1002&#x27;,&#x27;销售部&#x27;);</span><br><span class="line">insert into dept values(&#x27;1003&#x27;,&#x27;财务部&#x27;);</span><br><span class="line">insert into dept values(&#x27;1004&#x27;,&#x27;人事部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 添加从表数据</span><br><span class="line">-- 注意给从表添加数据时，外键列的值不能随便写，必须依赖主表的主键列</span><br><span class="line">insert into emp values(&#x27;1&#x27;,&#x27;乔峰&#x27;,20, &#x27;1001&#x27;);</span><br><span class="line">insert into emp values(&#x27;2&#x27;,&#x27;段誉&#x27;,21, &#x27;1001&#x27;);</span><br><span class="line">insert into emp values(&#x27;3&#x27;,&#x27;虚竹&#x27;,23, &#x27;1001&#x27;);</span><br><span class="line">insert into emp values(&#x27;4&#x27;,&#x27;阿紫&#x27;,18, &#x27;1002&#x27;);</span><br><span class="line">insert into emp values(&#x27;5&#x27;,&#x27;扫地僧&#x27;,35, &#x27;1002&#x27;);</span><br><span class="line">insert into emp values(&#x27;6&#x27;,&#x27;李秋水&#x27;,33, &#x27;1003&#x27;);</span><br><span class="line">insert into emp values(&#x27;7&#x27;,&#x27;鸠摩智&#x27;,50, &#x27;1003&#x27;); </span><br><span class="line">insert into emp values(&#x27;8&#x27;,&#x27;天山童姥&#x27;,60, &#x27;1005&#x27;); -- 不可以(外键需要添加主键有的)</span><br></pre></td></tr></table></figure><blockquote><p>删除数据</p></blockquote><p>主表的数据被从表依赖时，不能删除，否则可以删除</p><p>从表的数据可以随便删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 1001部门号被外键绑定，不能删除</span><br><span class="line">delete from dept where deptno = &#x27;1001&#x27;;</span><br><span class="line">-- 1004部门号没有被外键依赖，可以删除</span><br><span class="line">delete from dept where deptno = &#x27;1004&#x27;;</span><br><span class="line">-- 从表数据随便删</span><br><span class="line">delete from emp where eid = &#x27;7&#x27;;</span><br></pre></td></tr></table></figure><h3 id="多对多关系">多对多关系</h3><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/31/lTp3MceKgx6SjGb.jpg" alt="多对多表" style="zoom:20%;"></th></tr></thead><tbody></tbody></table><p>修改和删除时，中间从表可以随便删除和修改，但是两边的主表受从表依赖的数据不能删除或者修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 创建学生表student(左侧主表)</span><br><span class="line">create table if not exists student(</span><br><span class="line">sid int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">age int,</span><br><span class="line">gender varchar (20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建课程表course(右侧主表)</span><br><span class="line">create table course(</span><br><span class="line">cid int primary key auto_increment,</span><br><span class="line">cidname varchar(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建中间表student_course/score(从表)</span><br><span class="line">create table score(</span><br><span class="line">sid int,</span><br><span class="line">cid int,</span><br><span class="line">score double</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 建立外键约束(2次)</span><br><span class="line">alter table score add foreign key(sid) references student(sid);</span><br><span class="line">alter table score add foreign key(cid) references course(cid);</span><br><span class="line"></span><br><span class="line">-- 给学生表添加数据</span><br><span class="line">insert into student values(1,&#x27;小龙女&#x27;,18,&#x27;女&#x27;),</span><br><span class="line">(2,&#x27;阿紫&#x27;,19,&#x27;女&#x27;),</span><br><span class="line">(3,&#x27;周芷若&#x27;,20,&#x27;男&#x27;);</span><br><span class="line">-- 给课程表添加数据</span><br><span class="line">insert into course values(1,&#x27;语文&#x27;),(2,&#x27;数学&#x27;),(3,&#x27;英语&#x27;);</span><br><span class="line">-- 给中间表添加数据</span><br><span class="line">insert into score values(1,1,58),(1,3,50),(2,1,89),(2,2,64),(3,2,25),(3,3,82);</span><br></pre></td></tr></table></figure><h2 id="多表联合查询">多表联合查询</h2><h3 id="交叉连接查询-了解">交叉连接查询(了解)</h3><p>一张表的每一行去和另外一张表的任意一行进行匹配</p><p>假如A表有m行数据，B表有n行数据，则返回m*n行数据</p><p>笛卡尔积会产生很多冗余的数据，后期的其他查询可以在该集合的基础上进行条件筛选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from 表1,表2,表3….; </span><br><span class="line"></span><br><span class="line">select * from dept3,emp3;</span><br></pre></td></tr></table></figure><h3 id="内连接查询">内连接查询</h3><blockquote><p>[!NOTE]</p><p>查询求多张表的<code>交集</code>，关键字 <code>inner join</code> (inner可以省略)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 隐式内连接（SQL92标准）</span><br><span class="line">select * from A,B where 条件;</span><br><span class="line">-- 显示内连接（SQL99标准）</span><br><span class="line">select * from A inner join B on 条件;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- 查询每个部门的所属员工</span><br><span class="line">-- 隐式内连接</span><br><span class="line">select * from dept3,emp3 where dept3.deptno = emp3.dept_id;</span><br><span class="line">-- 显示内连接</span><br><span class="line">select * from dept3 join emp3 on dept3.deptno = emp3.dept_id;</span><br><span class="line"></span><br><span class="line">-- 查询研发部所属员工</span><br><span class="line">-- 隐式内连接</span><br><span class="line">select * from dept3 a,emp3 b where a.deptno = b.dept_id and a.name = &#x27;研发部&#x27;;</span><br><span class="line">-- 显示内连接</span><br><span class="line">select * from dept3 a join emp3 b on a.deptno = b.dept_id and a.name = &#x27;研发部&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询研发部和销售部的所属员工</span><br><span class="line">-- 隐式内连接</span><br><span class="line">select * from dept3 a,emp3 b where a.deptno = b.dept_id and (a.name = &#x27;研发部&#x27; or a.name = &#x27;销售部&#x27;);</span><br><span class="line">-- 显示内连接</span><br><span class="line">select * from dept3 a join emp3 b on a.deptno = b.dept_id and (a.name = &#x27;研发部&#x27; or a.name = &#x27;销售部&#x27;);</span><br><span class="line">select * from dept3 a join emp3 b on a.deptno = b.dept_id and a.name in (&#x27;研发部&#x27; or &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询每个部门的员工数,并升序排序</span><br><span class="line">select a.name,a.deptno,count(1) c</span><br><span class="line">from dept3 a</span><br><span class="line">join emp3 b on a.deptno = b.dept_id</span><br><span class="line">group by</span><br><span class="line">a.deptno,a.name</span><br><span class="line">order by </span><br><span class="line"> c desc;</span><br><span class="line"></span><br><span class="line">-- 查询人数大于等于3的部门，并按照人数降序排序</span><br><span class="line">select a.deptno,a.name,count(1) as total_cnt</span><br><span class="line">from dept3 a</span><br><span class="line">join emp3 b on a.deptno = b.dept_id</span><br><span class="line">group by a.deptno,a.name</span><br><span class="line">having total_cnt &gt;= 3</span><br><span class="line">order by total_cnt desc;</span><br></pre></td></tr></table></figure><h3 id="外连接查询">外连接查询</h3><blockquote><p>[!NOTE]</p><p>关键字 <code>outer join </code>(<code>outer</code>可以省略)</p><p>显示符合连接条件的信息，信息内容是左表还是右边或都显示，看是左连接还是右连接或满连接</p><p><code>union</code>操作符用于合并两个或多个<code>select</code>语句的结果集，但是每个<code>select</code>语句必须选择相同数量的列，列也必须具有相似的数据类型，<code>union</code>默认会去除重复的行，如果需要保留重复的行，可以使用<code>union all</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 左外连接：left outer join</span><br><span class="line">select * from A left outer join B on 条件;</span><br><span class="line">-- 右外连接：right outer join</span><br><span class="line">select * from A right outer join B on 条件;</span><br><span class="line">--  满外连接: full outer join</span><br><span class="line">-- oracle里面有full join,可是在mysql对full join支持的不好，使用union来达到目的</span><br><span class="line">select * from A full outer join B on 条件;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 左连接</span><br><span class="line">-- 查询哪些部门有员工，哪些部门没有员工</span><br><span class="line">select * from dept3 a left outer join emp3 b on a.deptno = b.dept_id;</span><br><span class="line">select * from dept3 a left join emp3 b on a.deptno = b.dept_id;</span><br><span class="line"></span><br><span class="line">select * from A </span><br><span class="line">left join B on 条件1</span><br><span class="line">left join C on 条件2</span><br><span class="line">left join D on 条件3;</span><br><span class="line"></span><br><span class="line">-- 右连接</span><br><span class="line">-- 查询哪些员工有对应的部门，哪些没有</span><br><span class="line">select * from dept3 a right outer join emp3 b on a.deptno = b.dept_id;</span><br><span class="line">select * from dept3 a right join emp3 b on a.deptno = b.dept_id;</span><br><span class="line"></span><br><span class="line">-- 满外连接</span><br><span class="line">-- 使用union关键字实现左外连接和右外连接的并集</span><br><span class="line">-- select * from dept3 a full join emp3 b on a.deptno = b.dept_id;-- 不能执行</span><br><span class="line">select * from dept3 a left join emp3 b on a.deptno = b.dept_id</span><br><span class="line">union</span><br><span class="line">select * from dept3 a right join emp3 b on a.deptno = b.dept_id;</span><br></pre></td></tr></table></figure><h3 id="基本子查询">基本子查询</h3><p><code>select</code>的嵌套</p><blockquote><p>[!IMPORTANT]</p><p>子查询返回的数据类型：</p><p>单行单列：返回的是一个具体列的内容，可以理解为一个单值数据</p><p>单行多列：返回一行数据中多个列的内容</p><p>多行单列：返回多行记录之中同一列的内容，相当于给出了一个操作范围</p><p>多行多列：查询返回的结果是一张临时表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄最大的员工信息，显示信息包含员工号、员工名字，员工年龄</span><br><span class="line">-- 1.查询最大年龄</span><br><span class="line">select max(age) from emp3;</span><br><span class="line">-- 2.每一个员工的年龄和最大年龄进行比较，相等则满足条件</span><br><span class="line">select * from emp3 where age = (select max(age) from emp3);-- 单行单列可以作为一个值来用</span><br><span class="line"></span><br><span class="line">-- 查询年研发部和销售部的员工信息，包含员工号、员工名字</span><br><span class="line">-- 内连接查询</span><br><span class="line">select * from emp3 a join dept b </span><br><span class="line">on a.dept_id = b.deptno </span><br><span class="line">and (b.name = &#x27;研发部&#x27; or b.name = &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 子查询</span><br><span class="line">-- 1.先查询研发部和销售部的部门号：deptno 1001 1002</span><br><span class="line">select dept.deptno from dept where dept.name = &#x27;研发部&#x27; or dept.name = &#x27;销售部&#x27;;</span><br><span class="line">-- 2.查询哪个员工的部门号是1001 或 1002</span><br><span class="line">select a.dept_id,a.ename from emp3  a where a.dept_id </span><br><span class="line">in (select dept.deptno from dept </span><br><span class="line">    where dept.name = &#x27;研发部&#x27; or dept.name = &#x27;销售部&#x27;);-- 多行单列，多个值</span><br><span class="line"></span><br><span class="line">-- 查询研发部20岁以下的员工信息,包括员工号、员工名字，部门名</span><br><span class="line">-- 关联查询</span><br><span class="line">select * from emp3 a join dept b on (b.name = &#x27;研发部&#x27; and a.age &lt; 20);</span><br><span class="line">-- 子查询</span><br><span class="line">-- 2.1在部门表中查询研发部信息</span><br><span class="line">select * from dept3 where name =&#x27;研发部&#x27;; -- 一行多列</span><br><span class="line">-- 2.2在员工表中查询年龄小于30岁的员工信息慕容博</span><br><span class="line">select * from emp3 where age &lt; 30;</span><br><span class="line">-- 2.3将以上两个查询的结果进行关联查询</span><br><span class="line">select * </span><br><span class="line">from (select * from dept3 where name =&#x27;研发部&#x27;) t1 </span><br><span class="line">join (select *from emp3 where age&lt; 30) t2 </span><br><span class="line">on t1.deptno = t2.dept_id;-- 多行多列</span><br></pre></td></tr></table></figure><h4 id="all关键字">all关键字</h4><blockquote><p>[!NOTE]</p><p>ALL: 与子查询返回的所有值比较为true 则返回true</p><p>ALL可以与=、&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;结合是来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的其中的所有数据</p><p>ALL表示指定列中的值必须要大于子查询集的每一个值，即必须要大于子查询集的最大值；如果是小于号即小于子查询集的最小值。同理可以推出其它的比较运算符的情况</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select …from …where c &gt; all(查询语句)</span><br><span class="line">-- 等价于：select ...from ... where c &gt; result1 and c &gt; result2 and c &gt; result3</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于‘1003’部门所有年龄的员工信息</span><br><span class="line">select * from emp3 where emp3.age &gt; all (select age from emp3 where emp3.dept_id = &#x27;1003&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询不属于任何一个部门的员工信息 </span><br><span class="line">select * from emp3 where emp3.dept_id &lt;&gt; all (select deptno from dept3);</span><br></pre></td></tr></table></figure><h4 id="any和some关键字">any和some关键字</h4><blockquote><p>[!NOTE]</p><p>ANY：与子查询返回的任意值比较为true 则返回true</p><p>ANY可以与=、&gt;、&gt;=、&lt;、&lt;=、&lt;&gt;结合是来使用，分别表示等于、大于、大于等于、小于、小于等于、不等于其中的其中的任何一个数据</p><p>表示制定列中的值要大于子查询中的任意一个值，即必须要大于子查询集中的最小值。同理可以推出其它的比较运算符的情况</p><p>SOME和ANY的作用一样，SOME可以理解为ANY的别名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select … from … where c &gt; any(查询语句)</span><br><span class="line">-- 等价于：select ...from ... where c &gt; result1 or c &gt; result2 or c &gt; result3</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于‘1003’部门任意一个员工年龄的员工信息</span><br><span class="line">select * from emp3 where age &gt; any (select age from emp3 </span><br><span class="line">where dept_id = &#x27;1003&#x27;)</span><br><span class="line">and dept_id != &#x27;1003&#x27;;</span><br></pre></td></tr></table></figure><h4 id="in关键字">in关键字</h4><blockquote><p>[!NOTE]</p><p>用于判断某个记录的值，是否在指定的集合中</p><p>在IN关键字前边加上not可以将条件反过来</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select …from …where c in(查询语句)</span><br><span class="line">-- 等价于：select ...from ... where c = result1 or c = result2 or c = result3</span><br><span class="line"></span><br><span class="line">-- 查询研发部和销售部的员工信息，包含员工号、员工名字</span><br><span class="line">select eid,ename from emp3 where dept_id </span><br><span class="line">in (select deptno from dept3 where name = &#x27;研发部&#x27; or name = &#x27;销售部&#x27;);</span><br></pre></td></tr></table></figure><h4 id="exists关键字">exists关键字</h4><blockquote><p>[!NOTE]</p><p>该子查询如果“有数据结果”(至少返回一行数据)，则该EXISTS() 的结果为“true”，外层查询执行</p><p>该子查询如果“没有数据结果”（没有任何数据返回），则该EXISTS()的结果为“false”，外层查询不执行</p><p>EXISTS后面的子查询不返回任何实际数据，只返回真或假，当返回真时 where条件成立</p><p>注意，EXISTS关键字，比IN关键字的运算效率高，因此，在实际开发中，特别是大数据量时，推荐使用EXISTS关键字</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select …from …where exists(查询语句)</span><br><span class="line"></span><br><span class="line">-- 查询公司是否有大于60岁的员工，有则输出</span><br><span class="line">select * from emp3 a where exists (select * from emp3 where a.age &gt; 60);</span><br><span class="line"></span><br><span class="line">-- 查询有所属部门的员工信息</span><br><span class="line">select * from emp3 a where exists (select * from dept3 b where a.dept_id = b.deptno);</span><br></pre></td></tr></table></figure><h3 id="自关联查询">自关联查询</h3><blockquote><p>[!NOTE]</p><p>有时在信息查询时需要进行对表自身进行关联查询，即一张表自己和自己关联，一张表当成多张表来用。注意自关联时表必须给表起别名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select 字段列表 from 表1 a , 表1 b where 条件;</span><br><span class="line">或者 </span><br><span class="line">select 字段列表 from 表1 a [left] join 表1 b on 条件;</span><br><span class="line"></span><br><span class="line">-- 1.查询每个三国人物及他的上级信息，如:  关羽  刘备 </span><br><span class="line">select a.ename,b.ename from t_sanguo a, t_sanguo b where a.manager_id = b.eid;</span><br><span class="line">select a.ename,b.ename from t_sanguo a join t_sanguo b on a.manager_id = b.eid;</span><br><span class="line"></span><br><span class="line">-- 查询所有任务及上级</span><br><span class="line">select a.ename,b.ename from t_sanguo a left join t_sanguo b on a.manager_id = b.eid;</span><br></pre></td></tr></table></figure><h1>函数</h1><h2 id="聚合函数">聚合函数</h2><p>group_concat()函数，数据的某一列合并成一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 将所有员工的名字合并成一行(默认;分隔)</span><br><span class="line">select group_concat(emp_name) from emp;</span><br><span class="line"></span><br><span class="line">-- 指定分隔符合并 </span><br><span class="line">select group_concat(emp_name separator &#x27;;&#x27;) from emp;</span><br><span class="line"></span><br><span class="line">-- 指定排序方式和分隔符</span><br><span class="line">select department,group_concat(emp_name separator &#x27;;&#x27;)</span><br><span class="line">from emp</span><br><span class="line">group by department;</span><br><span class="line"></span><br><span class="line">select department,group_concat(emp_name order by salary desc separator &#x27;;&#x27;)</span><br><span class="line">from emp</span><br><span class="line">group by department;</span><br></pre></td></tr></table></figure><h2 id="数学函数">数学函数</h2><table><thead><tr><th style="text-align:center"><strong>abs(x)</strong></th><th style="text-align:center">返回 x 的绝对值</th></tr></thead><tbody><tr><td style="text-align:center"><strong>ceil(x)</strong></td><td style="text-align:center">返回大于或等于 x 的最小整数</td></tr><tr><td style="text-align:center"><strong>floor(x)</strong></td><td style="text-align:center">返回小于或等于 x 的最大整数</td></tr><tr><td style="text-align:center"><strong>greatest(expr1, expr2, expr3, …)</strong></td><td style="text-align:center">返回列表中的最大值</td></tr><tr><td style="text-align:center"><strong>least(expr1, expr2, expr3, …)</strong></td><td style="text-align:center">返回列表中的最小值</td></tr><tr><td style="text-align:center"><strong>mod(x,y)</strong></td><td style="text-align:center">返回 x 除以 y 以后的余数</td></tr><tr><td style="text-align:center"><strong>pi()</strong></td><td style="text-align:center">返回圆周率(3.141593）</td></tr><tr><td style="text-align:center"><strong>pow(x,y)</strong></td><td style="text-align:center">返回 x 的 y 次方</td></tr><tr><td style="text-align:center"><strong>rand()</strong></td><td style="text-align:center">返回 0 到 1 的随机数</td></tr><tr><td style="text-align:center"><strong>round(x)</strong></td><td style="text-align:center">返回离 x 最近的整数（遵循四舍五入）</td></tr><tr><td style="text-align:center"><strong>round(x,y)</strong></td><td style="text-align:center">返回指定位数的小数（遵循四舍五入）</td></tr><tr><td style="text-align:center"><strong>truncate(x,y)</strong></td><td style="text-align:center">返回数值 x 保留到小数点后 y 位的值（与 ROUND 最大的区别不会四舍五入）</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 求绝对值</span><br><span class="line">select abs (-10);-- 10</span><br><span class="line"></span><br><span class="line">-- 向上取整</span><br><span class="line">select ceil(1.1);-- 2</span><br><span class="line">select ceil(1.0);-- 1</span><br><span class="line"></span><br><span class="line">-- 向下取整</span><br><span class="line">select floor(1.1);-- 1</span><br><span class="line">select floor(1.9);-- 1</span><br><span class="line"></span><br><span class="line">-- 取列表最大值</span><br><span class="line">select greatest(1,2,3);-- 3</span><br></pre></td></tr></table></figure><h2 id="字符串函数">字符串函数</h2><table><thead><tr><th style="text-align:center"><strong>char_length(s)</strong></th><th style="text-align:center">返回字符串 s 的字符数</th></tr></thead><tbody><tr><td style="text-align:center"><strong>character_length(s)</strong></td><td style="text-align:center">返回字符串 s 的字符数</td></tr><tr><td style="text-align:center"><strong>concat(s1,s2…sn)</strong></td><td style="text-align:center">字符串 s1,s2 等多个字符串合并为一个字符串</td></tr><tr><td style="text-align:center"><strong>concat_ws(x,s1,s2…sn)</strong></td><td style="text-align:center">同 concat 函数，但是每个字符串之间要加上 x，x 可以是分隔符</td></tr><tr><td style="text-align:center"><strong>field(s,s1,s2…)</strong></td><td style="text-align:center">返回第一个字符串 s 在字符串列表(s1,s2…)中的位置</td></tr><tr><td style="text-align:center"><strong>ltrim(s)</strong></td><td style="text-align:center">去掉字符串 s 开始处的空格</td></tr><tr><td style="text-align:center"><strong>position(s1 IN s)</strong></td><td style="text-align:center">从字符串 s 中获取 s1 的开始位置</td></tr><tr><td style="text-align:center"><strong>replace(s,s1,s2)</strong></td><td style="text-align:center">字符串 s2 替代字符串 s 中的字符串 s1</td></tr><tr><td style="text-align:center"><strong>reverse(s)</strong></td><td style="text-align:center">将字符串s的顺序反过来</td></tr><tr><td style="text-align:center"><strong>right(s,n)</strong></td><td style="text-align:center">返回字符串 s 的后 n 个字符</td></tr><tr><td style="text-align:center"><strong>rtrim(s)</strong></td><td style="text-align:center">去掉字符串 s 结尾处的空格</td></tr><tr><td style="text-align:center"><strong>strcmp(s1,s2)</strong></td><td style="text-align:center">比较字符串 s1 和 s2，若 s1 与 s2 相等返回 0，若 s1&gt;s2 返回 1，若 s1&lt;s2 返回 -1</td></tr><tr><td style="text-align:center"><strong>mid(s,n,len)</strong></td><td style="text-align:center">从字符串 s 的 n 位置截取长度为 len 的子字符串</td></tr><tr><td style="text-align:center"><strong>subste(s, start, length)</strong></td><td style="text-align:center">从字符串 s 的 start 位置截取长度为 length 的子字符串</td></tr><tr><td style="text-align:center"><strong>substring(s, start, length)</strong></td><td style="text-align:center">从字符串 s 的 start 位置截取长度为 length 的子字符串</td></tr><tr><td style="text-align:center"><strong>trim(s)</strong></td><td style="text-align:center">去掉字符串 s 开始和结尾处的空格</td></tr><tr><td style="text-align:center"><strong>ucase(s)</strong></td><td style="text-align:center">字符串转换为大写</td></tr><tr><td style="text-align:center"><strong>upper(s)</strong></td><td style="text-align:center">字符串转换为大写</td></tr><tr><td style="text-align:center"><strong>lcase(s)</strong></td><td style="text-align:center">将字符串 s 的所有字母变成小写字母</td></tr><tr><td style="text-align:center"><strong>lower(s)</strong></td><td style="text-align:center">将字符串 s 的所有字母变成小写字母</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">-- 获取字符串字符个数</span><br><span class="line">select char_length(&#x27;hello&#x27;);-- 5</span><br><span class="line">select char_length(&#x27;你好吗&#x27;);-- 3</span><br><span class="line"></span><br><span class="line">-- length取长度，返回单位是字节</span><br><span class="line">select length(&#x27;hello&#x27;);-- 5</span><br><span class="line">select length(&#x27;你好吗&#x27;); -- 9</span><br><span class="line"></span><br><span class="line">-- 指定分隔符进行字符串合并</span><br><span class="line">select concat_ws(&#x27;-&#x27;,&#x27;hello&#x27;,&#x27;world&#x27;);-- hello-world</span><br><span class="line"></span><br><span class="line">-- 返回字符串在列表中第一次出现的位置</span><br><span class="line">select field(&#x27;bbb&#x27;,&#x27;aaa&#x27;,&#x27;bbb&#x27;);-- 2</span><br><span class="line"></span><br><span class="line">-- 去除字符串左边空格</span><br><span class="line">select ltrim(&#x27;  aaa&#x27;);</span><br><span class="line"></span><br><span class="line">-- 去除字符串右边空格</span><br><span class="line">select rtrim(&#x27;aaa   &#x27;);</span><br><span class="line"></span><br><span class="line">-- 去除字符串两边空格</span><br><span class="line">select trim(&#x27;   aaa   &#x27;);</span><br><span class="line"></span><br><span class="line">-- 字符串截取</span><br><span class="line">select mid(&quot;helloworld&quot;,2,3);-- 第二个字符开始截取，截取长度为3</span><br><span class="line"></span><br><span class="line">-- 获取字符串A在字符串中出现的位置</span><br><span class="line">select position(&#x27;abc&#x27; in &#x27;helloabcworld&#x27;);-- 6</span><br><span class="line"></span><br><span class="line">-- 字符串替换</span><br><span class="line">select replace(&#x27;helloaaaworld&#x27;,&#x27;aaa&#x27;,&#x27;bbb&#x27;);</span><br><span class="line"></span><br><span class="line">-- 字符串翻转</span><br><span class="line">select reverse(&#x27;hello&#x27;);</span><br><span class="line"></span><br><span class="line">-- 返回字符串后几个字符</span><br><span class="line">select right(&#x27;hello&#x27;,2);-- lo</span><br><span class="line"></span><br><span class="line">-- 字符串比较</span><br><span class="line">select strcmp(&#x27;hello&#x27;,&#x27;world&#x27;);-- -1</span><br><span class="line"></span><br><span class="line">-- 字符串截取</span><br><span class="line">select substr(&#x27;hello&#x27;,2,3);</span><br><span class="line">select substring(&#x27;hello&#x27;,2,3);</span><br><span class="line"></span><br><span class="line">-- 小写转大写</span><br><span class="line">select ucase(&quot;helloworlD&quot;);</span><br><span class="line">select upper(&quot;helloworlD&quot;);</span><br><span class="line"></span><br><span class="line">-- 大写转小写</span><br><span class="line">select lcase(&quot;HEllowdord&quot;);</span><br><span class="line">select lower(&quot;HEllowdord&quot;);</span><br></pre></td></tr></table></figure><h2 id="日期函数">日期函数</h2><table><thead><tr><th style="text-align:center"><strong>uix_timestamp()</strong></th><th style="text-align:center">返回从 1970-01-01 00:00:00 到当前毫秒值</th></tr></thead><tbody><tr><td style="text-align:center"><strong>unix_timestamp(DATE_STRING)</strong></td><td style="text-align:center">将制定日期转为毫秒值时间戳</td></tr><tr><td style="text-align:center"><strong>from_unixtime(BIGINT UNIXTIME[,  STRING FORMAT])</strong></td><td style="text-align:center">将毫秒值时间戳转为指定格式日期</td></tr><tr><td style="text-align:center"><strong>curdate()</strong></td><td style="text-align:center">返回当前日期</td></tr><tr><td style="text-align:center"><strong>current_date()</strong></td><td style="text-align:center">返回当前日期</td></tr><tr><td style="text-align:center"><strong>current_time()</strong></td><td style="text-align:center">返回当前时间</td></tr><tr><td style="text-align:center"><strong>curtime()</strong></td><td style="text-align:center">返回当前时间</td></tr><tr><td style="text-align:center"><strong>current_timestamp()</strong></td><td style="text-align:center">返回当前日期和时间</td></tr><tr><td style="text-align:center"><strong>date()</strong></td><td style="text-align:center">从日期或日期时间表达式中提取日期值</td></tr><tr><td style="text-align:center"><strong>datediff(d1,d2)</strong></td><td style="text-align:center">计算日期 d1-&gt;d2 之间相隔的天数</td></tr><tr><td style="text-align:center"><strong>timediff(time1, time2)</strong></td><td style="text-align:center">计算时间差值</td></tr><tr><td style="text-align:center"><strong>date_format(d,f)</strong></td><td style="text-align:center">按表达式 f的要求显示日期 d</td></tr><tr><td style="text-align:center"><strong>str_to_date(string, format_mask)</strong></td><td style="text-align:center">将字符串转变为日期</td></tr><tr><td style="text-align:center"><strong>date_sub(date, interval expr type)</strong></td><td style="text-align:center">函数从日期减去指定的时间间隔，expr：数字</td></tr><tr><td style="text-align:center"><strong>adddate/date_add(d，interval expr type)</strong></td><td style="text-align:center">计算起始日期 d 加上一个时间段后的日期，expr：数字<br>type 值可以是：microsecond(微秒)、second(秒)、minute(分钟)、hour(小时)、day(天)、week(周)、month(月)、quarter(季)、year(年)、DAY_MINUTE day_minute(天和分钟)、day_hour(天和小时)、ear_month(年和月)</td></tr><tr><td style="text-align:center"><strong>extract(type from d)</strong></td><td style="text-align:center">从日期 d 中获取指定的值，type指定返回的值<br>type 可取值为：microsecond(微秒)、second(秒)、minute(分钟)、hour(小时)</td></tr><tr><td style="text-align:center"><strong>last_day(d)</strong></td><td style="text-align:center">返回给给定日期的那一月份的最后一天</td></tr><tr><td style="text-align:center"><strong>makedate(year, day-of-year)</strong></td><td style="text-align:center">基于给定参数年份 year 和所在年中的天数序号 day-of-year 返回一个日期</td></tr><tr><td style="text-align:center"><strong>year(d)</strong></td><td style="text-align:center">返回年份</td></tr><tr><td style="text-align:center"><strong>MONTH(d)</strong></td><td style="text-align:center">返回日期d中的月份值，1 到 12</td></tr><tr><td style="text-align:center"><strong>day(d)</strong></td><td style="text-align:center">返回日期值 d 的日期部分</td></tr><tr><td style="text-align:center"><strong>hour(t)</strong></td><td style="text-align:center">返回 t 中的小时值</td></tr><tr><td style="text-align:center"><strong>minute(t)</strong></td><td style="text-align:center">返回 t 中的分钟值</td></tr><tr><td style="text-align:center"><strong>second(t)</strong></td><td style="text-align:center">返回 t 中的秒钟值</td></tr><tr><td style="text-align:center"><strong>quarter(d)</strong></td><td style="text-align:center">返回日期d是第几季节，返回 1 到 4</td></tr><tr><td style="text-align:center"><strong>monthname(d)</strong></td><td style="text-align:center">返回日期当中的月份名称，如 November</td></tr><tr><td style="text-align:center"><strong>month(d)</strong></td><td style="text-align:center">返回日期d中的月份值，1 到 12</td></tr><tr><td style="text-align:center"><strong>dayname(d)</strong></td><td style="text-align:center">返回日期 d 是星期几，如 Monday,Tuesday</td></tr><tr><td style="text-align:center"><strong>dayofmonth(d)</strong></td><td style="text-align:center">计算日期 d 是本月的第几天</td></tr><tr><td style="text-align:center"><strong>dayofweek(d)</strong></td><td style="text-align:center">日期 d 今天是星期几，1 星期日，2 星期一，以此类推</td></tr><tr><td style="text-align:center"><strong>dayofyear(d)</strong></td><td style="text-align:center">计算日期 d 是本年的第几天</td></tr><tr><td style="text-align:center"><strong>week(d)</strong></td><td style="text-align:center">计算日期 d 是本年的第几个星期，范围是 0 到 53</td></tr><tr><td style="text-align:center"><strong>weekday(d)</strong></td><td style="text-align:center">日期 d 是星期几，0 表示星期一，1 表示星期二</td></tr><tr><td style="text-align:center"><strong>weekofyear(d)</strong></td><td style="text-align:center">计算日期 d 是本年的第几个星期，范围是 0 到 53</td></tr><tr><td style="text-align:center"><strong>yearweek(date, mode)</strong></td><td style="text-align:center">返回年份及第几周（0到53）mode 中 0 表示周天，1表示周一，以此类推</td></tr><tr><td style="text-align:center"><strong>now()</strong></td><td style="text-align:center">返回当前日期和时间</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">-- 日期函数</span><br><span class="line">-- 1:获取时间戳 （毫秒值）</span><br><span class="line">select unix_timestamp();</span><br><span class="line"></span><br><span class="line">-- 2:将一个日期字符串转为毫秒值</span><br><span class="line">select unix_timestamp(&#x27;2021-12-21 08:08:08&#x27;);</span><br><span class="line"></span><br><span class="line">-- 3：将时间戳毫秒值转为指定格式的日期</span><br><span class="line">select from_unixtime(1640045288,&#x27;%Y-%m-%d %H:%i:%s&#x27;);</span><br><span class="line"></span><br><span class="line">-- 4：获取当前的年月日</span><br><span class="line">select curdate();</span><br><span class="line">select current_date();</span><br><span class="line"></span><br><span class="line">-- 5：获取当前的时分秒</span><br><span class="line">SELECT CURRENT_TIME();</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"></span><br><span class="line">-- 6：获取年月日和时分秒</span><br><span class="line">SELECT CURRENT_TIMESTAMP();</span><br><span class="line"></span><br><span class="line">-- 从日期字符串中获取年月日</span><br><span class="line">select date(&#x27;2022-12-12 12:34:56&#x27;);</span><br><span class="line"></span><br><span class="line">-- 8:获取日期之间的差值</span><br><span class="line">select datediff(&#x27;2021-12-23&#x27;,&#x27;2008-08-08&#x27;);</span><br><span class="line"></span><br><span class="line">-- 9：获取时间的差值（秒级）</span><br><span class="line">select timediff(&#x27;12:12:34&#x27;,&#x27;10:18:56&#x27;); -- 01:53:38</span><br><span class="line"></span><br><span class="line">-- 10:日期格式化</span><br><span class="line">select date_format(&#x27;2021-1-1 1:1:1&#x27;,&#x27;%Y-%m-%d %H:%i:%s&#x27;);</span><br><span class="line">select date_format(&#x27;2021-12-13 11:11:11&#x27;,&#x27;%Y-%m-%d %H:%i:%s&#x27;);</span><br><span class="line"></span><br><span class="line">-- 11:将字符串转为日期</span><br><span class="line">select str_to_date(&#x27;2021-12-13 11:11:11&#x27;,&#x27;%Y-%m-%d %H:%i:%s&#x27;);</span><br><span class="line"></span><br><span class="line">-- 12：将日期进行减法  日期向前跳转</span><br><span class="line">select date_sub(&#x27;2021-10-01&#x27;,interval 2 day);</span><br><span class="line">select date_sub(&#x27;2021-10-01&#x27;,interval 2 month);</span><br><span class="line"></span><br><span class="line">-- 13：将日期进行加法  日期向后跳转</span><br><span class="line">select date_add(&#x27;2021-10-01&#x27;,interval 2 day);</span><br><span class="line">select date_add(&#x27;2021-10-01&#x27;,interval 2 month);</span><br><span class="line"></span><br><span class="line">-- 14：从日期中获取小时</span><br><span class="line">select extract(hour from&#x27;2021-12-13 11:12:13&#x27;);</span><br><span class="line">select extract(year from &#x27;2021-12-13 11:12:13&#x27;);</span><br><span class="line"></span><br><span class="line">-- 15：获取给定日期所在月的最后一天</span><br><span class="line">select last_day(&#x27;2021-08-13&#x27;);</span><br><span class="line"></span><br><span class="line">-- 16：获取指定年份和天数的日期</span><br><span class="line">select makedate(&#x27;2021&#x27;,53);</span><br><span class="line"></span><br><span class="line">-- 17:根据日期获取年月日，时分秒</span><br><span class="line">select year(&#x27;2021-12-13 11:12:13&#x27;);</span><br><span class="line">select minute(&#x27;2021-12-13 11:12:13&#x27;);</span><br><span class="line">select quarter(&#x27;2021-12-13 11:12:13&#x27;);-- 获取季度</span><br><span class="line"></span><br><span class="line">-- 18:根据日期获取信息</span><br><span class="line">SELECT MONTHNAME(&#x27;2021-12-13 11:12:13&#x27;);-- 获取月份的英文</span><br><span class="line">SELECT DAYNAME(&#x27;2021-12-13 11:12:13&#x27;);-- 获取周几：Monday</span><br><span class="line">SELECT DAYOFMONTH(&#x27;2021-12-13 11:12:13&#x27;);-- 当月的第几天</span><br><span class="line">SELECT DAYOFWEEK(&#x27;2021-12-13 11:12:13&#x27;);-- 1:周日 2:周一</span><br><span class="line">SELECT DAYOFYEAR(&#x27;2021-12-13 11:12:13&#x27;);-- 获取一年的第几天</span><br></pre></td></tr></table></figure><h2 id="控制流函数">控制流函数</h2><blockquote><p><strong>if逻辑判断语句</strong></p></blockquote><table><thead><tr><th style="text-align:center"><strong>if(expr,v1,v2)</strong></th><th style="text-align:center">如果表达式 expr 成立，返回结果 v1 否则，返回结果 v2</th></tr></thead><tbody><tr><td style="text-align:center"><strong><a href="https://www.runoob.com/mysql/mysql-func-ifnull.html">ifnull(v1,v2)</a></strong></td><td style="text-align:center">如果 v1 的值不为 NULL，则返回 v1，否则返回 v2</td></tr><tr><td style="text-align:center"><strong>isnull(expression)</strong></td><td style="text-align:center">判断表达式是否为 NULL</td></tr><tr><td style="text-align:center"><strong>nullif(expr1, expr2)</strong></td><td style="text-align:center">比较两个字符串，如果字符串 expr1 与 expr2 相等 返回 NULL，否则返回 expr1</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 成绩大于85则优秀反之及格</span><br><span class="line">select *,if(score &gt;=85,&#x27;优秀&#x27;,&#x27;及格&#x27;) falg from score;</span><br><span class="line"></span><br><span class="line">-- comm为空则显示0</span><br><span class="line">select*,ifnull(comm,0)comm_flagfromemp</span><br><span class="line"></span><br><span class="line">selectisnull(5);-- 0</span><br><span class="line">selectisnull(NULL); -- 1</span><br><span class="line"></span><br><span class="line">select nullif(12,12);-- null</span><br><span class="line">select nullif(12,13);-- 12</span><br></pre></td></tr></table></figure><blockquote><p><strong>ucase when语句</strong></p></blockquote><table><thead><tr><th style="text-align:center"><strong>CASE expression</strong><br><strong>WHEN condition1 THEN  result1</strong><br><strong>WHEN condition2 THEN  result2</strong><br><strong>…</strong>   <br><strong>WHEN conditionN THEN resultN</strong><br>   <strong>ELSE result</strong><br><strong>END</strong></th><th style="text-align:center">CASE 表示函数开始，END 表示函数结束。如果 condition1 成立，则返回 result1，如果 condition2 成立，则返回 result2，当全部不成立则返回 result，而当有一个成立之后，后面的就不执行了</th></tr></thead><tbody></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">case 5</span><br><span class="line">when 1 then &#x27;1&#x27;</span><br><span class="line">when 2 then &#x27;2&#x27;</span><br><span class="line">when 5 then &#x27;3&#x27;</span><br><span class="line">else</span><br><span class="line">&#x27;4&#x27;</span><br><span class="line">end as info;</span><br><span class="line"></span><br><span class="line">-- 方式1</span><br><span class="line">select *  ,</span><br><span class="line">case </span><br><span class="line">    when payType=1 then &#x27;微信支付&#x27; </span><br><span class="line">    when payType=2 then &#x27;支付宝支付&#x27; </span><br><span class="line">    when payType=3 then &#x27;银行卡支付&#x27; </span><br><span class="line">    else &#x27;其他支付方式&#x27; </span><br><span class="line">end  as payTypeStr</span><br><span class="line">from orders;</span><br><span class="line"></span><br><span class="line">-- 方式2</span><br><span class="line">select *  ,</span><br><span class="line">case payType</span><br><span class="line">    when 1 then &#x27;微信支付&#x27;</span><br><span class="line">    when 2 then &#x27;支付宝支付&#x27;</span><br><span class="line">    when 3 then &#x27;银行卡支付&#x27;</span><br><span class="line">    else &#x27;其他支付方式&#x27; </span><br><span class="line">end  as payTypeStr</span><br><span class="line">from orders;</span><br></pre></td></tr></table></figure><h1>窗口函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window_function ( expr ) over ( </span><br><span class="line">    PARTITION BY ... </span><br><span class="line">    ORDER BY ... </span><br><span class="line">    frame_clause </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>分区（PARTITION BY）<ul><li>PARTITION BY 选项用于将数据行拆分成多个分区（组）它的作用类似于GROUP BY分组。如果省略了 PARTITION BY，所有的数据作为一个组进行计算</li></ul></li><li>排序（ORDER BY）<ul><li>OVER 子句中的 ORDER BY 选项用于指定<strong>分区内</strong>的排序方式，与 ORDER BY 子句的作用类似</li></ul></li><li>以及窗口大小（frame_clause）<ul><li>frame_clause 选项用于在<strong>当前分区</strong>内指定一个计算窗口，也就是一个与当前行相关的数据子集</li></ul></li></ul><h2 id="序号函数">序号函数</h2><p>序号函数有三个：row_number()、rank()、dense_rank()，可以用来实现分组排序，并添加序号</p><p>这三个功能相同但排序的序号方式不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">row_number() | rank() | dense_rank() over ( </span><br><span class="line">  partition by ... </span><br><span class="line">  order by ... </span><br><span class="line">) </span><br><span class="line"></span><br><span class="line">-- 对每个部门的员工按照薪资降序排序，并给出排名</span><br><span class="line">select</span><br><span class="line">    dname,</span><br><span class="line">    ename,</span><br><span class="line">    salary,</span><br><span class="line">    row_number() over(partition by dname order by salary desc) as rn1,</span><br><span class="line">    rank() over(partition by dname order by salary desc) as rn2,</span><br><span class="line">    dense_rank() over(partition by dname order by salary desc) as rn3</span><br><span class="line">from employee;</span><br><span class="line"></span><br><span class="line">--求出每个部门薪资排在前三名的员工- 分组求TOPN</span><br><span class="line">select </span><br><span class="line">* </span><br><span class="line">from </span><br><span class="line">(</span><br><span class="line">    select </span><br><span class="line">        dname,</span><br><span class="line">        ename,</span><br><span class="line">        salary,</span><br><span class="line">        dense_rank() over(partition by dname order by salary desc)  as rn</span><br><span class="line">    from employee</span><br><span class="line">)t</span><br><span class="line">where t.rn &lt;= 3</span><br><span class="line"></span><br><span class="line">-- 对所有员工进行全局排序（不分组）</span><br><span class="line">-- 不加partition by表示全局排序</span><br><span class="line">select </span><br><span class="line">     dname,</span><br><span class="line">     ename,</span><br><span class="line">     salary,</span><br><span class="line">     dense_rank() over( order by salary desc)  as rn</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="开窗聚合函数">开窗聚合函数</h2><blockquote><p>sum()、avg()、max()、min()、count()</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">dname,</span><br><span class="line">ename,</span><br><span class="line">salary,</span><br><span class="line">sum(salary) over(partition by dname order by hiredate) as pvl</span><br><span class="line">from employee;</span><br><span class="line"></span><br><span class="line">-- 如果没有order by排序语句默认把分组内的所有</span><br><span class="line">select dname,ename,hiredate,salary,</span><br><span class="line">sum(salary) over(partition by dname) as c1</span><br><span class="line">-- sum(salary) over(partition by dname order by hiredate rows between unbounded preceding and current row) as c1</span><br><span class="line">from employee;</span><br><span class="line"></span><br><span class="line">-- 向前三行及本身及向后一行数据相加</span><br><span class="line">select  </span><br><span class="line">    dname,</span><br><span class="line">    ename,</span><br><span class="line">    salary,</span><br><span class="line">    sum(salary) over(partition by dname order by hiredate   rows between 3 preceding and 1 following) as c1 </span><br><span class="line">from employee;</span><br><span class="line"></span><br><span class="line">-- 当前行(包括本身)加到最后一行</span><br><span class="line">select  </span><br><span class="line">    dname,</span><br><span class="line">    ename,</span><br><span class="line">    salary,</span><br><span class="line">    sum(salary) over(partition by dname order by hiredate   rows between current row and unbounded following) as c1 </span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="分布函数">分布函数</h2><blockquote><p>cume_dist：分组内小于、等于当前值的行数 / 分组内总行数</p><p>应用场景：查询小于等于当前薪资（salary）的比例</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">dname,ename,salary,</span><br><span class="line">cume_dist() over(order by salary)as rn1,</span><br><span class="line">cume_dist() over(partition by dname order by salary)as rn2</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><blockquote><p>percent_rank：(rank-1) / (rows-1)进行计算，rank为RANK()函数产生的(不常用)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select dname,ename,salary,</span><br><span class="line">rank() over(partition by dname order by salary desc) as rn,</span><br><span class="line">percent_rank() over(partition by dname order by salary desc)as rn2</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="前后函数">前后函数</h2><blockquote><p>cume_dist：返回位于当前行的 <code>前n行</code>(lag(expr,n)）或 <code>后n行</code>（lead(expr,n)）的expr的值</p><p>应用场景：查询前1名同学的成绩和当前同学成绩的差值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- lag的用法</span><br><span class="line">select </span><br><span class="line">    dname, ename, hiredate, salary,</span><br><span class="line">    lag(hiredate,1,&#x27;2000-01-01&#x27;) over(partition by dname order by hiredate) as last_1_time,</span><br><span class="line">    lag(hiredate,2) over(partition by dname order by hiredate) as last_2_time </span><br><span class="line">from employee;</span><br><span class="line"></span><br><span class="line">-- lead的用法</span><br><span class="line">select </span><br><span class="line">    dname, ename, hiredate, salary,</span><br><span class="line">    lead(hiredate,1,&#x27;2000-01-01&#x27;) over(partition by dname order by hiredate) as last_1_time,</span><br><span class="line">    lead(hiredate,2) over(partition by dname order by hiredate) as last_2_time </span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="头尾函数">头尾函数</h2><blockquote><p>返回第一个（first_value(expr)）或最后一个（last_value(expr)）expr的值</p><p>应用场景：截止到当前，按照日期排序查询第1个入职和最后1个入职员工的薪资</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 注意,  如果不指定ORDER BY，则进行排序混乱，会出现错误的结果</span><br><span class="line">select</span><br><span class="line">    dname, ename, hiredate, salary,</span><br><span class="line">    first_value(salary) over(partition by dname order by hiredate) as first,</span><br><span class="line">    last_value(salary) over(partition by dname order by  hiredate) as last </span><br><span class="line">from  employee;</span><br></pre></td></tr></table></figure><h2 id="其他函数">其他函数</h2><blockquote><p>nth_value(expr,n)</p><p>返回窗口中第n个expr的值。expr可以是表达式，也可以是列名</p><p>应用场景：截止到当前薪资，显示每个员工的薪资中排名第2或者第3的薪资</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询每个部门截止目前薪资排在第二和第三的员工信息</span><br><span class="line">select </span><br><span class="line">    dname, ename, hiredate, salary,</span><br><span class="line">    nth_value(salary,2) over(partition by dname order by hiredate) as second_score,</span><br><span class="line">    nth_value(salary,3) over(partition by dname order by hiredate) as third_score</span><br><span class="line">from employee</span><br></pre></td></tr></table></figure><blockquote><p>ntile(n)</p><p>将分区中的有序数据分为n个等级，记录等级数</p><p>应用场景：将每个部门员工按照入职日期分成3组</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 根据入职日期将每个部门的员工分成3组</span><br><span class="line">select </span><br><span class="line">    dname, ename, hiredate, salary,</span><br><span class="line">    ntile(3) over(partition by dname order by  hiredate  ) as rn </span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;关键字&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;tex</summary>
      
    
    
    
    <category term="MySQL" scheme="https://xinzaigeek.68565200.xyz/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://xinzaigeek.68565200.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>2.MySQL进阶</title>
    <link href="https://xinzaigeek.68565200.xyz/post/4e3021ff.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/4e3021ff.html</id>
    <published>2024-10-16T12:42:23.000Z</published>
    <updated>2024-12-18T02:30:17.283Z</updated>
    
    <content type="html"><![CDATA[<h1>视图</h1><p>一个虚拟表，非真实存在，其本质是根据SQL语句获取动态的数据集，并为其命名，用户使用时只需使用视图名称即可获取结果集，并可以将其当作表来使用</p><p>数据库中只存放了视图的定义，而并没有存放视图中的数据。这些数据存放在原来的表中，表中的数据发生改变，显示在视图中的数据也会发生改变</p><p>作用：</p><ul><li>把重复使用的查询封装成视图重复使用，同时可以使复杂的查询易于理解和使用</li><li>安全原因，如果一张表中有很多数据，很多信息不希望让所有人看到，此时可以使用视图视</li></ul><h2 id="创建视图">创建视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create [or replace] [algorithm = &#123;undefined | merge | temptable&#125;]</span><br><span class="line">view view_name [(column_list)]</span><br><span class="line">as select_statement</span><br><span class="line">[with [cascaded | local] check option]</span><br><span class="line"></span><br><span class="line">/*参数说明：</span><br><span class="line">algorithm：可选项，表示视图选择的算法</span><br><span class="line">view_name ：表示要创建的视图名称</span><br><span class="line">column_list：可选项，指定视图中各个属性的名词，默认情况下与SELECT语句中的查询的属性相同</span><br><span class="line">select_statement：表示一个完整的查询语句，将查询记录导入视图中</span><br><span class="line">[with [cascaded | local] check option]：可选项，表示更新视图时要保证在该视图的权限范围之内*/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">create or replace view view1_emp</span><br><span class="line">as</span><br><span class="line">select ename,job from emp;</span><br><span class="line"></span><br><span class="line">-- 查看表和视图</span><br><span class="line">show full tables;</span><br><span class="line"></span><br><span class="line">-- 使用视图</span><br><span class="line">select * from view1_emp;</span><br></pre></td></tr></table></figure><h2 id="修改视图">修改视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alter view 视图名 as select语句;</span><br><span class="line"></span><br><span class="line">alter view view1_emp</span><br><span class="line">as</span><br><span class="line">select a.deptno,a.dname,a.loc,b.ename,b.sal</span><br><span class="line">from dept a,emp b where a.deptno = b.deptno;</span><br></pre></td></tr></table></figure><h2 id="更新视图">更新视图</h2><p>在update(修改)、delete(删除) 或 insert(插入) 等语句中更新视图(实际修改是原表的数据)</p><p>视图中虽然可以更新数据，但是有很多的限制。一般情况下，最好将视图作为查询数据的虚拟表，而不要通过视图更新数据。因为，使用视图更新数据时，如果没有全面考虑在视图中更新数据的限制，就可能会造成数据更新失败</p><p>不可更新的情况：</p><ul><li>聚合函数（sum(), min(), max(), count()等）</li><li>distinct</li><li>group by</li><li>having</li><li>union或union all</li><li>位于选择列表中的子查询</li><li>join</li><li>FROM子句中的不可更新视图</li><li>where子句中的子查询，引用from子句中的表。</li><li>仅引用文字值（在该情况下，没有要更新的基本表）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update view1_emp set ename = &#x27;周瑜&#x27; where ename = &#x27;刘备&#x27;;</span><br><span class="line"></span><br><span class="line">-- 由于原表还有其它列，但视图没法看到添加只有两列其它列没添加，则添加不成功</span><br><span class="line">insert into view1_emp values(&#x27;孙权&#x27;,&#x27;文员&#x27;);</span><br></pre></td></tr></table></figure><h2 id="重命名视图">重命名视图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- rename table 视图名 to 新视图名; </span><br><span class="line">rename table view1_emp to my_view1</span><br></pre></td></tr></table></figure><h2 id="删除视图">删除视图</h2><p>删除视图时，只能删除视图的定义，不会删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- drop view 视图名[,视图名…];</span><br><span class="line">drop view if exists view_student;</span><br></pre></td></tr></table></figure><h1>存储过程</h1><p>SQL 语言层面的代码封装与重用，可以实现一些比较复杂的逻辑功能，类似于JAVA语言中的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter 自定义结束符号</span><br><span class="line">create procedure 储存名([ in ,out ,inout ] 参数名 数据类形...)</span><br><span class="line">begin</span><br><span class="line">  sql语句</span><br><span class="line">end 自定义的结束符合</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">-- 自定义结束符</span><br><span class="line">delimiter $$</span><br><span class="line">-- 创建</span><br><span class="line">create procedure proc01()</span><br><span class="line">begin</span><br><span class="line"> select empno,ename from emp;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">-- 调用</span><br><span class="line">call proc01;</span><br></pre></td></tr></table></figure><h2 id="变量定义">变量定义</h2><h3 id="局部变量">局部变量</h3><p>用户自定义，在 begin/end 块中有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 语法(声明变量)： </span><br><span class="line">declare 变量名 变量类型及范围 [default var_value]; </span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc02()</span><br><span class="line">begin</span><br><span class="line">declare var_name01 varchar(20) default &#x27;aaa&#x27;;-- 定义局部变量</span><br><span class="line">set var_name01 = &#x27;张三&#x27;;-- 给变量赋值</span><br><span class="line">select var_name01;-- 输出变量的值</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line">-- 调用存储过程</span><br><span class="line">call proc02();</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc02()</span><br><span class="line">begin</span><br><span class="line">-- 定义局部变量</span><br><span class="line">declare var_name01 decimal(7,2);-- 长度7，小数2</span><br><span class="line">set var_name01 = 12.2;-- 给变量赋值</span><br><span class="line">select var_name01;-- 输出变量的值</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc02();</span><br></pre></td></tr></table></figure><p>还可以使用 <strong>SELECT…INTO</strong> 语句为变量赋值</p><p>当将查询结果赋值给变量时，返回结果只能是单行单列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">select col_name [...] into var_name[,...] </span><br><span class="line">from table_name wehre condition </span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">col_name：查询字段名称</span><br><span class="line">var_name：变量名称</span><br><span class="line">table_name：表的名称</span><br><span class="line">condition：查询条件*/</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc03()</span><br><span class="line">begin</span><br><span class="line">declare my_ename varchar(20);</span><br><span class="line">-- 从emp表中查询empno为1001的ename赋值给变量my_ename</span><br><span class="line">select ename into my_ename from emp where empno=1001;</span><br><span class="line">-- 输出变量的值</span><br><span class="line">select my_ename;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line">-- 调用存储过程</span><br><span class="line">call proc03();</span><br></pre></td></tr></table></figure><h3 id="用户变量">用户变量</h3><p>用户自定义，当前会话(连接)有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 语法(不需要提前声明，使用即声明)： </span><br><span class="line">@var_name</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc04()</span><br><span class="line">begin</span><br><span class="line">set @var_name01 = &#x27;ZS&#x27;;</span><br><span class="line">select @var_name01;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line">call proc04();</span><br><span class="line"></span><br><span class="line">-- 外部也可以访问用户变量</span><br><span class="line">select @var_name01;</span><br></pre></td></tr></table></figure><h3 id="系统变量">系统变量</h3><p>对全局变量的修改会影响到整个服务器，但是对会话变量的修改，只会影响到当前的会话（也就是当前的数据库连接）</p><h4 id="全局变量">全局变量</h4><p>由服务器自动将它们初始化为默认值，可以通过更改 <code>my.ini</code> 这个文件来更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 语法：</span><br><span class="line">@@global.var_name</span><br><span class="line"></span><br><span class="line">-- 查看全局变量</span><br><span class="line">show global variables;</span><br><span class="line"></span><br><span class="line">-- 查看某全局变量</span><br><span class="line">select @@global.auto_increment_increment;</span><br><span class="line"></span><br><span class="line">-- 修改全局变量的值</span><br><span class="line">set global sort_buffer_size = 40000;</span><br><span class="line">set @@global.sort_buffer_size = 33000;</span><br></pre></td></tr></table></figure><h4 id="会话变量">会话变量</h4><p>每次建立一个新的连接的时候，MYSQL会将当前所有全局变量的值复制一份，来做为会话变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 语法：</span><br><span class="line">@@session.var_name</span><br><span class="line"></span><br><span class="line">-- 查看会话变量</span><br><span class="line">show session variables;</span><br><span class="line"></span><br><span class="line">-- 查看某会话变量 </span><br><span class="line">select @@session.auto_increment_increment;</span><br><span class="line"></span><br><span class="line">-- 修改会话变量的值</span><br><span class="line">set session sort_buffer_size = 50000; </span><br><span class="line">set @@session.sort_buffer_size = 50000 ;</span><br></pre></td></tr></table></figure><h2 id="参数传递">参数传递</h2><h3 id="in">in</h3><p>传入的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 传入员工编号，查找员工信息</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc06(in empno01 int)</span><br><span class="line">begin</span><br><span class="line">select * from emp where empno = empno01;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc06(1001);</span><br><span class="line"></span><br><span class="line">-- 封装有参数的存储过程，可以通过传入部门名和薪资，查询指定部门，并且薪资大于指定值的员工信息</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure dec_param0x(in dname varchar(50), in sal decimal(7,2))</span><br><span class="line">begin</span><br><span class="line">        select * from dept a, emp b where b.sal &gt; sal and a.dname = dname;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call dec_param0x(&#x27;学工部&#x27;,20000);</span><br></pre></td></tr></table></figure><h3 id="out">out</h3><p>从存储过程内部传值给调用者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure proc08(in in_empno int, out out_ename varchar(50))</span><br><span class="line">begin</span><br><span class="line">-- 查询emp表中empno与传进来的参数in_empno一致的ename并且赋值给out_ename返回</span><br><span class="line">select ename into out_ename from emp where empno = in_empno;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc08(1001,@o_ename);</span><br><span class="line">select @o_ename;</span><br><span class="line"></span><br><span class="line">-- 封装有参数的存储过程，传入员工编号，返回员工名字和薪资</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc09(in empno int , out out_ename varchar(50) , out out_sal decimal(7,2))</span><br><span class="line">begin</span><br><span class="line">  select ename,sal into out_ename,out_sal from emp where emp.empno = empno;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"> </span><br><span class="line">call proc09(1001, @o_dname,@o_sal);</span><br><span class="line">select @o_dname;</span><br><span class="line">select @o_sal;</span><br></pre></td></tr></table></figure><h3 id="inout">inout</h3><p>从外部传入的参数经过修改后返回的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure proc10(inout num int)</span><br><span class="line">begin</span><br><span class="line">set num = num * 10;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">set @inout_num = 3;</span><br><span class="line">call proc10(@inout_num);</span><br><span class="line">select @inout_num;</span><br><span class="line"></span><br><span class="line">-- 传入员工名，拼接部门号，传入薪资，求出年薪</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc10(inout inout_ename varchar(50), inout inout_sal int)</span><br><span class="line">begin</span><br><span class="line">  select  concat(deptno,&quot;_&quot;,inout_ename) into inout_ename from emp where ename = inout_ename;</span><br><span class="line">  set inout_sal = inout_sal * 12;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">set @inout_ename = &#x27;关羽&#x27;;</span><br><span class="line">set @inout_sal = 3000;</span><br><span class="line">call proc10(@inout_ename, @inout_sal) ;</span><br><span class="line">select @inout_ename ;</span><br><span class="line">select @inout_sal ;</span><br></pre></td></tr></table></figure><h2 id="流程控制">流程控制</h2><h3 id="分支语句">分支语句</h3><h4 id="if">if</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">-- 语法</span><br><span class="line">if search_condition_1 then statement_list_1</span><br><span class="line">    [elseif search_condition_2 then statement_list_2] ...</span><br><span class="line">    [else statement_list_n]</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">-- 输入学生的成绩，来判断成绩的级别：</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc_12_if(in score int)</span><br><span class="line">begin</span><br><span class="line">if score &lt; 60</span><br><span class="line">then</span><br><span class="line">select &#x27;不及格&#x27;;</span><br><span class="line">elseif score &lt; 80</span><br><span class="line">then</span><br><span class="line">select &#x27;及格&#x27;;</span><br><span class="line">elseif score &gt;= 80 and score &lt; 90</span><br><span class="line">then</span><br><span class="line">select &#x27;良好&#x27;;</span><br><span class="line">elseif score &gt;= 90 and socre &lt;= 100</span><br><span class="line">then</span><br><span class="line">select &#x27;优秀&#x27;;</span><br><span class="line">end if;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc_12_if(88);</span><br><span class="line"></span><br><span class="line">-- 输入员工的名字，判断工资的情况。</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc12_if(in in_ename varchar(50))</span><br><span class="line">begin</span><br><span class="line">    declare result varchar(20);</span><br><span class="line">    declare var_sal decimal(7,2);</span><br><span class="line">        select sal into  var_sal from emp where ename = in_ename;</span><br><span class="line">    if var_sal &lt; 10000 </span><br><span class="line">        then set result = &#x27;试用薪资&#x27;;</span><br><span class="line">    elseif var_sal &lt; 30000</span><br><span class="line">        then set result = &#x27;转正薪资&#x27;;</span><br><span class="line">    else </span><br><span class="line">        set result = &#x27;元老薪资&#x27;;</span><br><span class="line">    end if;</span><br><span class="line">    select result;</span><br><span class="line">end$$</span><br><span class="line">delimiter ;</span><br><span class="line">call proc12_if(&#x27;庞统&#x27;);</span><br></pre></td></tr></table></figure><h4 id="case">case</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 语法一（类比java的switch）：</span><br><span class="line">case case_value</span><br><span class="line">    when when_value then statement_list</span><br><span class="line">    [when when_value then statement_list] ...</span><br><span class="line">    [else statement_list]</span><br><span class="line">end case</span><br><span class="line"></span><br><span class="line">-- 语法二：</span><br><span class="line">case</span><br><span class="line">    when search_condition then statement_list</span><br><span class="line">    [when search_condition then statement_list] ...</span><br><span class="line">    [else statement_list]</span><br><span class="line">end case</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro14_case(in pay_type int)</span><br><span class="line">begin</span><br><span class="line">case pay_type</span><br><span class="line">when 1 then select &#x27;微信支付&#x27;;</span><br><span class="line">when 2 then select &#x27;支付宝支付&#x27;;</span><br><span class="line">when 3 then select &#x27;银行卡支付&#x27;;</span><br><span class="line">else select &#x27;其它支付&#x27;;</span><br><span class="line">end case;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call pro14_case(2);</span><br><span class="line"></span><br><span class="line">-- 语法二</span><br><span class="line">delimiter  $$</span><br><span class="line">create procedure proc_15_case(in score int)</span><br><span class="line">begin</span><br><span class="line">case</span><br><span class="line">when score &lt; 60 </span><br><span class="line">then</span><br><span class="line">select &#x27;不及格&#x27;;</span><br><span class="line">when  score &lt; 80</span><br><span class="line">then</span><br><span class="line">select &#x27;及格&#x27; ;</span><br><span class="line">when score &gt;= 80 and score &lt; 90</span><br><span class="line">then </span><br><span class="line">select &#x27;良好&#x27;;</span><br><span class="line">when score &gt;= 90 and score &lt;= 100</span><br><span class="line">then</span><br><span class="line">select &#x27;优秀&#x27;;</span><br><span class="line">else</span><br><span class="line">select &#x27;成绩错误&#x27;;</span><br><span class="line">end case;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc_15_case(88);</span><br></pre></td></tr></table></figure><h3 id="循环语句">循环语句</h3><p>leave：类似于 break，跳出，结束当前所在的循环</p><p>iterate：类似于 continue，继续，结束本次循环，继续下一次</p><h4 id="while">while</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">【标签:】while 循环条件 do</span><br><span class="line">    循环体;</span><br><span class="line">end while【标签】;</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc16_while(in insertCount int)</span><br><span class="line">begin</span><br><span class="line">declare i int default 1;</span><br><span class="line">while i &lt;= insertCount do</span><br><span class="line">insert into user(uid,username,password) values(i,concat(&#x27;user-&#x27;,i),&#x27;123456&#x27;);</span><br><span class="line">set i = i +1;</span><br><span class="line">end while;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc16_while(10);</span><br></pre></td></tr></table></figure><p>leave：跳出整个循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 只插入前五条数据</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc17_leave(in insertCount int)</span><br><span class="line">begin</span><br><span class="line">declare i int default 1;</span><br><span class="line">label:while i &lt;= insertCount do</span><br><span class="line">insert into user(uid,username,password) values(i,concat(&#x27;user-&#x27;,i),&#x27;123456&#x27;);</span><br><span class="line">if i = 5 then</span><br><span class="line">leave label;</span><br><span class="line">end if;</span><br><span class="line">set i = i +1;</span><br><span class="line">end while label;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc17_leave(10);</span><br></pre></td></tr></table></figure><p>iterate：跳出本次循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure proc18_iterate(in insertCount int)</span><br><span class="line">begin</span><br><span class="line">declare i int default 0;</span><br><span class="line">label:while i &lt; insertCount do</span><br><span class="line">set i = i +1;</span><br><span class="line">if i = 5 then</span><br><span class="line">iterate label;</span><br><span class="line">end if;</span><br><span class="line">insert into user(uid,username,password) values(i,concat(&#x27;user-&#x27;,i),&#x27;123456&#x27;);</span><br><span class="line">end while label;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc18_iterate(10);</span><br></pre></td></tr></table></figure><h4 id="repeat">repeat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 条件表达式为真时跳出循环</span><br><span class="line">[标签:]repeat </span><br><span class="line"> 循环体;</span><br><span class="line">until 条件表达式</span><br><span class="line">end repeat [标签];</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc18_repeat(in insertCount int)</span><br><span class="line">begin</span><br><span class="line">declare i int default 1;</span><br><span class="line">repeat</span><br><span class="line">insert into user(uid,username,password) values(i,concat(&#x27;user-&#x27;,i),&#x27;123456&#x27;);</span><br><span class="line">set i = i +1;</span><br><span class="line">until i &gt; insertCount</span><br><span class="line">end repeat;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc18_repeat(10);</span><br></pre></td></tr></table></figure><h4 id="loop">loop</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">标签: loop</span><br><span class="line">  循环体;</span><br><span class="line">  if 条件表达式 then </span><br><span class="line">     leave 标签; </span><br><span class="line">  end if;</span><br><span class="line">end loop;</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc19_loop(in insertCount int)</span><br><span class="line">begin</span><br><span class="line">declare i int default 1;</span><br><span class="line">label: loop</span><br><span class="line">insert into user(uid,username,`password`) values(i,concat(&#x27;user-&#x27;,i),&#x27;123456&#x27;);</span><br><span class="line">set i = i+1;</span><br><span class="line">if i &gt; insertCount</span><br><span class="line">then</span><br><span class="line">leave label;</span><br><span class="line">end if;</span><br><span class="line">end loop label;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc19_loop(20);</span><br></pre></td></tr></table></figure><h2 id="游标">游标</h2><p>用来存储查询结果集的数据类型, 在存储过程和函数中可以使用光标对结果集进行循环的处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 声明语法</span><br><span class="line">declare 游标名 cursor for 结果集;</span><br><span class="line"></span><br><span class="line">-- 打开语法</span><br><span class="line">open 游标名;</span><br><span class="line"></span><br><span class="line">-- 取值语法，需要定义变量来保存结果集每一列</span><br><span class="line">fetch 游标名 into 变量名 [, 变量名1] ...;</span><br><span class="line"></span><br><span class="line">-- 关闭语法</span><br><span class="line">close 游标名;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure proc19_cursor(in in_dname varchar(50))</span><br><span class="line">begin</span><br><span class="line">-- 定义局部变量</span><br><span class="line">declare var_empno int;</span><br><span class="line">declare var_ename varchar(50);</span><br><span class="line">declare var_sal decimal(7,2);</span><br><span class="line"></span><br><span class="line">-- 声明游标</span><br><span class="line">declare my_cursor cursor for</span><br><span class="line">select empno,ename,sal</span><br><span class="line">from dept a,emp b</span><br><span class="line">where a.deptno = b.deptno and a.dname = in_dname;</span><br><span class="line">-- 打开语法</span><br><span class="line">open my_cursor;</span><br><span class="line">-- 取值语法</span><br><span class="line">label: loop</span><br><span class="line">fetch my_cursor into var_empno, var_ename, var_sal;</span><br><span class="line">select var_empno, var_ename, var_sal;</span><br><span class="line">end loop label;-- 后续需要用句柄来结束循环</span><br><span class="line">-- 关闭语法</span><br><span class="line">close my_cursor;</span><br><span class="line">end $$;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call proc19_cursor(&#x27;销售部&#x27;);</span><br></pre></td></tr></table></figure><h2 id="异常处理">异常处理</h2><p>存储过程提供了对异常处理的功能：通过定义HANDLER来完成异常声明的实现</p><p>在语法中，变量声明、游标声明、handler声明是必须按照先后顺序书写的，否则创建存储过程出错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">declare handler_action handler</span><br><span class="line">    FOR condition_value [, condition_value] ...</span><br><span class="line">    statement</span><br><span class="line"></span><br><span class="line">/* handler_action：CONTINUE(继续向下执行)、 EXIT(退出程序)、UNDO</span><br><span class="line">condition_value：</span><br><span class="line">mysql_error_code(错误码)</span><br><span class="line">condition_name(错误条件的名称)</span><br><span class="line">SQLWARNING(警告条件)</span><br><span class="line">NOT FOUND(没有找到数据)</span><br><span class="line">SQLEXCEPTION(异常条件)</span><br><span class="line">statement：异常触发之后执行什么</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">use mysql7_procedure;</span><br><span class="line">drop procedure if exists proc21_cursor_handler;</span><br><span class="line">-- 需求：输入一个部门名，查询该部门员工的编号、名字、薪资 ，将查询的结果集添加游标</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure proc20_cursor(in in_dname varchar(50))</span><br><span class="line">begin</span><br><span class="line">  -- 定义局部变量</span><br><span class="line">    declare var_empno int;</span><br><span class="line">    declare var_ename varchar(50);</span><br><span class="line">    declare var_sal decimal(7,2);</span><br><span class="line"></span><br><span class="line">    declare flag int default 1; -- ---------------------</span><br><span class="line"></span><br><span class="line">    -- 声明游标</span><br><span class="line">    declare my_cursor cursor for</span><br><span class="line">        select empno,ename,sal</span><br><span class="line">        from dept a, emp b</span><br><span class="line">        where a.deptno = b.deptno and a.dname = in_dname;</span><br><span class="line"></span><br><span class="line">    -- 定义句柄，当数据未发现时将标记位设置为0</span><br><span class="line">    declare continue handler for not found set flag = 0;   </span><br><span class="line">    -- 打开游标</span><br><span class="line">    open my_cursor;</span><br><span class="line">    -- 通过游标获取值</span><br><span class="line">    label:loop</span><br><span class="line">        fetch my_cursor into var_empno, var_ename,var_sal;</span><br><span class="line">        -- 判断标志位</span><br><span class="line">        if flag = 1 then</span><br><span class="line">            select var_empno, var_ename,var_sal;</span><br><span class="line">        else</span><br><span class="line">            leave label;</span><br><span class="line">        end if;</span><br><span class="line">    end loop label;</span><br><span class="line"></span><br><span class="line">    -- 关闭游标</span><br><span class="line">    close my_cursor;</span><br><span class="line">end $$;</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">call proc21_cursor_handler(&#x27;销售部&#x27;);</span><br></pre></td></tr></table></figure><p>综合：每天一张表，存当天的统计数据，就要求提前生产这些表——每月月底创建下一个月每天的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">-- 使用数据库mysql7_procedure</span><br><span class="line">use mysql7_procedure;</span><br><span class="line"></span><br><span class="line">-- 如果存在同名的存储过程，则删除它</span><br><span class="line">drop procedure if exists proc22_demo;</span><br><span class="line"></span><br><span class="line">-- 更改默认的语句结束符，以便在存储过程中可以使用分号</span><br><span class="line">delimiter $$</span><br><span class="line"></span><br><span class="line">-- 创建存储过程proc22_demo</span><br><span class="line">create procedure proc22_demo()</span><br><span class="line">begin</span><br><span class="line">  -- 声明整型变量用于存储年份、月份和月份中的天数</span><br><span class="line">  declare next_year int;</span><br><span class="line">  declare next_month int;</span><br><span class="line">  declare next_month_day int;</span><br><span class="line">  </span><br><span class="line">  -- 声明字符型变量用于存储格式化的月份和天数</span><br><span class="line">  declare next_month_str char(2);</span><br><span class="line">  declare next_month_day_str char(2);</span><br><span class="line">  </span><br><span class="line">  -- 声明字符型变量用于存储表名</span><br><span class="line">  declare table_name_str char(10);</span><br><span class="line">  </span><br><span class="line">  -- 声明整型变量作为循环索引，并初始化为1</span><br><span class="line">  declare t_index int default 1;</span><br><span class="line"></span><br><span class="line">  -- 获取下个月的年份</span><br><span class="line">  set next_year = year(date_add(now(), INTERVAL 1 month));</span><br><span class="line"></span><br><span class="line">  -- 获取下个月是几月</span><br><span class="line">  set next_month = month(date_add(now(), INTERVAL 1 month));</span><br><span class="line"></span><br><span class="line">  -- 获取下个月最后一天是几号</span><br><span class="line">  set next_month_day = dayofmonth(LAST_DAY(date_add(now(), INTERVAL 1 month)));</span><br><span class="line"></span><br><span class="line">  -- 如果月份小于10，则在前面补零</span><br><span class="line">  if next_month &lt; 10 then</span><br><span class="line">    set next_month_str = concat(&#x27;0&#x27;, next_month);</span><br><span class="line">  else</span><br><span class="line">    set next_month_str = concat(&#x27;&#x27;, next_month);</span><br><span class="line">  end if;</span><br><span class="line"></span><br><span class="line">  -- 循环直到下个月的最后一天</span><br><span class="line">  while t_index &lt;= next_month_day do</span><br><span class="line">    -- 如果天数小于10，则在前面补零</span><br><span class="line">    if t_index &lt; 10 then</span><br><span class="line">      set next_month_day_str = concat(&#x27;0&#x27;, t_index);</span><br><span class="line">    else</span><br><span class="line">      set next_month_day_str = concat(&#x27;&#x27;, t_index);</span><br><span class="line">    end if;</span><br><span class="line"></span><br><span class="line">    -- 构建表名，格式为：user_YYYY_MM_DD</span><br><span class="line">    set table_name_str = concat(next_year, &#x27;_&#x27;, next_month_str, &#x27;_&#x27;, next_month_day_str);</span><br><span class="line"></span><br><span class="line">    -- 拼接创建表的SQL语句</span><br><span class="line">    set @create_table_sql = concat(</span><br><span class="line">      &#x27;create table user_&#x27;,</span><br><span class="line">      table_name_str,</span><br><span class="line">      &#x27;(`uid` INT, `ename` varchar(50), `information` varchar(50)) COLLATE=\&#x27;utf8_general_ci\&#x27; ENGINE=InnoDB&#x27;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    -- 准备并执行动态SQL语句</span><br><span class="line">    prepare create_table_stmt FROM @create_table_sql;</span><br><span class="line">    execute create_table_stmt;</span><br><span class="line">    -- 释放预编译语句</span><br><span class="line">    DEALLOCATE prepare create_table_stmt;</span><br><span class="line"></span><br><span class="line">    -- 更新循环索引</span><br><span class="line">    set t_index = t_index + 1;</span><br><span class="line">  end while;</span><br><span class="line">end $$</span><br><span class="line">-- 将语句结束符改回分号</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">-- 调用存储过程proc22_demo</span><br><span class="line">call proc22_demo();</span><br></pre></td></tr></table></figure><h1>存储函数(自定义函数)</h1><p>一般用于计算和返回一个值，可以将经常需要使用的计算或功能写成一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">create function func_name ([param_name type[,...]])</span><br><span class="line">returns type</span><br><span class="line">[characteristic ...] </span><br><span class="line">begin</span><br><span class="line">    routine_body</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">参数说明：</span><br><span class="line">    func_name ：存储函数的名称</span><br><span class="line">    param_name type：可选项，指定存储函数的参数</span><br><span class="line">    type参数用于指定存储函数的参数类型，该类型可以是MySQL数据库中所有支持的类型</span><br><span class="line">    RETURNS type：指定返回值的类型</span><br><span class="line">    characteristic：可选项，指定存储函数的特性</span><br><span class="line">    routine_body：SQL代码内容*/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 允许创建函数权限</span><br><span class="line">set global log_bin_trust_function_creators = true;</span><br><span class="line">-- 创建存储函数-没有输输入参数</span><br><span class="line">delimiter $$</span><br><span class="line">create function myfunc1_emp() returns int</span><br><span class="line">begin</span><br><span class="line">-- 定义局部变量</span><br><span class="line">declare cnt int default 0;</span><br><span class="line">select count(*) into cnt from emp;</span><br><span class="line">return cnt;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">-- 调用存储函数</span><br><span class="line">select myfunc1_emp();</span><br><span class="line"></span><br><span class="line">-- 创建存储过程-有输入参数</span><br><span class="line">-- 传入一个员工编号，返回员工名字</span><br><span class="line">delimiter $$</span><br><span class="line">create function myfun2_emp(in_empno int) returns varchar(50)</span><br><span class="line">begin</span><br><span class="line">declare out_ename varchar(50);</span><br><span class="line">select ename into out_ename from emp where empno = in_empno;</span><br><span class="line">return out_ename;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">-- 调用存储函数</span><br><span class="line">select myfun2_emp(1008);</span><br></pre></td></tr></table></figure><h1>触发器</h1><h1>索引</h1><h1>事务</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;视图&lt;/h1&gt;
&lt;p&gt;一个虚拟表，非真实存在，其本质是根据SQL语句获取动态的数据集，并为其命名，用户使用时只需使用视图名称即可获取结果集，并可以将其当作表来使用&lt;/p&gt;
&lt;p&gt;数据库中只存放了视图的定义，而并没有存放视图中的数据。这些数据存放在原来的表中，表中的数据发生</summary>
      
    
    
    
    <category term="MySQL" scheme="https://xinzaigeek.68565200.xyz/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://xinzaigeek.68565200.xyz/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>2.系统编译</title>
    <link href="https://xinzaigeek.68565200.xyz/post/dd99ee0d.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/dd99ee0d.html</id>
    <published>2024-10-13T03:18:49.000Z</published>
    <updated>2024-11-12T10:58:09.478Z</updated>
    
    <content type="html"><![CDATA[<h1>Uboot</h1><p>安装编译必用工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lzop  libncurses5-dev u-boot-tools</span><br></pre></td></tr></table></figure><p>创建文件夹，创建完成之后，将Uboot源代码复制复制到Linux中(FTP)，解压文件，编译文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir linux</span><br><span class="line">cd linux</span><br><span class="line">mkdir uboot</span><br><span class="line"></span><br><span class="line">//解压</span><br><span class="line">tar -xvf uboot-imx-rel_imx_4.1.15_2.1.0_ga_20200512.tar.gz</span><br><span class="line"></span><br><span class="line">//编译文件</span><br><span class="line">./create.sh</span><br></pre></td></tr></table></figure><p>u-boot.bin和u-boot.imx的区别：<a href="https://www.cnblogs.com/fah936861121/articles/7248430.html">参考链接</a></p><h2 id="流程">流程</h2><blockquote><p>汇编部分</p></blockquote><p>关闭：中断、看门狗、cache、mmu… --&gt; 进入SVC模式 --&gt; 基本硬件初始化(时钟、串口、flash、内存) --&gt; 初始化堆栈 --&gt; 自搬移(将汇编中的C语言从flash中移到内存中)</p><blockquote><p>C语言部分</p></blockquote><p>大部分硬件初始化(网卡、USB、屏幕…) --&gt; 把内核搬到内存</p><h2 id="uboot源码简要分析">Uboot源码简要分析</h2><h3 id="汇编部分">汇编部分</h3><blockquote><p>在项目中arch/arm/lib/vectors.S，开始运行之后跳转到reset</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/2WPMVwXc39t5ZiH.png" alt="源码分析1" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><blockquote><p>arch/arm/cpu/armv7/start.S，找到开始文件(start.S)，跳转到<code>cpu_init_cp15</code>、<code>cpu_init_crit</code>、<code>_main</code></p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/YuSVxEvk1qdBOAj.png" alt="源码分析2" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><blockquote><p>在start.S文件内，找到<code>cpu_init_cp15</code>、<code>cpu_init_crit</code>(跳转到cpu_init_crit)</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/ZhrOB1JWySUxwA6.webp" alt="源码分析3" style="zoom:50%;"></th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://s2.loli.net/2024/10/13/lsMF6qYR23mBcfy.webp" alt="源码分析4" style="zoom:40%;"></td></tr></tbody></table><blockquote><p>arch/arm/cpu/armv7/lowlevel_init.S，<code>lowlevel_init.S</code>运行结束后再运行<code>_main</code></p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/kazdBxF93uDiRnI.png" alt="源码分析5" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><blockquote><p><code>_main</code>在： arch/arm/lib/crt0.S，最后跳转到C语言部分的<code>board_init_f</code>和<code>board_init_r</code></p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/uqLXJbPzl4naDy5.webp" alt="源码分析6"></th></tr></thead><tbody></tbody></table><h3 id="c语言部分">C语言部分</h3><blockquote><p>在项目中的common/board_f.c，看board_init_f</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/6BnIZWm8yV43dFi.png" alt="源码分析7" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><blockquote><p>在项目中的common/board_r.c，看board_init_r</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/ObKmMeBwgunHWqT.webp" alt="源码分析8" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><blockquote><p>在项目中的 common/main.c，看main.c的<code>main_loop</code></p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/EPdT45JV6bxlrOs.png" alt="源码分析9" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><h2 id="脚本分析-create-sh">脚本分析(<a href="http://create.sh">create.sh</a>)</h2><ul><li><p>.config：配置那些需要编译(-y)，如果注释了就不需要编译的</p></li><li><p>Makefile：根据.config文件中的配置进行编译，也就是哪些东西需要编译进去</p></li></ul><p>在Linux中修改.config方法(图形化配置)：<code>make menuconfig</code></p><p>增加或删除图形化配置选项：在drivers\rtc中的Kconfig修改，然后在进入，勾选需要编译的模块保存之后生效在.config文件，Makefile编译进去</p><h1>kernel(内核)</h1><p>将迅为内核源码拷贝进Linux虚拟机 ，然后解压并编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//解压</span><br><span class="line">tar -xvf linux-imx-rel_imx_4.1.15_2.1.0_ga_20200903.tar.gz</span><br><span class="line">//进入解压后的文件夹</span><br><span class="line">cd linux-imx-rel_imx_4.1.15_2.1.0_ga</span><br><span class="line">//编译</span><br><span class="line">./create.sh</span><br></pre></td></tr></table></figure><p>内核镜像：</p><ul><li><p>路径：<code>arch/arm/boot</code>，Image(非压缩文件)、uImage与zImage的区别：<a href="https://blog.csdn.net/xuxin314012316/article/details/82621002">参考</a>，这里使用uImage</p><ul><li>Image：原镜像文件</li><li>uImage：uboot专用的映像文件，在zImage之前加上一个长度为64字节的“头”，说明这个内核的版本、加载位置、生成时间、大小等信息</li><li>zImage：内核的一种映像压缩文件</li></ul></li><li><p>路径：arch/arm/boot/dts，设备树</p></li></ul><p>内核源码目录结构详细参考：<a href="https://blog.csdn.net/weixin_52622200/article/details/135411217">地址</a></p><p>drivers：包含了各种设备驱动程序的源代码，Linux 内核通过这些驱动程序与硬件设备进行交互和管理</p><p>net：与网络协议栈相关的目录，它包含了各种网络协议和网络设备驱动程序的实现</p><h2 id="脚本分析-create-sh">脚本分析(<a href="http://create.sh">create.sh</a>)</h2><p><code>#!/bin/bash</code> ：指定脚本使用 Bash 解释器的 shebang 语句。它出现在脚本的第一行，并告诉操作系统使用 Bash 解释器来执行该脚本。参考：<a href="https://www.jb51.net/jiaoben/307768w9h.htm">网址</a></p><p>make imx_v7_defconfig(arch\arm\configs)：预定义的配置文件，适用于i.MX6ULL EVK开发板的内核配置文件</p><p>.config(源码根目录)：配置哪些需要编译</p><p>Makefile：根据.config文件中的配置进行编译，也就是哪些东西需要编译进去</p><p>make modules命令：将驱动编译成模块（.ko 文件），然后加载到内核。<a href="https://blog.csdn.net/jinking01/article/details/132699750">参考</a></p><p>驱动编译两种方式</p><ul><li>驱动编译进内核(obj-y)</li><li>驱动编译成ko文件(obj-m)</li></ul><h1>设备树</h1><p>功能：包含芯片&amp;板子等外设信息，系统驱动会匹配设备树，匹配成功后加载驱动</p><p>文件路径：<code>arch/arm/boot/dts</code></p><p>dts(源代码)：</p><ul><li>dtsi：描述SoC(系统芯片)的内部外设信息，如CPU架构、主频、外设寄存器地址范围等</li><li>dts：板级配置文件，包含了特定硬件平台的详细配置信息</li><li>topeet_emmc_hdmi.dts(屏幕)(头文件包含下一个文件) -&gt; imx6ull-14x14-evk-emmc.dts -&gt; imx6ull-14x14-evk.dts -&gt; imx6ull.dtsi</li></ul><p>dtc(编译器)：编译，反编译(dtc -I dtb -O dts -o test001.dts topeet_emmc_hdmi.dtb)</p><p>dtb(设备树编译后的二进制文件)</p><h1>根文件系统</h1><p>含义：<a href="https://www.cnblogs.com/Wangzx000/p/16684484.html">参考</a></p><p>制作：<a href="https://blog.csdn.net/weixin_59665492/article/details/118681742">参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Uboot&lt;/h1&gt;
&lt;p&gt;安装编译必用工具：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>1.编译烧录调试</title>
    <link href="https://xinzaigeek.68565200.xyz/post/69f8b9de.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/69f8b9de.html</id>
    <published>2024-10-03T02:50:40.000Z</published>
    <updated>2024-11-12T11:35:36.396Z</updated>
    
    <content type="html"><![CDATA[<h1><center>交叉编译器安装</center></h1><p>进入local，创建文件夹arm，修改arm文件夹权限，进入新创文件夹</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">sudo <span class="built_in">mkdir</span> arm</span><br><span class="line">sudo chmod <span class="number">777</span> arm</span><br><span class="line"><span class="built_in">cd</span> arm</span><br></pre></td></tr></table></figure><p>把交叉编译工具链拷贝到/usr/local/arm文件夹（FTP）</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/03/a9dceS7ovY58VnF.webp" alt="拷贝工具" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>解压压缩包，修改环境变量，重启，测试</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//解压</span><br><span class="line">sudo tar -vxf gcc-linaro-<span class="number">4</span>.<span class="number">9</span>.<span class="number">4</span>-<span class="number">2017</span>.<span class="number">01</span>-x86_64_arm-linux-gnueabihf.tar.xz</span><br><span class="line"></span><br><span class="line">//修改环境变量</span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">//最后面新一行添加</span><br><span class="line">export <span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:/usr/local/arm/gcc-linaro-<span class="number">4</span>.<span class="number">9</span>.<span class="number">4</span>-<span class="number">2017</span>.<span class="number">01</span>-x86_64_arm-linux-gnueabihf/bin</span><br><span class="line"></span><br><span class="line">//查看环境变量</span><br><span class="line">env</span><br><span class="line">printenv</span><br><span class="line"><span class="built_in">echo</span> $<span class="built_in">PATH</span></span><br><span class="line"></span><br><span class="line">//重启</span><br><span class="line">sudo reboot</span><br><span class="line">//测试</span><br><span class="line">arm-linux-gnueabihf-gcc -v</span><br><span class="line"></span><br><span class="line">//编译</span><br><span class="line">arm-linux-gnueabihf-gcc 文件名.后缀名 -o 编译后文件名</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/03/WJIy4Gu382DFwbL.webp" alt="成功图" style="zoom: 50%;"></th></tr></thead><tbody></tbody></table><h1><center>烧录</center></h1><p>在烧录软件中(\mfgtools_for_6ULL\Profiles\Linux\OS Firmware\files\linux)，固件解析说明</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/B54RPCGdWgZtlSb.webp" alt="文件目录解析" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>将板子的拨码开关，设置为<code>USB串行启动</code>，数据线连接到板子上标有<code>OTG</code>的Mini USB口，另一端直接连接电脑USB口</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/X1PkZgzEFVLcSIA.png" alt="拨码模式" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>打开烧录软件<code>Mfgtools2</code>，看到烧录软件显示<code>符合 HID 标准的供应商定义设备</code>后，点start开始烧录，一直等待什么都不需要做，等全部变成绿色进度条即完成</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/uhKz8lvcWtBGDib.webp" alt="烧录界面" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>烧录完成之后，将板子断电，把拨码拨到<code>EMMC启动</code>，将数据线连接到板子上标有<code>USB-UART</code>的Mini USB口，另一端直接连接电脑USB口，打开串口软件<code>MobaXterm</code>，选择串口，点击<code>OK</code>连接</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/13/uCd7rLoJSeWpNf8.webp" alt="连接串口" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><h1>调试</h1><blockquote><p>[!NOTE]</p><p>TFTP：客户端和服务器之间进行文件的传输，远程下载 内核、设备树（<a href="https://www.php.cn/faq/413642.html">参考</a>）</p><p>FTP和TFTP之间的区别：<a href="https://www.php.cn/faq/413642.html">链接</a></p><p>NFS：允许一个系统在网络上与他人共享目录和文件，挂载网络根文件系统（<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/9719420?fr=ge_ala">参考</a>）</p></blockquote><h2 id="tftp搭建">tftp搭建</h2><p>虚拟机Linux作为服务端，按照下面命令进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">//创建文件夹 tftpfile</span><br><span class="line">mkdir tftpfile</span><br><span class="line">sudo chmod 777 tftpfile</span><br><span class="line">sudo apt-get install tftp-hpa tftpd-hpa</span><br></pre></td></tr></table></figure><p>修改：<code>sudo vim /etc/default/tftpd-hpa</code>，按图片说明修改</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/20/dmL4kw7qhPAJM39.webp" alt="修改文件" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>重启服务：<code>sudo service tftpd-hpa restart</code></p><h2 id="nfs搭建">nfs搭建</h2><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//依次运行</span><br><span class="line">sudo apt-get install nfs-kernel-server rpcbind</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> nfs</span><br></pre></td></tr></table></figure><p>按照图片修改：<code>sudo vim /etc/exports</code>，在最后添加</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//具体添加内容  路径(刚才创建nfs文件夹路径)</span><br><span class="line">/home/wfeng/nfs  *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/20/4Qe1L5kVbhyMADR.webp" alt="修改文件" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>重启nfs服务：<code>sudo /etc/init.d/nfs-kernel-server restart</code></p><h2 id="双网卡模式设置">双网卡模式设置</h2><h3 id="windows端">Windows端</h3><p>将网线接在Windows端和板子上(23/02)，找到Windows上虚拟机的网卡，进入ipv4设置成</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/23/yPDigjUKLICefox.webp" alt="进入设置修改ipv4" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>设置的IP如下：</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/23/qPhGxBkSQJT19mO.webp" alt="IP地址" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><blockquote><p>虚拟机设置，记得新建的网卡需要选择板子的网卡</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/23/4gLJKudVIeFObcv.webp" alt="设置虚拟机网卡" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><h3 id="ubuntu设置">Ubuntu设置</h3><p>在虚拟机界面，编辑虚拟机设置，添加网卡，选择刚创建的网卡</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/28/pOqhEd4cyv3NH6K.png" alt="添加网卡" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>设置完成之后，打开虚拟机，在终端输入<code>ifconfig</code>，查看是否有图片中的双网卡</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/28/c7z3MubCKfDjhBt.png" alt="查看双网卡" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>在虚拟机设置中，按照图片，将添加的网卡修改成手动的ip</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/28/F8ZSiQmvr6U3tyq.png" alt="修改IP" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>再重新<code>ifconfig</code>，查看一下网络，如图所示</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/28/93qhSN8G5UPozTB.png" alt="查看网络" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>使用<code>ping</code>命令，试试看是否主机与虚拟机能否互通</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/29/CfJvg9wn2SLBDoN.png" alt="ping" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>如果虚拟机ping不通主机，可能是主机的防火墙拦截了，需要关闭主机的防火墙，在任务栏放大镜搜索防火墙</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/29/dK6hHC2BxvSVUlW.png" alt="关闭防火墙" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><h3 id="板子uboot网络设置">板子Uboot网络设置</h3><p>将板子串口连接电脑USB口，打开串口软件(MobaXterm)，波特率：115200，连接之后，重启板子，在倒计时三秒内按键盘任意键进入Uboot设置</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/29/4mYy3pONZh8AcvD.png" alt="进入Uboot" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>查看uboot当前环境变量：<code>printenv </code></p><p>修改网络相关环境变量，将下列命令一次配置</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setenv serverip <span class="number">192</span>.<span class="number">168</span>.<span class="number">2</span>.<span class="number">220</span>//服务器IP，linux的IP</span><br><span class="line">setenv gatewayip <span class="number">192</span>.<span class="number">168</span>.<span class="number">2</span>.<span class="number">1</span>//网关</span><br><span class="line">setenv ipaddr <span class="number">192</span>.<span class="number">168</span>.<span class="number">2</span>.<span class="number">120</span>//开发板uboot的IP地址</span><br><span class="line">setenv netmask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span>//子网掩码</span><br><span class="line">setenv ethaddr <span class="number">42</span>:<span class="number">03</span>:<span class="number">07</span>:<span class="number">3</span>B:<span class="number">15</span>:<span class="number">5</span>F//设置网卡地址</span><br><span class="line">saveenv//保存环境变量</span><br><span class="line">reset//重启</span><br></pre></td></tr></table></figure><p>测试是否配置完成，重启板子，重新进入Uboot，使用ping虚拟机以及主机</p><blockquote><p>[!NOTE]</p><p>虚拟机和windows通过ping uboot 是不通的，因为uboot代码里面没有ping回复机制，或者说没有相关代码</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/29/O2ajFXDAY1qxsMH.png" alt="测试Uboot网络" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>恢复uboot默认环境变量</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env default -a</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure><h2 id="修改uboot引导方式">修改uboot引导方式</h2><p>把 kernel 中的 zImage 放在 tftpfile 文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/xinzai/linux/kernel/linux-imx-rel_imx_4.1.15_2.1.0_ga/arch/arm/boot/</span><br></pre></td></tr></table></figure><p>把 设备树 文件夹中 topeet_emmc_hdmi.dtb 放在 tftpfile 文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/xinzai/linux/kernel/linux-imx-rel_imx_4.1.15_2.1.0_ga/arch/arm/boot/dts/</span><br></pre></td></tr></table></figure><p>修改bootcmd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">测试：</span><br><span class="line">tftp 80800000 zImage;//下载内核</span><br><span class="line">tftp 83800000 topeet_emmc_hdmi.dtb;//下载设备树</span><br><span class="line">bootz 80800000 - 83800000//启动</span><br><span class="line"></span><br><span class="line">设置：</span><br><span class="line">setenv bootcmd &#x27;tftp 80800000 zImage; tftp 83800000 topeet_emmc_hdmi.dtb; bootz 80800000 - 83800000&#x27;</span><br></pre></td></tr></table></figure><p>修改bootargs，注意：<code>xinzai</code> 需要修改成自己的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenv bootargs &#x27;console=ttymxc0,115200 root=/dev/nfs rw nfsroot=192.168.2.220:/home/xinzai/nfs ip=192.168.2.120:192.168.2.220:192.168.2.1:255.255.255.0::eth0:off&#x27;</span><br></pre></td></tr></table></figure><p>保存：<code>saveenv</code></p><p>重启：<code>reset</code></p><p>出现nfs挂载失败问题</p><blockquote><p>[!WARNING]</p><p>Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0) [  102.086444] —[ end Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(2,0) [  102.984808] random: nonblocking pool is initialized</p></blockquote><p>在Ubuntu中输入命令，并在末尾添加内容（前面不要有#）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/nfs-kernel-server</span><br><span class="line"></span><br><span class="line">//添加</span><br><span class="line">RPCNFSDOPTS=&quot;--nfs-version 2,3,4 --debug --syslog&quot;</span><br></pre></td></tr></table></figure><p>重启nfs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nfs-kernel-server restart</span><br></pre></td></tr></table></figure><p>挂载成功后，用户名：root，密码：topeet</p><h1>应用</h1><p>应用编译：用交叉编译将写好的.c文件编译出来（app文件夹）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arm-linux-gnueabihf-gcc app.c -o app -lm</span><br></pre></td></tr></table></figure><p>编译驱动（\app_drv\drv）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//编译，生成.o文件</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">//清除</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><p>将编译后的文件拷贝到根文件系统目录下(nfs)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建文件夹存放</span><br><span class="line"><span class="built_in">mkdir</span> oled_6050</span><br><span class="line"></span><br><span class="line">//复制编译后文件</span><br><span class="line">cp app ~/nfs/oled_6050/</span><br><span class="line">//复制驱动</span><br><span class="line"> cp *.ko ~/nfs/oled_6050/</span><br></pre></td></tr></table></figure><p>加载驱动（在串口端）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">insmod mpu6050_drv.ko</span><br><span class="line">insmod oled_drv.ko</span><br><span class="line"></span><br><span class="line">//卸载驱动</span><br><span class="line">rmmod mpu6050_drv.ko</span><br><span class="line"></span><br><span class="line">//查看驱动</span><br><span class="line">lsmod</span><br><span class="line"></span><br><span class="line">//运行</span><br><span class="line">./app</span><br></pre></td></tr></table></figure><p>修改设备树</p><p>在 <code>\linux\kernel\linux-imx-rel_imx_4.1.15_2.1.0_ga\arch\arm\boot\dts</code> 找到 <code>imx6ull-14x14-evk</code></p><p>添加oled设备树，oled地址原本是0x78，但这里只需要高7位，最低位是读写位，不需要，则为3c</p><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/11/08/WZIr4YNV31vnlbU.png" alt="修改设备树文件" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>虚拟文件系统(<a href="https://www.cnblogs.com/1441760655-Jansert/p/10800025.html">参考</a>)：提供一种统一的接口，使得用户空间程序可以通过文件系统的方式来访问各种设备和资源</p><h2 id="自启动">自启动</h2><p><a href="http://xn--run-th2el20d.sh">创建run.sh</a> (串口)，路径：/oled_6050</p><p>&amp;：后台执行程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//创建</span><br><span class="line">vi run.sh</span><br><span class="line"></span><br><span class="line">insmod /oled_6050/mpu6050_drv.ko</span><br><span class="line">insmod /oled_6050/oled_drv.ko</span><br><span class="line">./oled_6050/app&amp;</span><br></pre></td></tr></table></figure><p>自启动修改文件(<a href="https://blog.51cto.com/lwc0329/5064229">参考</a>)</p><p>在 /etc/init.d/rcS(串口端)，在最后一行添加（也可以在这/etc/rc.local）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./oled_6050/run.sh</span><br></pre></td></tr></table></figure><p>后续启动后，会自动运行 <a href="http://run.sh">run.sh</a> 但不会自动停止需要手动杀掉进程(不用管打印字节登陆即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查看进程</span><br><span class="line">ps</span><br><span class="line"></span><br><span class="line">//杀死进程</span><br><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;交叉编译器安装&lt;/center&gt;&lt;/h1&gt;
&lt;p&gt;进入local，创建文件夹arm，修改arm文件夹权限，进入新创文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>营业执照相关</title>
    <link href="https://xinzaigeek.68565200.xyz/post/ff4327d1.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/ff4327d1.html</id>
    <published>2024-10-02T02:55:09.000Z</published>
    <updated>2024-10-13T13:47:28.226Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c0772de6bc64bc381ce6df6a7a5f496b07711c665f65cb3dbcf83cab3d50d764"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</summary>
    
    
    
    <category term="技术积累记录" scheme="https://xinzaigeek.68565200.xyz/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="营业执照" scheme="https://xinzaigeek.68565200.xyz/tags/%E8%90%A5%E4%B8%9A%E6%89%A7%E7%85%A7/"/>
    
  </entry>
  
  <entry>
    <title>springboot相关配置</title>
    <link href="https://xinzaigeek.68565200.xyz/post/fd908b52.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/fd908b52.html</id>
    <published>2024-09-30T08:34:20.000Z</published>
    <updated>2024-11-16T03:32:17.382Z</updated>
    
    <content type="html"><![CDATA[<h1><center>maven安装与配置</center></h1><blockquote><p>maven安装：<a href="https://archive.apache.org/dist/maven/maven-3/">网址</a>（这里以3.6.3为例），选择好对应版本后，点击<code>binaries</code></p></blockquote><img src="https://s2.loli.net/2024/09/30/UcuHV5jgt4Xv2eW.webp" alt="maven安装" style="zoom:40%;"><blockquote><p>配置环境变量(任务栏放大镜搜索)，进入后添加</p><p>变量名：<code>MAVEN_HOME</code>，变量值：maven下载后的解压路径(看到bin)</p></blockquote><img src="https://s2.loli.net/2024/09/30/b5gQYH7TR9OzjSV.webp" alt="配置环境变量" style="zoom:40%;"><blockquote><p>继续配置，双击<code>Path</code>，新建添加<code>%MAVEN_HOME%\bin</code>，然后一层层点确定</p></blockquote><img src="https://s2.loli.net/2024/09/30/sWBeRwgU5AzpaSN.webp" alt="配置环境变量" style="zoom:45%;"><blockquote><p>测试是否配置完成，cdm命令输入：<code>mvn -v</code></p></blockquote><img src="https://s2.loli.net/2024/09/30/CiOc5KxDzPrXUS3.webp" alt="成功图" style="zoom:50%;"><h1><center>修改仓库</center></h1><blockquote><p>在maven 下载后的解压路径下，新建一个文件夹 文件命名为<code>repository</code></p></blockquote><img src="https://s2.loli.net/2024/09/30/uHG839XgwcVnxRo.webp" alt="新建文件夹" style="zoom:50%;"><blockquote><p>在解压文件夹中找到<code>conf</code>，打开<code>settings.xml</code></p></blockquote><img src="https://s2.loli.net/2024/09/30/ixUDlSBP96GY24t.webp" alt="打开文件" style="zoom:50%;"><h2 id="修改本地仓库">修改本地仓库</h2><blockquote><p>找到<code>localRepositor</code>标签，可能注释掉了，直接搜索取消注释即可，找到后添加刚才创建文件夹路径</p></blockquote><img src="https://s2.loli.net/2024/09/30/B7LQhATnlzyPpdq.webp" alt="修改本地仓库位置" style="zoom:40%;"><h2 id="修改远程仓库">修改远程仓库</h2><blockquote><p>找到<code>mirrors</code>标签，可能注释掉了，直接搜索取消注释即可，找到后添加以下代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2024/09/30/5IHyqTFCuWQPjRf.webp" alt="添加代码" style="zoom:35%;"><blockquote><p>验证maven本地仓库和远程仓库是否配置成功，在命令行界面输入<code>mvn help:system</code>，出现图中标志表示成功</p></blockquote><img src="https://s2.loli.net/2024/09/30/3Vivd95MEeKkycZ.webp" alt="验证" style="zoom:60%;"><h1><center>项目打包成jar包</center></h1><blockquote><p>查看项目中的<code>pom.xml</code>是否有一下插件，如果没有添加，如果按上面配置应该是有</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><blockquote><p>使用Maven命令打包，在项目中的终端或者命令窗口进入到项目文件夹运行命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean <span class="keyword">package</span></span><br></pre></td></tr></table></figure><blockquote><p>运行jar包，输入以下命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar jar包名</span><br><span class="line"><span class="comment">//例：java -jar demoa-0.0.1-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><h1>idea修改设置默认maven，解决每次新建和导入项目都需要重新配置maven</h1><p>配置系统环境变量及Path环境变量</p><blockquote><p>变量名：<code>MAVEN_HOME</code></p><p>变量值:<code>D:\apache-maven-3.6.2</code> (D:\APP\maven_3.6.3)</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/14/yHwBVoTe2IYA76l.webp" alt="配置环境变量1" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>配置Path环境变量，在maven中进入bin目录，复制目录，填进去(D:\APP\maven_3.6.3\bin)</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/14/KgWG9bFcOVqATe7.webp" alt="环境变量配置2" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><blockquote><p>验证：cmd打开窗口，输入<code>mvn -version</code>，如果出现对应maven的版本号，即成功</p></blockquote><p>修改默认仓库</p><p>进入maven文件夹找到图片的文件打开，然后在maven文件夹下新建一个文件夹名为<code>repository</code></p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/14/tADH94LVjkuy7Ro.webp" alt="进入文件" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>进入后，找到图片中的位置增加圈中的代码，中间的路径则为刚才新建的文件夹路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;D:\APP\maven_3.6.3\repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th><img src="https://s2.loli.net/2024/10/14/ws2hxZDUvQiSRT6.webp" alt="修改本地仓库" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>顺便将仓库修改为阿里云的，可以快速下载配置文件，往下滑增加图片中的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"><img src="https://s2.loli.net/2024/10/14/3qAhPMCN6ZyEFT5.webp" alt="修改仓库" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>修改完成之后，新建工程，进入工程，打开设置，按照图中修改</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/14/r9HCFyWsO3NaevR.webp" alt="修改工程中的maven" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>修改新建工程时的maven仓库地址，修改后就完成了</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/14/E98bzUKwh3JdeGu.webp" alt="修改新工程的配置" style="zoom:50%;"></th></tr></thead><tbody></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;maven安装与配置&lt;/center&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;maven安装：&lt;a href=&quot;https://archive.apache.org/dist/maven/maven-3/&quot;&gt;网址&lt;/a&gt;（这里以3.6.3为例），选择好</summary>
      
    
    
    
    <category term="技术积累记录" scheme="https://xinzaigeek.68565200.xyz/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="springboot相关配置" scheme="https://xinzaigeek.68565200.xyz/tags/springboot%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>0.Linux基础命令</title>
    <link href="https://xinzaigeek.68565200.xyz/post/288a7e13.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/288a7e13.html</id>
    <published>2024-09-28T05:37:04.000Z</published>
    <updated>2024-11-21T02:22:20.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>终端打开：一个窗口打开第二个：<code>Ctrl+Shift+t</code>，不同串口打开：<code>Ctrl+Alt+t</code></p><p>虚拟机Ubuntu安装参考：<a href="https://blog.csdn.net/weixin_48728769/article/details/126989849?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170693530616800182141076%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170693530616800182141076&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-126989849-null-null.142%5Ev99%5Epc_search_result_base9&amp;utm_term=Ubuntu20.04%E4%B8%8B%E8%BD%BD&amp;spm=1018.2226.3001.4187">链接</a></p></blockquote><h1><center>文件和目录操作</center></h1><p>参考：<a href="https://blog.csdn.net/weixin_45908488/article/details/123703179?spm=1001.2014.3001.5502">链接</a></p><blockquote><p>查看文件</p></blockquote><ul><li>查看当前目录里面内容：<code>ls</code></li><li>查看当前目录里面内容(详细信息)：<code>ls -l</code></li><li>查看当前目录里面内容(包括隐藏)：<code>ls -a</code></li><li>查看系统加载哪些驱动：<code>lsmod</code></li><li>查看系统有哪些usb设备：<code>lsusb</code></li></ul><blockquote><p>文件夹操作</p></blockquote><ul><li>进入哪个文件夹(不知道有哪些需先查看)：<code>cd 文件夹名</code>，连续进入：<code>cd 文件夹名1/文件夹名2</code></li><li>返回上一级：<code>cd ..</code></li><li>切换到系统根目录：<code>cd /</code></li><li>切换用户主目录：：<code>cd ~</code></li><li>返回当前文件夹所在路径：<code>pwd</code></li><li>创建文件夹：<code>mkdir 文件夹名</code></li></ul><blockquote><p>文件操作</p></blockquote><ul><li>新建文件：<code>touch 文件.后缀名</code></li><li>删除文件：<code>rm 文件.后缀名</code>，删除文件夹中后缀名全部文件：<code>rm *.后缀名</code></li><li>删除文件夹：<code>rm -R 文件夹名</code></li><li>复制文件：<code>cp 文件名.后缀名 路径</code></li><li>移动文件：<code>mv 文件名.后缀名 路径</code></li><li>查看文件中内容：<code>cat 文件名.后缀名</code></li></ul><h1><center>管理员</center></h1><p>管理员权限：<code>sudo 操作</code></p><p>创建root用户：<code>sudo passwd root</code>，进入root用户：<code>su root</code></p><p>切换用户：<code>su 用户名</code></p><h1><center>安装应用</center></h1><blockquote><p>查看IP：ifconfig</p></blockquote><h2 id="apt">apt</h2><p>参考：<a href="https://blog.csdn.net/m0_46278037/article/details/120232679?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171212013516800182718297%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=171212013516800182718297&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-120232679-null-null.142%5Ev100%5Epc_search_result_base9&amp;utm_term=apt%20Linux&amp;spm=1018.2226.3001.4187">链接</a></p><p>安装：<code>sudo apt install &lt;package_name&gt;</code></p><p>使用 apt 更新包数据库：<code>sudo apt update</code></p><p>使用 apt 升级已安装的软件包：<code>sudo apt upgrade</code></p><h2 id="换源">换源</h2><p>根据图示更改为国内镜像源，参考：<a href="https://blog.csdn.net/qq_45878098/article/details/126037838">链接</a></p><img src="https://s2.loli.net/2024/09/30/4knXvK1C96LgJwj.webp" alt="更换镜像源" style="zoom:40%;"><h1><center>文本处理</center></h1><h2 id="vim">vim</h2><p>参考：<a href="https://blog.csdn.net/qq_29689343/article/details/116162089?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Linux%E6%96%87%E6%9C%AC&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-116162089.142%5Ev100%5Epc_search_result_base9&amp;spm=1018.2226.3001.4187">链接</a></p><p>安装：<code>sudo apt install vim</code>，创建一个.c文件：<code>vim 文件名.c</code></p><p>当编辑文件完成后按 Esc 键即可返回命令模式</p><p>在命令模式状态下按<code>:</code>键，Vim 窗口的左下方出现一个<code>:</code>符号</p><blockquote><p><code>wq</code>：保存并退出，<code>wq!</code>：强制保存并推出，<code>q</code>：不保存退出，<code>q!</code>：不保存强制退出</p><p><code>set nu</code>：文本编辑显示行号，<code>/需要搜索的文本</code>：搜索文本（n查看下一个，N查看上一个）</p></blockquote><p>gedit：文本编辑器</p><h1><center>压缩与解压</center></h1><blockquote><p>通用形式</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tar [选项] [文件]</span><br><span class="line"></span><br><span class="line">文件：指定要处理的文件或目录列表</span><br><span class="line">选项：</span><br><span class="line">    -c: 创建一个新的归档文件。</span><br><span class="line">    -r: 向已存在的归档文件中添加文件。</span><br><span class="line">    -t: 列出归档文件的内容。</span><br><span class="line">    -u: 更新归档文件，即添加比归档文件中副本更新的文件。</span><br><span class="line">    -x: 从归档文件中提取文件。</span><br><span class="line">    -v: 在处理文件时显示详细信息。</span><br><span class="line">    -f: 指定归档文件的名称。</span><br><span class="line">    -z: 通过gzip进行压缩或解压缩。</span><br><span class="line">    -j: 通过bzip2进行压缩或解压缩。</span><br><span class="line">    -W: 确认归档文件的正确性</span><br></pre></td></tr></table></figure><blockquote><p>tar压缩：tar -cvf test.tar *.c</p><p>tar解压：tar -xvf test.tar</p></blockquote><h1><center>查找</center></h1><blockquote><p><code>find</code>：查找文件，sudo find  /home/wfeng  -name  “*.c”</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">find</span> [起始目录] [表达式]</span><br><span class="line"></span><br><span class="line"> 起始目录：<span class="built_in">find</span> 命令开始搜索的目录</span><br><span class="line"> 表达式：</span><br><span class="line">-name：匹配文件名。</span><br><span class="line">-<span class="built_in">type</span>：匹配文件类型（例如，f 表示普通文件，d 表示目录）。</span><br><span class="line">-size：根据文件大小匹配文件。</span><br><span class="line">-mtime：根据文件最后修改时间匹配文件。</span><br><span class="line">-exec：对匹配搜索条件的文件执行命令</span><br></pre></td></tr></table></figure><blockquote><p><code>grep</code>：查找文件中的字符，grep “d” a.c</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] [搜索模式] [文件…]</span><br><span class="line"></span><br><span class="line">[选项]：可选，用于定制grep的行为，例如是否忽略大小写（-i），是否显示行号（-n）等</span><br><span class="line">[搜索模式]：想要搜索的文本或正则表达式。</span><br><span class="line">[文件…]：要搜索的文件。如果省略文件名，grep会从标准输入读取数据</span><br></pre></td></tr></table></figure><blockquote><p><code>dmesg</code>：系统内核打印，特定搜索：dmesg | grep usb</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dmesg | grep [选项] “搜索字符串”</span><br><span class="line"></span><br><span class="line">dmesg：用于获取内核消息</span><br><span class="line">|：管道符，将 dmesg 的输出传递给 grep</span><br><span class="line">grep：文本搜索命令</span><br><span class="line">[选项]：可选参数，用于定制 grep 的行为，例如忽略大小写（-i），显示行号（-n）等</span><br><span class="line">“搜索字符串”：要搜索的文本字符串</span><br></pre></td></tr></table></figure><h1><center>基础编译测试</center></h1><p>安装gcc：<code>sudo apt install gcc</code></p><p>编译 .c：<code>gcc 文件名.c -o 生成文件名</code>，再运行编译生成的可执行文件：<code>./可执行文件名.后缀名</code></p><p>查看文件属性：<code>file 文件名.后缀名</code>，例：file mian.c</p><p>修改权限：<code>sudo chmod 777 文件名.后缀名</code>，例：sudo chmod 777 test.c</p><h1><center>其他命令</center></h1><ul><li>查看网络信息(IP地址等)：<code>ifconfig</code>(<a href="https://blog.csdn.net/AnChenliang_1002/article/details/131466890">参考</a>)</li><li>echo：输出指定的字符串信息或显示变量的值的命令(<a href="https://blog.csdn.net/rhn_111/article/details/128954511">参考</a>)</li><li>显示应用运行的进程：<code>ps</code>，显示系统全部进程：<code>top</code>(<a href="https://blog.csdn.net/Y1730008223CONG/article/details/126533853">参考</a>)，退出：<code>ctrl c/z</code></li><li>杀死进程：kill -9 进程号</li><li>发送信号到进程：<code>kill</code>(<a href="https://www.runoob.com/linux/linux-comm-kill.html?source=1">参考</a>)</li><li>关机：<code>shutdown</code>(默认一分钟后关)，重启：<code>reboot</code></li></ul><h1><center>环境搭建</center></h1><p>通过SSH，Windows可以连接到Linux，在MobaXterm中操作Linux</p><p>安装SSH：Linux <code>sudo apt-get install openssh-server</code>，Windows <code>MobaXterm软件</code></p><p>MobaXterm连接Linux，按照图中填写IP，连接后输入Linux用户名以及密码</p><img src="https://s2.loli.net/2024/10/01/FKfOYW47Z2C6dGh.webp" alt="连接Linux" style="zoom:40%;"><h2 id="传文件">传文件</h2><h3 id="ftp">FTP</h3><p>安装：<code>sudo apt-get install vsftpd</code></p><p><code>sudo vim /etc/vsftpd.conf</code>，找到 #write_enable=YES，把#删掉，然后<code>Esc</code>、<code>:</code>、<code>wq</code>、回车</p><img src="https://s2.loli.net/2024/10/01/VPhkeEY3Z5b2KrC.webp" alt="删除" style="zoom:40%;"><p>重启FTP：<code>sudo /etc/init.d/vsftpd restart</code></p><p>Windows安装：<code>FileZilla</code>软件，输入Linux的IP、用户名、密码 连接Linux的FTP</p><p>本地站点则为Windows的文件，远程站点则为Linux文件，双击Windows中的文件自动传到Linux，在Linux右键下载则传到Windows</p><img src="https://s2.loli.net/2024/10/01/VDI6tEBbdcYaKSp.webp" alt="连接FTP" style="zoom:50%;"><h3 id="samba">Samba</h3><p>Linux安装：运行以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line">sudo apt-get install samba samba-common</span><br><span class="line">samba -V//如果出现下面版本号说明已经安装了samba服务器</span><br><span class="line">sudo <span class="built_in">mkdir</span> /home/share</span><br><span class="line">sudo chmod <span class="number">777</span> /home/用户名</span><br><span class="line">sudo smbpasswd -a 用户名//需要确认输入两个相同的密码确认</span><br><span class="line">sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak//备份 smb.conf 配置文件</span><br></pre></td></tr></table></figure><p>修改文件：<code>sudo vim /etc/samba/smb.conf</code>，在最后添加下面的内容，里面名字(xinzai)要改成自己的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line"> </span><br><span class="line">    ; 创建工作组 设定 Samba Server 所要加入的工作组或者域  </span><br><span class="line">    workgroup = WORKGROUP </span><br><span class="line"> </span><br><span class="line">    ; 为了防止出现中文目录乱码的情况。其中根据你的local，UTF-8 有可能需要改成 cp936</span><br><span class="line">    ; display charset = UTF-8</span><br><span class="line">    unix charset = UTF-8</span><br><span class="line">    dos charset = cp936 </span><br><span class="line">  </span><br><span class="line">    ; 是否允许guest用户访问</span><br><span class="line">    guest ok = no</span><br><span class="line">    </span><br><span class="line">    ; 注：如果 #security 存在就直接修改，不存在就创建</span><br><span class="line">    ; security = user </span><br><span class="line"> </span><br><span class="line">    ; 安全模式  我们设置用户安全级别</span><br><span class="line">    security = user </span><br><span class="line">  </span><br><span class="line">  ; 说明：用来定义用户名映射，比如可以将root换成administrator、admin等。不过要事先在smbusers文件中定义好。</span><br><span class="line">  ; 比如：root = administrator admin，这样就可以用administrator或admin这两个用户来代替root登陆Samba Server，更贴近windows用户的习惯。</span><br><span class="line">    username map = /etc/Samba/smbusers </span><br><span class="line"> </span><br><span class="line">; 共享名，该共享标签，该名字为在电脑上看到的共享名 注意网络映射的路径是这标签名字不是共享路径的名字</span><br><span class="line">[share]</span><br><span class="line"> </span><br><span class="line">    ; 该共享描述</span><br><span class="line">    comment = Shared Folder with username and password </span><br><span class="line"> </span><br><span class="line">    ; 共享文件夹路径</span><br><span class="line">    path = /home/xinzai/</span><br><span class="line"> </span><br><span class="line">    ; 表示是否允许匿名访问该共享目录</span><br><span class="line">    public = no</span><br><span class="line"> </span><br><span class="line">    ; 配置的Samba访问账号 指明可以访问的用户</span><br><span class="line">    valid users = xinzai</span><br><span class="line"> </span><br><span class="line">    ; 表示是否可以在 Window Explorer中显示该目录</span><br><span class="line">    browsable = no</span><br><span class="line"> </span><br><span class="line">    ; 指明新建立的文件的属性</span><br><span class="line">    create mask = 777 </span><br><span class="line"> </span><br><span class="line">    ; 指明新建立的目录的属性</span><br><span class="line">    directory mask = 777</span><br><span class="line"> </span><br><span class="line">    ; force group 和force user 规定创建的文件或文件夹的拥有者和组拥有者是谁 </span><br><span class="line">    ; 一般这两个值来空，则表示拥有者和组拥有者为创建文件者。 如设定值，如force group=xinzai</span><br><span class="line">    ; Force user=yhq，则不管是谁创建的文件和文件夹，拥有者都为yhq和yhq组。</span><br><span class="line"> </span><br><span class="line">    ; force user强制把建立文件的属主是谁。如果我有一个目录，让guest可以写，那么guest就可以删除，</span><br><span class="line">    ; 如果我用force user=yhq强制建立文件的属主是yhq，同时限制create mask = 0755，</span><br><span class="line">    ; 这样guest就不能删除了。</span><br><span class="line"> </span><br><span class="line">    force user = xinzai </span><br><span class="line">    force group = xinzai</span><br><span class="line"> </span><br><span class="line">    ; available用来指定该共享资源是否可用</span><br><span class="line">    available = yes </span><br><span class="line"> </span><br><span class="line">    ; 共享路径读权限 设置共享是否可浏览，如果no则表示隐藏，需要通过&quot;//ip/共享目录&quot;进行访问</span><br><span class="line">    browseable = yes</span><br><span class="line"> </span><br><span class="line">    ; 共享路径写权限</span><br><span class="line">    writable = yes</span><br></pre></td></tr></table></figure><p>重启samba服务器：<code>sudo service smbd restart</code></p><p>Windows：安装图中所示，创建映射网络驱动器，文件夹填写：<code>\\虚拟机IP地址\share</code>，例：\\192.168.31.169\share，然后输入账号和密码，创建时一般都是与Linux账户设置一致</p><img src="https://s2.loli.net/2024/10/01/GfcUbgAt3YTM1Ks.webp" alt="创建" style="zoom:50%;"><blockquote><p>scp：<a href="https://www.runoob.com/linux/linux-comm-scp.html">参考</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;终端打开：一个窗口打开第二个：&lt;code&gt;Ctrl+Shift+t&lt;/code&gt;，不同串口打开：&lt;code&gt;Ctrl+Alt+t&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;虚拟机Ubuntu安装参考：&lt;a href=&quot;https://blog.csdn.net/</summary>
      
    
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://xinzaigeek.68565200.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>前端相关报错</title>
    <link href="https://xinzaigeek.68565200.xyz/post/bcf1b676.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/bcf1b676.html</id>
    <published>2024-09-24T10:44:26.000Z</published>
    <updated>2024-10-06T15:20:41.055Z</updated>
    
    <content type="html"><![CDATA[<h1>npm install-g@vue/cli报错错</h1><p>错误如图：</p><img src="https://s2.loli.net/2024/09/27/U3iBFknjNr6Eb1I.webp" alt="错误视图" style="zoom:60%;"><p>解决方法：修改文件夹权限</p><img src="https://s2.loli.net/2024/09/27/WSvq3c9TlMZbF1x.webp" alt="进入node文件夹" style="zoom:50%;"><p>按照途中顺序，将上图三个文件夹修改权限，修改完即可</p><img src="https://s2.loli.net/2024/09/27/skMA6OCmifdjuQF.webp" alt="修改权限" style="zoom:45%;"><h1>解决npm ERR! code ENOENT npm ERR! syscall open npm ERR! path X:\RuoYi-Vue-master\RuoYi-Vue-master/pack</h1><p>执行npm命令报错：</p><blockquote><p>npm ERR! code ENOENT<br>npm ERR! syscall open<br>npm ERR! path X:\RuoYi-Vue-master\RuoYi-Vue-master/package.json<br>npm ERR! errno -4058<br>npm ERR! enoent ENOENT: no such file or directory, open ‘X:\RuoYi-Vue-master\RuoYi-Vue-master\package.json’<br>npm ERR! enoent This is related to npm not being able to find a file.<br>npm ERR! enoent</p></blockquote><p><strong>问题原因：</strong> 报错中已经说了 在xxxl路径下找不到 <code>package.json</code>文件，所以罪魁祸首就是执行npm命令的目录不对</p><p><strong>解决办法：</strong> 找到 <code>package.json</code>正确的目录，然后再在终端执行npm命令即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;npm install-g@vue/cli报错错&lt;/h1&gt;
&lt;p&gt;错误如图：&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/09/27/U3iBFknjNr6Eb1I.webp&quot; alt=&quot;错误视图&quot; style=&quot;zoom:60%;&quot;&gt;
</summary>
      
    
    
    
    <category term="错误记录" scheme="https://xinzaigeek.68565200.xyz/categories/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>5.RT-Thread设备模型框架</title>
    <link href="https://xinzaigeek.68565200.xyz/post/de55e8eb.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/de55e8eb.html</id>
    <published>2024-09-21T12:34:31.000Z</published>
    <updated>2024-10-03T01:45:36.453Z</updated>
    
    <content type="html"><![CDATA[<h1><center>I/O设备模型框架</center></h1><p>RT-Thread 提供了一套简单的 I/O 设备模型框架，如下图所示，它位于硬件和应用程序之间，共分成三层，从上到下分别是 I/O 设备管理层、设备驱动框架层、设备驱动层</p><img src="https://s2.loli.net/2024/09/22/G8HqSykte3pIzRo.jpg" alt="模型框架图" style="zoom:25%;"><h1><center>UART</center></h1><p>设备打开，在<code>drivers</code>中的<code>board.h</code>中寻找，这里打开串口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_USING_UART2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_UART2_TX_PIN       <span class="string">&quot;PA2&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_UART2_RX_PIN       <span class="string">&quot;PA3&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="查找设备">查找设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name：设备名称，查找成功返回设备句柄</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_device_t</span> <span class="title function_">rt_device_find</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//#define RT_NAME_MAX 8</span></span><br><span class="line"><span class="type">char</span> uart_name[RT_NAME_MAX];</span><br><span class="line"></span><br><span class="line">serial = rt_device_find(uart_name);</span><br></pre></td></tr></table></figure><h2 id="初始化设备">初始化设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：设备句柄</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_device_init</span><span class="params">(<span class="type">rt_device_t</span> dev)</span>;</span><br></pre></td></tr></table></figure><h2 id="打开设备">打开设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：设备句柄，oflags：设备打开模式标志</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_device_open</span><span class="params">(<span class="type">rt_device_t</span> dev, <span class="type">rt_uint16_t</span> oflag)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//oflags 支持以下的参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_OFLAG_CLOSE 0x000   <span class="comment">/* 设备已经关闭（内部使用）*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_OFLAG_RDONLY 0x001  <span class="comment">/* 以只读方式打开设备 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_OFLAG_WRONLY 0x002  <span class="comment">/* 以只写方式打开设备 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_OFLAG_RDWR 0x003    <span class="comment">/* 以读写方式打开设备 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_OFLAG_OPEN 0x008    <span class="comment">/* 设备已经打开（内部使用）*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_FLAG_STREAM 0x040   <span class="comment">/* 设备以流模式打开 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_FLAG_INT_RX 0x100   <span class="comment">/* 设备以中断接收模式打开 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_FLAG_DMA_RX 0x200   <span class="comment">/* 设备以 DMA 接收模式打开 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_FLAG_INT_TX 0x400   <span class="comment">/* 设备以中断发送模式打开 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_FLAG_DMA_TX 0x800   <span class="comment">/* 设备以 DMA 发送模式打开 */</span></span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以中断接收及轮询发送模式打开串口设备 */</span></span><br><span class="line">rt_device_open(serial, RT_DEVICE_FLAG_INT_RX);</span><br></pre></td></tr></table></figure><h2 id="数据收发回调">数据收发回调</h2><blockquote><p>定义：当硬件设备收到数据时，可以通过如下函数回调另一个函数来设置数据接收指示，通知上层应用线程有数据到达</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：设备句柄，rx_ind：回调函数的指针(参数由底层传参)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_device_set_rx_indicate</span><span class="params">(<span class="type">rt_device_t</span> dev,</span></span><br><span class="line"><span class="params">                                   <span class="type">rt_err_t</span> (*rx_ind)(<span class="type">rt_device_t</span> dev,</span></span><br><span class="line"><span class="params">                                   <span class="type">rt_size_t</span> size))</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 接收数据回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_err_t</span> <span class="title function_">uart_input</span><span class="params">(<span class="type">rt_device_t</span> dev, <span class="type">rt_size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 串口接收到数据后产生中断，调用此回调函数，然后发送接收信号量 */</span></span><br><span class="line">    rt_sem_release(&amp;rx_sem);</span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rt_device_set_rx_indicate(serial, uart_input);</span><br></pre></td></tr></table></figure><h2 id="关闭设备">关闭设备</h2><blockquote><p>定义：应用程序打开设备完成读写等操作后，如果不需要再对设备进行操作则可以关闭设备，通过如下函数完成</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：设备句柄</span></span><br><span class="line"><span class="comment">//返回值：RT_EOK：关闭设备成功</span></span><br><span class="line"><span class="comment">//-RT_ERROR：设备已经完全关闭，不能重复关闭设备，其他错误码：关闭设备失败</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_device_close</span><span class="params">(<span class="type">rt_device_t</span> dev)</span>;</span><br></pre></td></tr></table></figure><h2 id="控制设备">控制设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：设备句柄，指向要控制的定时器，cmd：用于控制设备命令，arg：cmd控制命令参数</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_device_control</span><span class="params">(<span class="type">rt_device_t</span> dev, <span class="type">rt_uint8_t</span> cmd, <span class="type">void</span>* arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_CTRL_RESUME           0x01   <span class="comment">/* 恢复设备 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_CTRL_SUSPEND          0x02   <span class="comment">/* 挂起设备 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_CTRL_CONFIG           0x03   <span class="comment">/* 配置设备 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_CTRL_SET_INT          0x10   <span class="comment">/* 设置中断 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_CTRL_CLR_INT          0x11   <span class="comment">/* 清中断 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RT_DEVICE_CTRL_GET_INT          0x12   <span class="comment">/* 获取中断状态 */</span></span></span><br></pre></td></tr></table></figure><h2 id="读写设备">读写设备</h2><p>读定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：设备句柄，pos：读取数据偏移量，size读取数据的大小</span></span><br><span class="line"><span class="comment">//buffer：内存缓冲区指针，读取的数据将会被保存在缓冲区中</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_size_t</span> <span class="title function_">rt_device_read</span><span class="params">(<span class="type">rt_device_t</span> dev, <span class="type">rt_off_t</span> pos,<span class="type">void</span>* buffer, <span class="type">rt_size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>读使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">rt_device_read(serial, <span class="number">-1</span>, &amp;ch, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>写定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：设备句柄，pos：写入数据偏移量</span></span><br><span class="line"><span class="comment">//buffer：内存缓冲区指针，放置要写入的数据，size：写入数据的大小</span></span><br><span class="line"><span class="comment">//返回：写入数据的实际大小(如果是字符设备，返回大小以字节为单位；如果是块设备，返回的大小以块为单位)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_ssize_t</span> <span class="title function_">rt_device_write</span><span class="params">(<span class="type">rt_device_t</span> dev,</span></span><br><span class="line"><span class="params">                          <span class="type">rt_off_t</span>    pos,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> <span class="type">void</span> *buffer,</span></span><br><span class="line"><span class="params">                          <span class="type">rt_size_t</span>   size)</span></span><br></pre></td></tr></table></figure><p>写使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;hello RT-Thread!\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">rt_device_write(serial, <span class="number">0</span>, str, (<span class="keyword">sizeof</span>(str) - <span class="number">1</span>));</span><br></pre></td></tr></table></figure><hr><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序清单：这是一个 串口 设备使用例程</span></span><br><span class="line"><span class="comment"> * 例程导出了 uart_sample 命令到控制终端</span></span><br><span class="line"><span class="comment"> * 命令调用格式：uart_sample uart2</span></span><br><span class="line"><span class="comment"> * 命令解释：命令第二个参数是要使用的串口设备名称，为空则使用默认的串口设备</span></span><br><span class="line"><span class="comment"> * 程序功能：通过串口输出字符串&quot;hello RT-Thread!&quot;，然后错位输出输入的字符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_UART_NAME       <span class="string">&quot;uart2&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用于接收消息的信号量 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">rt_semaphore</span> <span class="title">rx_sem</span>;</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_device_t</span> serial;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收数据回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_err_t</span> <span class="title function_">uart_input</span><span class="params">(<span class="type">rt_device_t</span> dev, <span class="type">rt_size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 串口接收到数据后产生中断，调用此回调函数，然后发送接收信号量 */</span></span><br><span class="line">    rt_sem_release(&amp;rx_sem);</span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">serial_thread_entry</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 从串口读取一个字节的数据，没有读取到则等待接收信号量 */</span></span><br><span class="line">        <span class="keyword">while</span> (rt_device_read(serial, <span class="number">-1</span>, &amp;ch, <span class="number">1</span>) != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 阻塞等待接收信号量，等到信号量后再次读取数据 */</span></span><br><span class="line">            rt_sem_take(&amp;rx_sem, RT_WAITING_FOREVER);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 读取到的数据通过串口错位输出 */</span></span><br><span class="line">        ch = ch + <span class="number">1</span>;</span><br><span class="line">        rt_device_write(serial, <span class="number">0</span>, &amp;ch, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_sample</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line">    <span class="type">char</span> uart_name[RT_NAME_MAX];</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;hello RT-Thread!\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_strncpy(uart_name, argv[<span class="number">1</span>], RT_NAME_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rt_strncpy(uart_name, SAMPLE_UART_NAME, RT_NAME_MAX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找系统中的串口设备 */</span></span><br><span class="line">    serial = rt_device_find(uart_name);</span><br><span class="line">    <span class="keyword">if</span> (!serial)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;find %s failed!\n&quot;</span>, uart_name);</span><br><span class="line">        <span class="keyword">return</span> RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化信号量 */</span></span><br><span class="line">    rt_sem_init(&amp;rx_sem, <span class="string">&quot;rx_sem&quot;</span>, <span class="number">0</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line">    <span class="comment">/* 以中断接收及轮询发送模式打开串口设备 */</span></span><br><span class="line">    rt_device_open(serial, RT_DEVICE_FLAG_INT_RX);</span><br><span class="line">    <span class="comment">/* 设置接收回调函数 */</span></span><br><span class="line">    rt_device_set_rx_indicate(serial, uart_input);</span><br><span class="line">    <span class="comment">/* 发送字符串 */</span></span><br><span class="line">    rt_device_write(serial, <span class="number">0</span>, str, (<span class="keyword">sizeof</span>(str) - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 serial 线程 */</span></span><br><span class="line">    <span class="type">rt_thread_t</span> thread = rt_thread_create(<span class="string">&quot;serial&quot;</span>, serial_thread_entry, RT_NULL, <span class="number">1024</span>, <span class="number">25</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">/* 创建成功则启动线程 */</span></span><br><span class="line">    <span class="keyword">if</span> (thread != RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_thread_startup(thread);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导出到 msh 命令列表中 */</span></span><br><span class="line">MSH_CMD_EXPORT(uart_sample, uart device sample);</span><br></pre></td></tr></table></figure><h2 id="uart-dma">UART_DMA</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_USING_UART3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_UART3_TX_PIN       <span class="string">&quot;PA10&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_UART3_RX_PIN       <span class="string">&quot;PA11&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_UART3_RX_USING_DMA</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序清单：这是一个串口设备 DMA 接收使用例程</span></span><br><span class="line"><span class="comment"> * 例程导出了 uart_dma_sample 命令到控制终端</span></span><br><span class="line"><span class="comment"> * 命令调用格式：uart_dma_sample uart3</span></span><br><span class="line"><span class="comment"> * 命令解释：命令第二个参数是要使用的串口设备名称，为空则使用默认的串口设备</span></span><br><span class="line"><span class="comment"> * 程序功能：通过串口输出字符串&quot;hello RT-Thread!&quot;，并通过串口输出接收到的数据，然后打印接收到的数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLE_UART_NAME       <span class="string">&quot;uart3&quot;</span>      <span class="comment">/* 串口设备名称 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 串口接收消息结构*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rx_msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">rt_device_t</span> dev;</span><br><span class="line">    <span class="type">rt_size_t</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 串口设备句柄 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_device_t</span> serial;</span><br><span class="line"><span class="comment">/* 消息队列控制块 */</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">rt_messagequeue</span> <span class="title">rx_mq</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收数据回调函数 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">rt_err_t</span> <span class="title function_">uart_input</span><span class="params">(<span class="type">rt_device_t</span> dev, <span class="type">rt_size_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rx_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">rt_err_t</span> result;</span><br><span class="line">    msg.dev = dev;</span><br><span class="line">    msg.size = size;</span><br><span class="line"></span><br><span class="line">    result = rt_mq_send(&amp;rx_mq, &amp;msg, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">    <span class="keyword">if</span> ( result == -RT_EFULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 消息队列满 */</span></span><br><span class="line">        rt_kprintf(<span class="string">&quot;message queue full！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">serial_thread_entry</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rx_msg</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="type">rt_err_t</span> result;</span><br><span class="line">    <span class="type">rt_uint32_t</span> rx_length;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> rx_buffer[RT_SERIAL_RB_BUFSZ + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_memset(&amp;msg, <span class="number">0</span>, <span class="keyword">sizeof</span>(msg));</span><br><span class="line">        <span class="comment">/* 从消息队列中读取消息*/</span></span><br><span class="line">        result = rt_mq_recv(&amp;rx_mq, &amp;msg, <span class="keyword">sizeof</span>(msg), RT_WAITING_FOREVER);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 从串口读取数据*/</span></span><br><span class="line">            rx_length = rt_device_read(msg.dev, <span class="number">0</span>, rx_buffer, msg.size);</span><br><span class="line">            rx_buffer[rx_length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="comment">/* 通过串口设备 serial 输出读取到的消息 */</span></span><br><span class="line">            rt_device_write(serial, <span class="number">0</span>, rx_buffer, rx_length);</span><br><span class="line">            <span class="comment">/* 打印数据 */</span></span><br><span class="line">            rt_kprintf(<span class="string">&quot;%s\n&quot;</span>,rx_buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">uart_dma_sample</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line">    <span class="type">char</span> uart_name[RT_NAME_MAX];</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> msg_pool[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;hello RT-Thread!\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_strncpy(uart_name, argv[<span class="number">1</span>], RT_NAME_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rt_strncpy(uart_name, SAMPLE_UART_NAME, RT_NAME_MAX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找串口设备 */</span></span><br><span class="line">    serial = rt_device_find(uart_name);</span><br><span class="line">    <span class="keyword">if</span> (!serial)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;find %s failed!\n&quot;</span>, uart_name);</span><br><span class="line">        <span class="keyword">return</span> RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 初始化消息队列 */</span></span><br><span class="line">    rt_mq_init(&amp;rx_mq, <span class="string">&quot;rx_mq&quot;</span>,</span><br><span class="line">               msg_pool,                 <span class="comment">/* 存放消息的缓冲区 */</span></span><br><span class="line">               <span class="keyword">sizeof</span>(<span class="keyword">struct</span> rx_msg),    <span class="comment">/* 一条消息的最大长度 */</span></span><br><span class="line">               <span class="keyword">sizeof</span>(msg_pool),         <span class="comment">/* 存放消息的缓冲区大小 */</span></span><br><span class="line">               RT_IPC_FLAG_FIFO);        <span class="comment">/* 如果有多个线程等待，按照先来先得到的方法分配消息 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 以 DMA 接收及轮询发送方式打开串口设备 */</span></span><br><span class="line">    rt_device_open(serial, RT_DEVICE_FLAG_DMA_RX);</span><br><span class="line">    <span class="comment">/* 设置接收回调函数 */</span></span><br><span class="line">    rt_device_set_rx_indicate(serial, uart_input);</span><br><span class="line">    <span class="comment">/* 发送字符串 */</span></span><br><span class="line">    rt_device_write(serial, <span class="number">0</span>, str, (<span class="keyword">sizeof</span>(str) - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建 serial 线程 */</span></span><br><span class="line">    <span class="type">rt_thread_t</span> thread = rt_thread_create(<span class="string">&quot;serial&quot;</span>, serial_thread_entry, RT_NULL, <span class="number">1024</span>, <span class="number">25</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">/* 创建成功则启动线程 */</span></span><br><span class="line">    <span class="keyword">if</span> (thread != RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_thread_startup(thread);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ret = RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导出到 msh 命令列表中 */</span></span><br><span class="line">MSH_CMD_EXPORT(uart_dma_sample, uart device dma sample);</span><br></pre></td></tr></table></figure><h1><center>PIN</center></h1><h2 id="获取引脚编号">获取引脚编号</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_base_t</span> <span class="title function_">rt_pin_get</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pin_number = rt_pin_get(<span class="string">&quot;PF.9&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="设置引脚模式">设置引脚模式</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pin：引脚编号，mode：引脚工作模式</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rt_pin_mode</span><span class="params">(<span class="type">rt_base_t</span> pin, <span class="type">rt_uint8_t</span> mode)</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_MODE_OUTPUT 0x00            <span class="comment">/* 输出 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_MODE_INPUT 0x01             <span class="comment">/* 输入 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_MODE_INPUT_PULLUP 0x02      <span class="comment">/* 上拉输入 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_MODE_INPUT_PULLDOWN 0x03    <span class="comment">/* 下拉输入 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_MODE_OUTPUT_OD 0x04         <span class="comment">/* 开漏输出 */</span></span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BEEP_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> BEEP_PIN_NUM            24  <span class="comment">/* PB8 */</span></span></span><br><span class="line"></span><br><span class="line">rt_pin_mode(BEEP_PIN_NUM, PIN_MODE_OUTPUT);</span><br></pre></td></tr></table></figure><h2 id="设置引脚电平">设置引脚电平</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pin：引脚编号，value：电平逻辑值，PIN_LOW 低电平，PIN_HIGH 高电平</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rt_pin_write</span><span class="params">(<span class="type">rt_base_t</span> pin, <span class="type">rt_base_t</span> value)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BEEP_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> BEEP_PIN_NUM            24  <span class="comment">/* PB8 */</span></span></span><br><span class="line"></span><br><span class="line">rt_pin_write(BEEP_PIN_NUM, PIN_LOW);</span><br></pre></td></tr></table></figure><h2 id="读取引脚电平">读取引脚电平</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pin：引脚编号</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_ssize_t</span> <span class="title function_">rt_pin_read</span><span class="params">(<span class="type">rt_base_t</span> pin)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BEEP_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> BEEP_PIN_NUM            24  <span class="comment">/* PB8 */</span></span></span><br><span class="line"><span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">status = rt_pin_read(BEEP_PIN_NUM);</span><br></pre></td></tr></table></figure><h2 id="绑定引脚中断回调函数">绑定引脚中断回调函数</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pin：引脚编号，mode：中断触发模式，hdr：中断回调函数</span></span><br><span class="line"><span class="comment">//args：中断回调函数的参数，不需要时设置为 RT_NULL</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_pin_attach_irq</span><span class="params">(<span class="type">rt_int32_t</span> pin, <span class="type">rt_uint32_t</span> mode,</span></span><br><span class="line"><span class="params">                           <span class="type">void</span> (*hdr)(<span class="type">void</span> *args), <span class="type">void</span> *args)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_IRQ_MODE_RISING 0x00         <span class="comment">/* 上升沿触发 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_IRQ_MODE_FALLING 0x01        <span class="comment">/* 下降沿触发 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_IRQ_MODE_RISING_FALLING 0x02 <span class="comment">/* 边沿触发（上升沿和下降沿都触发）*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_IRQ_MODE_HIGH_LEVEL 0x03     <span class="comment">/* 高电平触发 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIN_IRQ_MODE_LOW_LEVEL 0x04      <span class="comment">/* 低电平触发 */</span></span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> KEY0_PIN_NUM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_PIN_NUM            66  <span class="comment">/* PE2 */</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_on</span><span class="params">(<span class="type">void</span> *args)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;turn on beep!\n&quot;</span>);</span><br><span class="line">    rt_pin_write(BEEP_PIN_NUM, PIN_HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rt_pin_attach_irq(KEY0_PIN_NUM, PIN_IRQ_MODE_FALLING, beep_on, RT_NULL);</span><br></pre></td></tr></table></figure><h2 id="使能引脚中断">使能引脚中断</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pin：引脚编号，enabled：状态，PIN_IRQ_ENABLE（开启）PIN_IRQ_DISABLE（关闭）</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_pin_irq_enable</span><span class="params">(<span class="type">rt_base_t</span> pin, <span class="type">rt_uint8_t</span> enabled)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> KEY0_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> KEY0_PIN_NUM            66  <span class="comment">/* PE2 */</span></span></span><br><span class="line"></span><br><span class="line">rt_pin_irq_enable(KEY0_PIN_NUM, PIN_IRQ_ENABLE);</span><br></pre></td></tr></table></figure><h2 id="脱离引脚中断回调函数">脱离引脚中断回调函数</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pin：引脚编号</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_pin_detach_irq</span><span class="params">(<span class="type">rt_int32_t</span> pin)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> KEY0_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> KEY0_PIN_NUM            66  <span class="comment">/* PE2 */</span></span></span><br><span class="line"></span><br><span class="line">rt_pin_detach_irq(KEY0_PIN_NUM);</span><br></pre></td></tr></table></figure><hr><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序清单：这是一个 PIN 设备使用例程</span></span><br><span class="line"><span class="comment"> * 例程导出了 pin_beep_sample 命令到控制终端</span></span><br><span class="line"><span class="comment"> * 命令调用格式：pin_beep_sample</span></span><br><span class="line"><span class="comment"> * 程序功能：通过按键控制蜂鸣器对应引脚的电平状态控制蜂鸣器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtdevice.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引脚编号，通过查看设备驱动文件drv_gpio.c确定 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BEEP_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> BEEP_PIN_NUM            24  <span class="comment">/* PB8 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> KEY0_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> KEY0_PIN_NUM            66  <span class="comment">/* PE2 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> KEY1_PIN_NUM</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> KEY1_PIN_NUM            67  <span class="comment">/* PE3 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_on</span><span class="params">(<span class="type">void</span> *args)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;turn on beep!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    rt_pin_write(BEEP_PIN_NUM, PIN_HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">beep_off</span><span class="params">(<span class="type">void</span> *args)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;turn off beep!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    rt_pin_write(BEEP_PIN_NUM, PIN_LOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pin_beep_sample</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 蜂鸣器引脚为输出模式 */</span></span><br><span class="line">    rt_pin_mode(BEEP_PIN_NUM, PIN_MODE_OUTPUT);</span><br><span class="line">    <span class="comment">/* 默认低电平 */</span></span><br><span class="line">    rt_pin_write(BEEP_PIN_NUM, PIN_LOW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 按键0引脚为输入模式 */</span></span><br><span class="line">    rt_pin_mode(KEY0_PIN_NUM, PIN_MODE_INPUT_PULLUP);</span><br><span class="line">    <span class="comment">/* 绑定中断，下降沿模式，回调函数名为beep_on */</span></span><br><span class="line">    rt_pin_attach_irq(KEY0_PIN_NUM, PIN_IRQ_MODE_FALLING, beep_on, RT_NULL);</span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    rt_pin_irq_enable(KEY0_PIN_NUM, PIN_IRQ_ENABLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 按键1引脚为输入模式 */</span></span><br><span class="line">    rt_pin_mode(KEY1_PIN_NUM, PIN_MODE_INPUT_PULLUP);</span><br><span class="line">    <span class="comment">/* 绑定中断，下降沿模式，回调函数名为beep_off */</span></span><br><span class="line">    rt_pin_attach_irq(KEY1_PIN_NUM, PIN_IRQ_MODE_FALLING, beep_off, RT_NULL);</span><br><span class="line">    <span class="comment">/* 使能中断 */</span></span><br><span class="line">    rt_pin_irq_enable(KEY1_PIN_NUM, PIN_IRQ_ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导出到 msh 命令列表中 */</span></span><br><span class="line">MSH_CMD_EXPORT(pin_beep_sample, pin beep sample);</span><br></pre></td></tr></table></figure><h1><center>ADC</center></h1><p>模拟信号转换为数字信号</p><p>按照图中指示开启ADC，按<code>ctrl+s</code>保存</p><img src="https://s2.loli.net/2024/09/27/fAgwIQcXm8VHz2x.webp" alt="开启ADC" style="zoom:40%;"><p>在<code>board.h</code>文件中寻找ADC配置(182)，按照注释给出的步骤进行配置</p><img src="https://s2.loli.net/2024/09/27/exARaK6l4IqFUTJ.webp" alt="CubeMx配置ADC" style="zoom:40%;"><h2 id="查找adc设备">查找ADC设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name：ADC 设备名称，返回值：设备句柄</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_device_t</span> <span class="title function_">rt_device_find</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_adc_device_t</span> adc_dev;</span><br><span class="line"></span><br><span class="line">adc_dev = (<span class="type">rt_adc_device_t</span>)rt_device_find(ADC_DEV_NAME);</span><br></pre></td></tr></table></figure><h2 id="使能adc通道">使能ADC通道</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：ADC 设备句柄，channel：ADC 通道</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_adc_enable</span><span class="params">(<span class="type">rt_adc_device_t</span> dev, <span class="type">rt_uint32_t</span> channel)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_DEV_CHANNEL     5           <span class="comment">/* ADC 通道 */</span></span></span><br><span class="line"><span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line"></span><br><span class="line">ret = rt_adc_enable(adc_dev, ADC_DEV_CHANNEL);</span><br></pre></td></tr></table></figure><h2 id="读取adc通道采样值">读取ADC通道采样值</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：ADC 设备句柄，channel：ADC 通道</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_uint32_t</span> <span class="title function_">rt_adc_read</span><span class="params">(<span class="type">rt_adc_device_t</span> dev, <span class="type">rt_uint32_t</span> channel)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_uint32_t</span> value;</span><br><span class="line"></span><br><span class="line">value = rt_adc_read(adc_dev, ADC_DEV_CHANNEL);</span><br></pre></td></tr></table></figure><h2 id="关闭adc通道">关闭ADC通道</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dev：ADC 设备句柄，channel：ADC 通道</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_adc_disable</span><span class="params">(<span class="type">rt_adc_device_t</span> dev, <span class="type">rt_uint32_t</span> channel)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_DEV_CHANNEL     5           <span class="comment">/* ADC 通道 */</span></span></span><br><span class="line"><span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line"></span><br><span class="line">ret = rt_adc_disable(adc_dev, ADC_DEV_CHANNEL);</span><br></pre></td></tr></table></figure><hr><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序清单： ADC 设备使用例程</span></span><br><span class="line"><span class="comment"> * 例程导出了 adc_sample 命令到控制终端</span></span><br><span class="line"><span class="comment"> * 命令调用格式：adc_sample</span></span><br><span class="line"><span class="comment"> * 程序功能：通过 ADC 设备采样电压值并转换为数值。</span></span><br><span class="line"><span class="comment"> *           示例代码参考电压为3.3V,转换位数为12位。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtdevice.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_DEV_NAME        <span class="string">&quot;adc1&quot;</span>      <span class="comment">/* ADC 设备名称 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADC_DEV_CHANNEL     5           <span class="comment">/* ADC 通道 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REFER_VOLTAGE       330         <span class="comment">/* 参考电压 3.3V,数据精度乘以100保留2位小数*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONVERT_BITS        (1 &lt;&lt; 12)   <span class="comment">/* 转换位数为12位 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">adc_vol_sample</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_adc_device_t</span> adc_dev;</span><br><span class="line">    <span class="type">rt_uint32_t</span> value, vol;</span><br><span class="line">    <span class="type">rt_err_t</span> ret = RT_EOK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找设备 */</span></span><br><span class="line">    adc_dev = (<span class="type">rt_adc_device_t</span>)rt_device_find(ADC_DEV_NAME);</span><br><span class="line">    <span class="keyword">if</span> (adc_dev == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;adc sample run failed! can&#x27;t find %s device!\n&quot;</span>, ADC_DEV_NAME);</span><br><span class="line">        <span class="keyword">return</span> RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使能设备 */</span></span><br><span class="line">    ret = rt_adc_enable(adc_dev, ADC_DEV_CHANNEL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 读取采样值 */</span></span><br><span class="line">    value = rt_adc_read(adc_dev, ADC_DEV_CHANNEL);</span><br><span class="line">    rt_kprintf(<span class="string">&quot;the value is :%d \n&quot;</span>, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 转换为对应电压值 */</span></span><br><span class="line">    vol = value * REFER_VOLTAGE / CONVERT_BITS;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;the voltage is :%d.%02d \n&quot;</span>, vol / <span class="number">100</span>, vol % <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 关闭通道 */</span></span><br><span class="line">    ret = rt_adc_disable(adc_dev, ADC_DEV_CHANNEL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导出到 msh 命令列表中 */</span></span><br><span class="line">MSH_CMD_EXPORT(adc_vol_sample, adc voltage convert sample);</span><br></pre></td></tr></table></figure><h1><center>PWM</center></h1><p>按照图中指示开启PWM，按<code>ctrl+s</code>保存</p><img src="https://s2.loli.net/2024/09/27/wsQNnuLSI4Z3WPi.webp" alt="开启PWM" style="zoom:40%;"><p>在<code>board.h</code>文件中寻找PWM配置(158)，按照注释给出的步骤进行配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_USING_PWM3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BSP_USING_PWM3_CH4<span class="comment">//没说说明但要添加,通道4</span></span></span><br></pre></td></tr></table></figure><h2 id="查找pwm设备">查找PWM设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name：设备名称，返回：查找到对应设备将返回相应的设备句柄</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_device_t</span> <span class="title function_">rt_device_find</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PWM_DEV_NAME        <span class="string">&quot;pwm3&quot;</span>  <span class="comment">/* PWM设备名称 */</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_device_pwm</span> *<span class="title">pwm_dev</span>;</span>      <span class="comment">/* PWM设备句柄 */</span></span><br><span class="line"></span><br><span class="line">pwm_dev = (<span class="keyword">struct</span> rt_device_pwm *)rt_device_find(PWM_DEV_NAME);</span><br><span class="line"><span class="keyword">if</span> (pwm_dev == RT_NULL)</span><br><span class="line">&#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;pwm sample run failed! can&#x27;t find %s device!\n&quot;</span>, PWM_DEV_NAME);</span><br><span class="line">    <span class="keyword">return</span> RT_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置-pwm-周期和脉冲宽度">设置 PWM 周期和脉冲宽度</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//device：PWM 设备句柄，channel：PWM 通道</span></span><br><span class="line"><span class="comment">//period：PWM 周期时间 (单位纳秒 ns)，pulse：PWM 脉冲宽度时间 (单位纳秒 ns)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_pwm_set</span><span class="params">(<span class="keyword">struct</span> rt_device_pwm *device,</span></span><br><span class="line"><span class="params">                    <span class="type">int</span> channel,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_uint32_t</span> period,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_uint32_t</span> pulse)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PWM_DEV_CHANNEL     4       <span class="comment">/* PWM通道 */</span></span></span><br><span class="line">period = <span class="number">500000</span>;    <span class="comment">/* 周期为0.5ms，单位为纳秒ns */</span></span><br><span class="line">pulse = <span class="number">0</span>;          <span class="comment">/* PWM脉冲宽度值，单位为纳秒ns */</span></span><br><span class="line"></span><br><span class="line">rt_pwm_set(pwm_dev, PWM_DEV_CHANNEL, period, pulse);</span><br></pre></td></tr></table></figure><h2 id="使能-pwm-设备">使能 PWM 设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//device：PWM 设备句柄，channel：PWM 通道 -channel代表互补通道</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_pwm_enable</span><span class="params">(<span class="keyword">struct</span> rt_device_pwm *device, <span class="type">int</span> channel)</span>;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PWM_DEV_CHANNEL     4       <span class="comment">/* PWM通道 */</span></span></span><br><span class="line"></span><br><span class="line">rt_pwm_enable(pwm_dev, PWM_DEV_CHANNEL);</span><br></pre></td></tr></table></figure><h2 id="关闭-pwm-设备">关闭 PWM 设备</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//device：PWM 设备句柄，channel：PWM 通道</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_pwm_disable</span><span class="params">(<span class="keyword">struct</span> rt_device_pwm *device, <span class="type">int</span> channel)</span>;</span><br></pre></td></tr></table></figure><hr><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 程序清单：这是一个 PWM 设备使用例程</span></span><br><span class="line"><span class="comment"> * 例程导出了 pwm_led_sample 命令到控制终端</span></span><br><span class="line"><span class="comment"> * 命令调用格式：pwm_led_sample</span></span><br><span class="line"><span class="comment"> * 程序功能：通过 PWM 设备控制 LED 灯的亮度，可以看到LED不停的由暗变到亮，然后又从亮变到暗。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtdevice.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PWM_DEV_NAME        <span class="string">&quot;pwm3&quot;</span>  <span class="comment">/* PWM设备名称 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PWM_DEV_CHANNEL     4       <span class="comment">/* PWM通道 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_device_pwm</span> *<span class="title">pwm_dev</span>;</span>      <span class="comment">/* PWM设备句柄 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pwm_led_sample</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">rt_uint32_t</span> period, pulse, dir;</span><br><span class="line"></span><br><span class="line">    period = <span class="number">500000</span>;    <span class="comment">/* 周期为0.5ms，单位为纳秒ns */</span></span><br><span class="line">    dir = <span class="number">1</span>;            <span class="comment">/* PWM脉冲宽度值的增减方向 */</span></span><br><span class="line">    pulse = <span class="number">0</span>;          <span class="comment">/* PWM脉冲宽度值，单位为纳秒ns */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查找设备 */</span></span><br><span class="line">    pwm_dev = (<span class="keyword">struct</span> rt_device_pwm *)rt_device_find(PWM_DEV_NAME);</span><br><span class="line">    <span class="keyword">if</span> (pwm_dev == RT_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_kprintf(<span class="string">&quot;pwm sample run failed! can&#x27;t find %s device!\n&quot;</span>, PWM_DEV_NAME);</span><br><span class="line">        <span class="keyword">return</span> RT_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置PWM周期和脉冲宽度默认值 */</span></span><br><span class="line">    rt_pwm_set(pwm_dev, PWM_DEV_CHANNEL, period, pulse);</span><br><span class="line">    <span class="comment">/* 使能设备 */</span></span><br><span class="line">    rt_pwm_enable(pwm_dev, PWM_DEV_CHANNEL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rt_thread_mdelay(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">if</span> (dir)</span><br><span class="line">        &#123;</span><br><span class="line">            pulse += <span class="number">5000</span>;      <span class="comment">/* 从0值开始每次增加5000ns */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pulse -= <span class="number">5000</span>;      <span class="comment">/* 从最大值开始每次减少5000ns */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pulse &gt;= period)</span><br><span class="line">        &#123;</span><br><span class="line">            dir = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == pulse)</span><br><span class="line">        &#123;</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置PWM周期和脉冲宽度 */</span></span><br><span class="line">        rt_pwm_set(pwm_dev, PWM_DEV_CHANNEL, period, pulse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 导出到 msh 命令列表中 */</span></span><br><span class="line">MSH_CMD_EXPORT(pwm_led_sample, pwm sample);</span><br></pre></td></tr></table></figure><h1><center>IIC</center></h1><p>添加软件包，按<code>ctrl+s</code>保存</p><img src="https://s2.loli.net/2024/09/27/jgexEfpCWMaDPto.webp" alt="添加软件包" style="zoom:35%;"><p>添加文件：GY906.c、GY906.h、oled_config.c、oled_config.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改main.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG_TAG <span class="string">&quot;main&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DBG_LVL DBG_LOG</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rtdbg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled_config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GY906.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义一个变量保存温度值</span></span><br><span class="line">    <span class="type">float</span> temp;</span><br><span class="line">    DisplayCfg_Init();  <span class="comment">//oled初始化</span></span><br><span class="line">    GY906_Init();   <span class="comment">//温度模块初始化</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = SMBus_ReadTemp();</span><br><span class="line">        Display_normal(temp); <span class="comment">//显示温度</span></span><br><span class="line">        rt_thread_mdelay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;I/O设备模型框架&lt;/center&gt;&lt;/h1&gt;
&lt;p&gt;RT-Thread 提供了一套简单的 I/O 设备模型框架，如下图所示，它位于硬件和应用程序之间，共分成三层，从上到下分别是 I/O 设备管理层、设备驱动框架层、设备驱动层&lt;/p&gt;
&lt;img src=&quot;</summary>
      
    
    
    
    <category term="RT-Thread" scheme="https://xinzaigeek.68565200.xyz/categories/RT-Thread/"/>
    
    
    <category term="RT-Thread" scheme="https://xinzaigeek.68565200.xyz/tags/RT-Thread/"/>
    
  </entry>
  
  <entry>
    <title>4.时钟</title>
    <link href="https://xinzaigeek.68565200.xyz/post/e5f15f94.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/e5f15f94.html</id>
    <published>2024-09-20T14:27:49.000Z</published>
    <updated>2024-10-03T01:44:28.173Z</updated>
    
    <content type="html"><![CDATA[<h1><center>时钟源修改</center></h1><p>进入CubeMx设置</p><img src="https://s2.loli.net/2024/09/21/uk7vCIMsmXBld53.webp" alt="进入CubeMx" style="zoom:40%;"><p>按照循序进行时钟源修改，修改完成后按<code>GENERATE CODE</code></p><img src="https://s2.loli.net/2024/09/21/AZrbiLB4m2aFuSC.webp" alt="修改" style="zoom:40%;"><p>重新配置串口1（不然报错）</p><img src="https://s2.loli.net/2024/09/21/8zYOCZk7ijGrARB.webp" alt="配置串口1" style="zoom:40%;"><h1><center>时钟节拍</center></h1><blockquote><p>获取方法</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义，返回：当前时钟节拍值</span></span><br><span class="line"><span class="type">rt_tick_t</span> <span class="title function_">rt_tick_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="title function_">rt_kprintf</span><span class="params">(<span class="string">&quot;rt_tick is %u\r\n&quot;</span>, rt_tick_get())</span>;</span><br></pre></td></tr></table></figure><h1><center>定时器</center></h1><h2 id="创建">创建</h2><blockquote><p>动态：rt_timer_create</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name：定时器名称，void *parameter：定时器超时后调用的回调函数的指针</span></span><br><span class="line"><span class="comment">//parameter：超时后调用的函数的参数，time：定时器的超时时间，单位是时钟节拍</span></span><br><span class="line"><span class="comment">//flag：定时器创建时的参数(可以用 “或” 关系取多个值)</span></span><br><span class="line"><span class="comment">//RT_TIMER_FLAG_ONE_SHOT：单次定时，RT_TIMER_FLAG_PERIODIC：循环定时</span></span><br><span class="line"><span class="comment">//RT_TIMER_FLAG_HARD_TIMER：硬件定时器，RT_TIMER_FLAG_SOFT_TIMER：软件定时器</span></span><br><span class="line"><span class="comment">//RT_TIMER_FLAG_THREAD_TIMER：线程定时器</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_timer_t</span> <span class="title function_">rt_timer_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name,</span></span><br><span class="line"><span class="params">                           <span class="type">void</span> (*timeout)(<span class="type">void</span> *parameter),</span></span><br><span class="line"><span class="params">                           <span class="type">void</span>       *parameter,</span></span><br><span class="line"><span class="params">                           <span class="type">rt_tick_t</span>   time,</span></span><br><span class="line"><span class="params">                           <span class="type">rt_uint8_t</span>  flag)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_timer_t</span> timer_ptr;</span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_callback</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    LOG_D(<span class="string">&quot;time runing\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">timer_ptr = rt_timer_create(<span class="string">&quot;timer&quot;</span>,</span><br><span class="line">                            timer_callback,</span><br><span class="line">                            RT_NULL, <span class="number">1000</span>,</span><br><span class="line">                            RT_TIMER_FLAG_PERIODIC|RT_TIMER_FLAG_SOFT_TIMER);</span><br><span class="line"><span class="keyword">if</span>(timer_ptr == RT_NULL)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;timer_ptr rt_timer_create failed!\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -RT_ENOMEM;  <span class="comment">//RT_ENOMEM：12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态：rt_timer_init</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//timer：定时器句柄，指向要删除的定时器，void *parameter：定时器超时后调用的回调函数的指针</span></span><br><span class="line"><span class="comment">//parameter：超时后调用的函数的参数，time：定时器的超时时间，单位是时钟节拍</span></span><br><span class="line"><span class="comment">//flag：定时器创建时的参数(可以用 “或” 关系取多个值)</span></span><br><span class="line"><span class="comment">//RT_TIMER_FLAG_ONE_SHOT：单次定时，RT_TIMER_FLAG_PERIODIC：循环定时</span></span><br><span class="line"><span class="comment">//RT_TIMER_FLAG_HARD_TIMER：硬件定时器，RT_TIMER_FLAG_SOFT_TIMER：软件定时器</span></span><br><span class="line"><span class="comment">//RT_TIMER_FLAG_THREAD_TIMER：线程定时器</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rt_timer_init</span><span class="params">(<span class="type">rt_timer_t</span>  timer,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="type">char</span> *name,</span></span><br><span class="line"><span class="params">                   <span class="type">void</span> (*timeout)(<span class="type">void</span> *parameter),</span></span><br><span class="line"><span class="params">                   <span class="type">void</span>       *parameter,</span></span><br><span class="line"><span class="params">                   <span class="type">rt_tick_t</span>   time,</span></span><br><span class="line"><span class="params">                   <span class="type">rt_uint8_t</span>  flag)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_timer</span> <span class="title">timer_ptr</span>;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_callback</span><span class="params">(<span class="type">void</span> *parameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;rt_tick is %u\r\n&quot;</span>, rt_tick_get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rt_timer_init(&amp;timer_ptr,<span class="string">&quot;timer&quot;</span>,timer_callback,RT_NULL, <span class="number">400</span>,RT_TIMER_FLAG_PERIODIC|RT_TIMER_FLAG_SOFT_TIMER);</span><br></pre></td></tr></table></figure><h2 id="删除">删除</h2><blockquote><p>动态：rt_timer_delete</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//timer：定时器句柄，指向要删除的定时器</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_timer_delete</span><span class="params">(<span class="type">rt_timer_t</span> timer)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_timer_delete(timer_ptr);</span><br></pre></td></tr></table></figure><blockquote><p>静态：rt_timer_detach</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//timer：定时器句柄，指向要删除的定时器</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_timer_detach</span><span class="params">(<span class="type">rt_timer_t</span> timer)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_timer_detach(&amp;timer_ptr);</span><br></pre></td></tr></table></figure><h2 id="启动">启动</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//timer：定时器句柄，指向要启动的定时器</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_timer_start</span><span class="params">(<span class="type">rt_timer_t</span> timer)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_timer_start(timer_ptr);</span><br></pre></td></tr></table></figure><h2 id="停止">停止</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//timer：定时器句柄，指向要停止的定时器</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_timer_stop</span><span class="params">(<span class="type">rt_timer_t</span> timer)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_timer_stop(&amp;timer_ptr);</span><br></pre></td></tr></table></figure><h2 id="定时器控制">定时器控制</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//timer：定时器句柄，指向要控制的定时器，cmd：用于控制定时器的命令，arg：cmd控制命令参数</span></span><br><span class="line"><span class="comment">//RT_TIMER_CTRL_GET_TIME：获取定时器超时时间，RT_TIMER_CTRL_SET_TIME：设置定时器超时时间</span></span><br><span class="line"><span class="comment">//RT_TIMER_CTRL_SET_ONESHOT：设置定时器为单次触发模式，RT_TIMER_CTRL_SET_PERIODIC：设置定时器为周期触发模式</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_timer_control</span><span class="params">(<span class="type">rt_timer_t</span> timer, <span class="type">int</span> cmd, <span class="type">void</span> *arg)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> timeout_value=<span class="number">0</span>;</span><br><span class="line">rt_timer_control(timer_ptr, RT_TIMER_CTRL_SET_TIME, &amp;timeout_value);</span><br></pre></td></tr></table></figure><h2 id="高精度延时">高精度延时</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//us：需要延迟的时间(us)</span></span><br><span class="line"><span class="comment">//时间长度要小于一个tick(1ms==1000)，不会挂起，不会让出CPU</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rt_hw_us_delay</span><span class="params">(<span class="type">rt_uint32_t</span> us)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_hw_us_delay(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;时钟源修改&lt;/center&gt;&lt;/h1&gt;
&lt;p&gt;进入CubeMx设置&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/09/21/uk7vCIMsmXBld53.webp&quot; alt=&quot;进入CubeMx&quot; style=&quot;zoom:</summary>
      
    
    
    
    <category term="RT-Thread" scheme="https://xinzaigeek.68565200.xyz/categories/RT-Thread/"/>
    
    
    <category term="RT-Thread" scheme="https://xinzaigeek.68565200.xyz/tags/RT-Thread/"/>
    
  </entry>
  
  <entry>
    <title>3.线程间通信</title>
    <link href="https://xinzaigeek.68565200.xyz/post/49f85af0.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/49f85af0.html</id>
    <published>2024-09-17T06:23:59.000Z</published>
    <updated>2024-10-03T01:43:56.790Z</updated>
    
    <content type="html"><![CDATA[<h1><center>邮箱</center></h1><blockquote><p>开销比较低，效率比较高，邮箱中的每一封邮件只能容纳固定的 4 字节内容(也可以是指针)</p><p>一个线程能够从任意一个邮箱接收和发送邮件</p><p>多个线程能够向同一个邮箱发送邮件和从中接收邮件</p></blockquote><h2 id="创建">创建</h2><blockquote><p>动态：rt_mb_create</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name：邮箱名，size：邮箱能存的邮件数，flag：多个线程等待的排队方式</span></span><br><span class="line"><span class="comment">//(RT_IPC_FLAG_PRIO：挂起的线程按照优先级顺序排队，RT_IPC_FLAG_FIFO：挂起的线程线程先进入先运行)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_mailbox_t</span> <span class="title function_">rt_mb_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">rt_size_t</span> size, <span class="type">rt_uint8_t</span> flag)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回值：</span></span><br><span class="line"><span class="comment">//    创建成功：邮箱控制块的指针</span></span><br><span class="line"><span class="comment">//    创建失败：返回RT_NULL</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_mailbox_t</span> mb_ptr;</span><br><span class="line"></span><br><span class="line">mb_ptr = rt_mb_create(<span class="string">&quot;mb&quot;</span>, <span class="number">4</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line"><span class="keyword">if</span>(mb_ptr == RT_NULL)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;mb_ptr rt_mb_create failed!\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -RT_ENOMEM;  <span class="comment">//RT_ENOMEM：12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态：rt_mb_init</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mb：邮箱控制块的指针，name：邮箱名，邮箱缓冲区的指针，用于存放邮件的内存区域</span></span><br><span class="line"><span class="comment">//size：邮箱能存的邮件数，flag：多个线程等待的排队方式</span></span><br><span class="line"><span class="comment">//(RT_IPC_FLAG_PRIO：挂起的线程按照优先级顺序排队，RT_IPC_FLAG_FIFO：挂起的线程线程先进入先运行)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mb_init</span><span class="params">(<span class="type">rt_mailbox_t</span> mb,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="type">char</span>  *name,</span></span><br><span class="line"><span class="params">                    <span class="type">void</span>        *msgpool,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_size_t</span>    size,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_uint8_t</span>   flag)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rt_mailbox</span> <span class="title">mb1_ptr</span>;</span></span><br><span class="line"><span class="type">rt_err_t</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *pool = <span class="built_in">malloc</span>(<span class="number">1024</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">ret = rt_mb_init(&amp;mb1_ptr, <span class="string">&quot;mb&quot;</span>, pool, <span class="number">4</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line"><span class="keyword">if</span>(ret != RT_EOK)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;mb1_ptr rt_mb_init failed!\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -RT_ENOMEM;  <span class="comment">//RT_ENOMEM：12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送">发送</h2><blockquote><p>rt_mb_send</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mb：要发送的邮箱对象的指针，value：要发送的邮件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mb_send</span><span class="params">(<span class="type">rt_mailbox_t</span> mb, <span class="type">rt_ubase_t</span> value)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="type">rt_err_t</span> ret;</span><br><span class="line"></span><br><span class="line">ret = rt_mb_send(mb_ptr, str1);</span><br><span class="line"><span class="keyword">if</span> (ret != RT_EOK) &#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;ret rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = rt_mb_send(&amp;mb1_ptr, str1);<span class="comment">//静态创建的发送</span></span><br></pre></td></tr></table></figure><blockquote><p>rt_mb_urgent：发送紧急邮件</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mb：要发送的邮箱对象的指针，value：要发送的邮件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mb_urgent</span><span class="params">(<span class="type">rt_mailbox_t</span> mb, <span class="type">rt_ubase_t</span> value)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line"><span class="type">rt_err_t</span> ret;</span><br><span class="line"></span><br><span class="line">ret = rt_mb_urgent(mb_ptr, str1);</span><br><span class="line"><span class="keyword">if</span> (ret != RT_EOK) &#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;ret rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = rt_mb_urgent(&amp;mb1_ptr, str1);<span class="comment">//静态创建的发送</span></span><br></pre></td></tr></table></figure><h2 id="接收">接收</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mb：要发送的邮箱对象的指针，value：接收邮件数据的变量地址</span></span><br><span class="line"><span class="comment">//timeout：RT_WAITING_FOREVER(阻塞)、RT_WAITING_NO(非阻塞)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mb_recv</span><span class="params">(<span class="type">rt_mailbox_t</span> mb, <span class="type">rt_ubase_t</span> *value, <span class="type">rt_int32_t</span> timeout)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> ret;</span><br><span class="line"><span class="type">char</span> *recv_str;</span><br><span class="line"></span><br><span class="line">ret = rt_mb_recv(mb_ptr, &amp;recv_str, RT_WAITING_FOREVER);</span><br><span class="line"><span class="keyword">if</span> (ret == RT_EOK) &#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;rt_mb_recv is %s\r\n&quot;</span>, recv_str);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;ret rt_mb_recv failed!\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = rt_mb_recv(&amp;mb1_ptr, &amp;recv_str, RT_WAITING_FOREVER);<span class="comment">//静态创建的接收</span></span><br></pre></td></tr></table></figure><h2 id="删除">删除</h2><blockquote><p>动态：rt_mb_delete</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mb：邮箱控制块的指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mb_delete</span><span class="params">(<span class="type">rt_mailbox_t</span> mb)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_mb_delete(mb_ptr);</span><br></pre></td></tr></table></figure><blockquote><p>静态：rt_mb_detach</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mb：邮箱控制块的指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mb_detach</span><span class="params">(<span class="type">rt_mailbox_t</span> mb)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_mb_detach(&amp;mb1_ptr);</span><br></pre></td></tr></table></figure><h1><center>消息队列</center></h1><blockquote><p>邮箱的扩展，比邮箱更方便，可传输不定长消息</p></blockquote><h2 id="创建">创建</h2><blockquote><p>动态：rt_mq_create</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//name：消息队列名，msg_size：每个消息的大小</span></span><br><span class="line"><span class="comment">//max_msgs：消息队列能容纳的最大消息数，flag：多个线程等待的排队方式</span></span><br><span class="line"><span class="comment">//(RT_IPC_FLAG_PRIO：挂起的线程按优先级顺序，RT_IPC_FLAG_FIFO：挂起的线程线程先进先出)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_mq_t</span> <span class="title function_">rt_mq_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name,</span></span><br><span class="line"><span class="params">                     <span class="type">rt_size_t</span>   msg_size,</span></span><br><span class="line"><span class="params">                     <span class="type">rt_size_t</span>   max_msgs,</span></span><br><span class="line"><span class="params">                     <span class="type">rt_uint8_t</span>  flag)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_mq_t</span> mq_ptr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="type">uint8_t</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line">mq_ptr = rt_mq_create(<span class="string">&quot;mq&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg), <span class="number">4</span>, RT_IPC_FLAG_FIFO);</span><br><span class="line"><span class="keyword">if</span>(mq_ptr == RT_NULL)</span><br><span class="line">&#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;mq_ptr rt_mq_create failed!\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> -RT_ENOMEM;  <span class="comment">//RT_ENOMEM：12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态：rt_mq_init</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mq：消息队列对象的指针，name：消息队列名，msgpool：指向存放消息的内存池的指针</span></span><br><span class="line"><span class="comment">//msg_size：每个消息的大小，pool_size：消息池的大小，即能容纳的消息数</span></span><br><span class="line"><span class="comment">//flag：多个线程等待的排队方式</span></span><br><span class="line"><span class="comment">//(RT_IPC_FLAG_PRIO：挂起的线程按照优先级顺序排队，RT_IPC_FLAG_FIFO：挂起的线程线程先进入先运行)</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mq_init</span><span class="params">(<span class="type">rt_mq_t</span>     mq,</span></span><br><span class="line"><span class="params">                    <span class="type">const</span> <span class="type">char</span> *name,</span></span><br><span class="line"><span class="params">                    <span class="type">void</span>       *msgpool,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_size_t</span>   msg_size,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_size_t</span>   pool_size,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_uint8_t</span>  flag)</span></span><br></pre></td></tr></table></figure><p>使用(个人实践不成功)</p><h2 id="发送">发送</h2><blockquote><p>rt_mq_send</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mq：消息队列对象的指针，buffer：消息的内容，size：消息的大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mq_send</span><span class="params">(<span class="type">rt_mq_t</span> mq, <span class="type">const</span> <span class="type">void</span> *buffer, <span class="type">rt_size_t</span> size)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_ssize_t</span> ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg</span> <span class="title">mq_msg</span>;</span></span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;12345qw&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(mq_msg.str, str1);</span><br><span class="line">mq_msg.len = <span class="built_in">strlen</span>(mq_msg.str);</span><br><span class="line">ret = rt_mq_send(mq_ptr, &amp;mq_msg, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg));</span><br><span class="line"><span class="keyword">if</span> (ret != RT_EOK) &#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;ret rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>rt_mq_urgent</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mq：消息队列对象的指针，buffer：消息的内容，size：消息的大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mq_urgent</span><span class="params">(<span class="type">rt_mq_t</span> mq, <span class="type">const</span> <span class="type">void</span> *buffer, <span class="type">rt_size_t</span> size)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_ssize_t</span> ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg</span> <span class="title">mq_msg</span>;</span></span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;12345qw&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(mq_msg.str, str1);</span><br><span class="line">mq_msg.len = <span class="built_in">strlen</span>(mq_msg.str);</span><br><span class="line">ret = rt_mq_urgent(mq_ptr, &amp;mq_msg, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg));</span><br><span class="line"><span class="keyword">if</span> (ret != RT_EOK) &#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;ret rt_mb_send failed!\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接收">接收</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mq：消息队列对象的指针，buffer：消息的内容</span></span><br><span class="line"><span class="comment">//size：消息的大小，timeout：RT_WAITING_FOREVER(阻塞)、RT_WAITING_NO(非阻塞)</span></span><br><span class="line"><span class="comment">//返回值：返回消息的实际长度大于零接收成功小于0接受失败</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_ssize_t</span> <span class="title function_">rt_mq_recv</span><span class="params">(<span class="type">rt_mq_t</span>    mq,</span></span><br><span class="line"><span class="params">                    <span class="type">void</span>      *buffer,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_size_t</span>  size,</span></span><br><span class="line"><span class="params">                    <span class="type">rt_int32_t</span> timeout)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_ssize_t</span> ret;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg</span> <span class="title">mq_msg</span>;</span></span><br><span class="line"></span><br><span class="line">ret = rt_mq_recv(mq_ptr, &amp;mq_msg, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> msg), RT_WAITING_FOREVER);</span><br><span class="line"><span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;rt_mq_recv is %s, the len is %d\r\n&quot;</span>, mq_msg.str, mq_msg.len);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    LOG_E(<span class="string">&quot;ret rt_mq_recv failed!\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除">删除</h2><blockquote><p>动态：rt_mq_delete</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mq：消息队列对象的指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mq_delete</span><span class="params">(<span class="type">rt_mq_t</span> mq)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rt_mq_delete(mq_ptr);</span><br></pre></td></tr></table></figure><blockquote><p>静态：rt_mq_detach</p></blockquote><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">rt_err_t</span> <span class="title function_">rt_mq_detach</span><span class="params">(<span class="type">rt_mq_t</span> mq)</span>;</span><br></pre></td></tr></table></figure><h1><center>信号</center></h1><blockquote><p>软中断信号，用来通知线程发生了异步事件,   异步通知(对硬件中断机制的一种模拟)</p><p>用做线程之间的异常通知、应急处理</p></blockquote><p>开启使能信号</p><img src="https://s2.loli.net/2024/09/21/LjNmXQTbc5oHZzq.webp" alt="开启步骤" style="zoom:50%;"><h2 id="安装">安装</h2><p>定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//signo：信号值，handler设置对信号值的处理方式</span></span><br><span class="line"></span><br><span class="line"><span class="type">rt_sighandler_t</span> <span class="title function_">rt_signal_install</span><span class="params">(<span class="type">int</span> signo, <span class="type">rt_sighandler_t</span> handler)</span></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #define SIGUSR1 30自带</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程 1 的信号处理函数 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread1_signal_handler</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">&#123;</span><br><span class="line">    rt_kprintf(<span class="string">&quot;thread1 received signal %d\n&quot;</span>, sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rt_signal_install(SIGUSR1, thread1_signal_handler);<span class="comment">/* 安装信号 */</span></span><br></pre></td></tr></table></figure><h2 id="阻塞-解除阻塞">阻塞/解除阻塞</h2><blockquote><p>阻塞：rt_signal_mask</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//signo：信号值</span><br><span class="line"></span><br><span class="line">void rt_signal_mask(int signo);</span><br></pre></td></tr></table></figure><blockquote><p>解除阻塞：rt_signal_unmask</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//signo：信号值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rt_signal_unmask</span><span class="params">(<span class="type">int</span> signo)</span>;</span><br><span class="line"></span><br><span class="line">rt_signal_unmask(SIGUSR1);<span class="comment">//解除阻塞</span></span><br></pre></td></tr></table></figure><h2 id="发送">发送</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建线程 1 */</span></span><br><span class="line">tid1 = rt_thread_create(<span class="string">&quot;thread1&quot;</span>,</span><br><span class="line">                        thread1_entry, RT_NULL,</span><br><span class="line">                        THREAD_STACK_SIZE,</span><br><span class="line">                        THREAD_PRIORITY, THREAD_TIMESLICE);</span><br><span class="line">                        </span><br><span class="line"><span class="comment">/* 发送信号 SIGUSR1 给线程 1 */</span></span><br><span class="line">rt_thread_kill(tid1, SIGUSR1);</span><br></pre></td></tr></table></figure><h2 id="等待">等待</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set：指定等待的信号，si：指向存储等到信号信息的指针，timeout：指定的等待时间</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rt_signal_wait</span><span class="params">(<span class="type">const</span> <span class="type">rt_sigset_t</span> *<span class="built_in">set</span>, <span class="type">rt_siginfo_t</span> *si, <span class="type">rt_int32_t</span> timeout)</span></span><br></pre></td></tr></table></figure><h1><center>全局变量(不推荐)</center></h1><ul><li><p>多个线程使用同一个全局变量，如果不互斥，那么存在抢占</p></li><li><p>全局变量太多，代码很难维护，可读性变差，也可能存在未知问题</p></li><li><p>代码之间耦合度过高，不分层</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;邮箱&lt;/center&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;开销比较低，效率比较高，邮箱中的每一封邮件只能容纳固定的 4 字节内容(也可以是指针)&lt;/p&gt;
&lt;p&gt;一个线程能够从任意一个邮箱接收和发送邮件&lt;/p&gt;
&lt;p&gt;多个线程能够向同一个邮箱发送邮件</summary>
      
    
    
    
    <category term="RT-Thread" scheme="https://xinzaigeek.68565200.xyz/categories/RT-Thread/"/>
    
    
    <category term="RT-Thread" scheme="https://xinzaigeek.68565200.xyz/tags/RT-Thread/"/>
    
  </entry>
  
  <entry>
    <title>博客CDN解析</title>
    <link href="https://xinzaigeek.68565200.xyz/post/e9f3074a.html"/>
    <id>https://xinzaigeek.68565200.xyz/post/e9f3074a.html</id>
    <published>2024-09-15T10:09:50.000Z</published>
    <updated>2024-10-25T01:30:15.956Z</updated>
    
    <content type="html"><![CDATA[<h1><center>HurricaneDNS解析博客</center></h1><p>首先需要一个域名，之前已经写过域名怎么注册，参考<a href="https://d3iiz.top/post/b7e3ace9.html">地址</a>。这只是个人推荐购买的地方，没有商业目的</p><p>购买完域名之后，我们打开HurricaneDNS：<a href="https://dns.he.net/">地址</a></p><p>先注册账号，注册过程按照提示填写注册即可</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/9rHzZocQWgap48L.webp" alt="注册账号" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>注册好之后，我们直接登陆，直接添加域名</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/4ILlDvqd7FkwuA1.webp" alt="添加域名" style="zoom: 40%;"></th></tr></thead><tbody></tbody></table><p>输入购买的域名</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/VsTESFPkj387ZMH.webp" alt="输入域名" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>进入添加记录</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/Kl28CdUDrSFE1aL.webp" alt="进入添加" style="zoom: 40%;"></th></tr></thead><tbody></tbody></table><p>添加对应的类型添加，按照如下方式添加<code>类型为A</code>，名称为<code>@</code>，IPv4地址为<code>185.199.108.153</code>，<strong>按照上述方式再添加以下三条记录，类型和名称和上述相同，IPv4地址分别为</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/g3k21tdcvyoixLP.webp" alt="添加" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>添加好后我们去购买域名的地方，<a href="https://mi.aliyun.com/?spm=5176.29045373.J_2177541330.5.3d1d183838ot1j#eyJwcm9kdWN0VHlwZSI6MiwicXVpY2tTZWFyY2giOiJbXCJcIl0iLCJrZXl3b3JkIjoiIiwiY29uc3RpdHV0ZUFyciI6WyIiXSwiZml4ZWRQcmljZVNlYXJjaFR5cGUiOiIiLCJxdWlja1NvcnQiOlsicHJpY2UiLCJhc2NlbmQiXSwibWF4U2FsZUF2YWlsRGF5IjoiIiwic2FsZUF2YWlsRGF5UmFuZ2UiOnsibWluU2FsZUF2YWlsRGF5IjoiIiwibWF4U2FsZUF2YWlsRGF5IjoiIn0sIm1pbkRvbWFpbkF2YWlsRGF5IjozMDAsImRvbWFpbkF2YWlsRGF5UmFuZ2UiOnsibWluRG9tYWluQXZhaWxEYXkiOjMwMCwibWF4RG9tYWluQXZhaWxEYXkiOiIifSwic2Vzc2lvbkNvZGUiOiIxZXhsWEVsYTZsRGhfb21sT2M5ZzUiLCJjb25zdGl0dXRlIjoiIiwibWluU2FsZUF2YWlsRGF5IjoiIiwibWF4RG9tYWluQXZhaWxEYXkiOiIiLCJ0YWIiOiJzZWxlY3RlZCJ9">地址</a>，进入控制台</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/aeqmkODdHWJR2Tt.webp" alt="进入控制台" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>进入域名管理</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/MJcFN2Q1eI7Wskq.webp" alt="域名管理" style="zoom: 40%;"></th></tr></thead><tbody></tbody></table><p>进入域名列表，点击管理</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/rnDvMPG4HOz3cKu.webp" alt="进入管理" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>进入DSN管理，修改DNS</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/MJa9YqTlo5r7ykf.webp" alt="修改DNS" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>将以下这些全部填入</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NS1.HE.NET、NS2.HE.NET、NS3.HE.NET、NS4.HE.NET、NE5.HE.NET</span><br></pre></td></tr></table></figure><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/I64lukWEKFfXGTQ.webp" alt="填入" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>每次上传好之后，需要去GitHub对应项目里面，进入设置，进入pages，设置一下域名</p><table><thead><tr><th><img src="https://s2.loli.net/2024/09/15/mO3v1W6yClHwI4s.webp" alt="设置域名" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><h1><center>cloudflare CDN解析</center></h1><h2 id="center-域名购买-center"><center>域名购买</center></h2><p>阿里可能需要实名认证等，在注册账号是，按照提示注册即可，购买期间若需补充其它信息，按要求补充即可</p><p>这里选择阿里云的域名，提供的这个的非常便宜实惠的域名，但是续费可能就是原价，可以一年换一次，购买：<a href="https://mi.aliyun.com/?spm=5176.29045373.J_2177541330.5.3d1d183838ot1j#eyJwcm9kdWN0VHlwZSI6MiwicXVpY2tTZWFyY2giOiJbXCJcIl0iLCJrZXl3b3JkIjoiIiwiY29uc3RpdHV0ZUFyciI6WyIiXSwiZml4ZWRQcmljZVNlYXJjaFR5cGUiOiJzZWxlY3RlZCIsInF1aWNrU29ydCI6WyJwcmljZSIsImFzY2VuZCJdLCJtYXhTYWxlQXZhaWxEYXkiOiIiLCJzYWxlQXZhaWxEYXlSYW5nZSI6eyJtaW5TYWxlQXZhaWxEYXkiOiIiLCJtYXhTYWxlQXZhaWxEYXkiOiIifSwibWluRG9tYWluQXZhaWxEYXkiOjMwMCwiZG9tYWluQXZhaWxEYXlSYW5nZSI6eyJtaW5Eb21haW5BdmFpbERheSI6MzAwLCJtYXhEb21haW5BdmFpbERheSI6IiJ9LCJzZXNzaW9uQ29kZSI6ImV6bXZHaF81WWEyVGtxNXZGMEs5cyIsImNvbnN0aXR1dGUiOiIiLCJtaW5TYWxlQXZhaWxEYXkiOiIiLCJtYXhEb21haW5BdmFpbERheSI6IiIsInRhYiI6InNlbGVjdGVkIn0=">地址</a>。</p><p>购买完成后，在控制台看是否成功，可能需要等待几分钟</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/PCDavO6Ws24dxqF.png" alt="控制台" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>进入控制台后，进入域名控制台</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/nxbOyZ9dekuaqiQ.png" alt="查看域名" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>这里可查看域名</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/C6uaRMOSYngUb3A.png" alt="域名列表" style="zoom:33%;"></th></tr></thead><tbody></tbody></table><h2 id="center-修改dns-center"><center>修改DNS</center></h2><p>在域名列表点击 管理</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/JHVeQP26MWrxYlF.png" alt="第一步" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>修改DNS，添加需要的</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/praL8wKd2TtJoqx.png" alt="修改DSN" style="zoom:33%;"></th></tr></thead><tbody></tbody></table><h2 id="center-域名购买-center"><center>域名购买</center></h2><p><a href="https://www.cloudflare-cn.com/">cloudflare地址</a>，进入后直接先注册账号</p><p>设置成中文，进入网站绑定域名</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/3dOVXtECnAIUvuM.png" alt="进入网站选项" style="zoom:33%;"></th></tr></thead><tbody></tbody></table><p>在左侧栏中进入网站一栏，点击右方添加站点，第一次可能没有这个，但中间有一个可以直接添加</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/2g4ZDBu73IUnQzL.png" alt="添加站点" style="zoom:33%;"></th></tr></thead><tbody></tbody></table><p>输入自己的域名，注意不要带<code>www</code>或者<code>https</code>，比如我的就直接填写<code>qinyu.space</code></p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/eOshYyxlUoM3JpP.png" alt="添加域名" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>选择套餐，<code>free</code>即可</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/CmZ18OLqXItDFw7.png" alt="选择套餐" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>点击继续后 cloudflare 会自动扫描域名的 dns 记录，如果是刚刚创建的域名，可能扫描的结果为空。<strong>截图中的几条记录可以不用管</strong></p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/vQ3KEqijzxAnGm4.png" alt="添加DNS记录" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>这一步很重要，点击添加记录，按照如下方式添加<code>类型为A</code>，名称为<code>@</code>，IPv4地址为<code>185.199.108.153</code>，<strong>按照上述方式再添加以下三条记录，类型和名称和上述相同，IPv4地址分别为</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>完成之后应该能看到列表中有以下四条这样的记录，除了名称是自己的域名外其他应该都和图中相同</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/tKYZCgTSnbExFhm.png" alt="添加后" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>上述添加的4条ip地址均是GitHub Pages 的 IP 地址，具体可查看<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">地址</a></p><p>点击继续后，往下滑 cloudflare 会要求将我们DNS服务器修改为以下图中所示的的服务器，可以先截个图或者存文档里</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/XynqkHMOZBagd6Y.png" alt="DNS服务器" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>点击下方继续后会有一个快速入门指南，里面的配置可以都开启：</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/yZEQ6RPhUNkgYfn.png" alt="配置都开启" style="zoom: 40%;"></th></tr></thead><tbody></tbody></table><p>回到上面讲述修改DNS，DNS服务器更改后生效需要一段时间，少则几分钟，慢则需要几个小时</p><p>返回 cloudflare，如果看到 “Cloudflare 正在保护您的站点”说明已经配置成功了：</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/cO1BGk7CXFNMeTU.png" alt="配置成功" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><h2 id="center-设置github-page-center"><center>设置Github page</center></h2><p>进入github.io对应的仓库，进入 <code>Settings</code>：</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/oe5MBzLKwDOriES.png" alt="进入设置" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>进入左栏中的<code>pages</code>，在 <code>Custom domain</code>中输入自己的域名，点击<code>save</code>，如果成功会显示下图：</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/x7vT54ZHGwgaWCM.png" alt="添加域名" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>这样就可以通过域名来访问自己的博客了，还可以在上图中勾选 <code>Enforcrs HTTPS</code>，这样网站仅会通过https提供服务</p><blockquote><p>如果如下图显示dns配置不正确，推测可能是使用了cloudflare后，GitHub验证DNS时返回的是cdn服务器的ip地址，而不是在cloudflare上开始配置的4个GitHub page的ip地址，可以在线dig一下自己的域名验证一下。不过只要网站能通过域名正常访问就没什么问题。</p><img src="https://s2.loli.net/2024/08/19/1aWPU4ry8Obgj9l.png" alt="提示" style="zoom:50%;"></blockquote><p>本文参考：<a href="https://qinyu.space/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%88%A9%E7%94%A8cloudflare%E5%8A%A0%E9%80%9Fgithub%E4%B8%BB%E9%A1%B5%E8%AE%BF%E9%97%AE/#%E9%85%8D%E7%BD%AE-cloudflare">地址</a></p><h2 id="center-cloudflare自动部署博客-center"><center>cloudflare自动部署博客</center></h2><p>新建部署，绑定GitHub账号选择对应仓库绑定即可</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/uFgSrPBvxpLb4zK.png" alt="新建部署" style="zoom:33%;"></th></tr></thead><tbody></tbody></table><p>绑定自己的域名，这里的域名可以设置成自己的子域名，这样就可以拥有两个不同域名的博客，详细设置看下文</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/sF9ChQeiypZRMO7.png" alt="绑定域名" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><h1><center>DNS解析填写</center></h1><p>首先进入我们购买域名的页面，这里以阿里为例，进入阿里控制台</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/18/vQn5qXW6f2om1Ul.webp" alt="进入控制台" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><p>进入域名列表，进入管理</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/18/AGVXw4joN2W867y.webp" alt="进入管理" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>这里的DNS修改，意思就是说，你DNS要选择哪家来控制你域名的解析，例如：如果你域名想在腾讯控制，填写解析，你就要先去腾讯的DNS服务添加你的域名，然后将服务地址复制到这里更换，更换完成之后，以后域名的相关解析就在腾讯控制，不在阿里控制了</p><p>这里一般选择一家即可，不能添加多家的DNS，这里我是配置到腾讯控制</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/18/AGVXw4joN2W867y.webp" alt="DNS修改" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>现在我们打开腾讯的DNS：<a href="https://console.dnspod.cn/">网址</a>，添加域名(可能要添加TXT记录在原域名解析里面添加后验证即可)，然后进入解析</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/18/rbXqHCJnjApLdu7.webp" alt="进入解析" style="zoom:33%;"></th></tr></thead><tbody></tbody></table><p>进入解析页面后，点击域名设置，可以看到我们腾讯所属的服务器，然后去阿里的域名管理将DNS修改成腾讯的服务器地址，则就完成了，如果你想更换别家的NDS也是相同的步骤，先添加域名，后查看服务器地址，再修改DNS</p><table><thead><tr><th><img src="https://s2.loli.net/2024/10/18/GkumatOXyT5VUez.webp" alt="查看服务器地址" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>现在来看解析里面应该怎么添加（以腾讯为例），对应的意思是什么。一般www.主域名等于主域名不能作为子域名使用</p><p>主机记录：</p><ul><li>@：则你原域名</li><li>如果写了别的则就是子域名，如：xinzai，则为xinzai.主域名（注意：www不能作为子域名）</li></ul><p>记录类型：</p><ul><li>A：将主机记录的域名解析到记录值的服务器地址</li><li>CNAME：将域名指向另一个域名地址，与其保持相同解析</li><li>TXT：一般添加域名等作为验证用，一般验证的时候会给出<code>主机记录</code>及<code>记录值</code></li><li>NS：一般是将子域名交给别家DNS解析，也就是，现在主域名是在腾讯DNS，子域名要在阿里解析，则需要选择NS</li></ul><p>记录值：</p><ul><li>记录类型为A：填写解析的服务器地址，例解析GitHub的静态博客，则将GitHub的服务器地址填写进入</li><li>记录类型为CNAME：填写域名，需要指向的域名</li><li>记录类型为TXT：按照需要验证的给出值填写即可</li><li>记录类型为NS：填写你要在哪家解析的服务地址（先去添加域名，再查看服务器地址）</li></ul><p>TTL ：</p><ul><li><strong>指解析记录在 DNS 服务器缓存的生存时间，数值越小则生效越快</strong></li><li>600：一般默认值，如不了解请保留 600 秒即可</li><li>3600：当记录值较少变动时，建议选择 3600 秒，有利于提升解析速度</li><li>60：当记录值频繁变动，可选择 60 秒，但解析速度可能略受影响</li></ul><table><thead><tr><th><img src="https://s2.loli.net/2024/10/18/Tl2pAqLsgbdf1KD.webp" alt="解析例图"></th></tr></thead><tbody></tbody></table><p>目前我是这样的，域名在阿里购买，再阿里将DNS修改为cloudflare ，后面解析都在cloudflare 添加和删除</p><p>主域名在cloudflare自动部署页面绑定，再使用NS解析，将子域名指向阿里、腾讯，在阿里、腾讯添加A解析(GitHub服务地址)，再去GitHub页面设置绑定子域名，这样就两个域名访问博客</p><h1>Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源(失效)</h1><p>使用免费图床，参考已写博文：<a href="https://68565200.xyz/post/2ec6e870">链接</a></p><h2 id="center-前言-center"><center>前言</center></h2><p>本文通过学习此博客编写：<a href="https://www.haoyep.com/posts/github-graph-beds-cdn/#%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D">地址</a>，通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 静态资源(GitHub图床)，自动实现 CDN 资源的海内外分流，加速博客访问速度</p><h2 id="center-配置-center"><center>配置</center></h2><p>首先，要配置好域名以及DNS，本人已经写了配置域名以及 Cloudflare DNS加速部署博客：<a href="https://d3iiz.top/post/b7e3ace9.html">地址</a></p><p>进入部署好的DNS</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/wByunPAEVNeRHhr.png" alt="进入" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>在 DNS 配置中，新增一条 CNAME 解析记录，并启用代理。 如图，我这里是将 <a href="http://cdn.haoyep.com">cdn.haoyep.com</a> 解析到了 <a href="http://jsd.cdn.zzko.cn">jsd.cdn.zzko.cn</a>，并使用 Cloudflare 代理（点亮小云朵）</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/sWP96IXVZEliOY2.png" alt="添加记录" style="zoom: 33%;"></th></tr></thead><tbody></tbody></table><p>目标：资源链接都使用 <a href="http://cdn.haoyep.com">cdn.haoyep.com</a>，Cloudflare 在代理 <a href="http://cdn.haoyep.com">cdn.haoyep.com</a> 时，判断请求来源是国内，则将 <a href="http://cdn.haoyep.com">cdn.haoyep.com</a> 重定向到 <a href="http://jsd.cdn.zzko.cn">jsd.cdn.zzko.cn</a>；国外的请求则重定向到 <a href="http://cdn.jsdelivr.net">cdn.jsdelivr.net</a>。</p><h3 id="center-配置国内重定向-center"><center>配置国内重定向</center></h3><p>规则名称 （必需）：标注国内，方便区分</p><p>自定义筛选表达式：<code>(http.host eq &quot;cdn.haoyep.com&quot; and ip.geoip.country eq &quot;CN&quot;)</code></p><p>URL 重定向</p><ul><li>类型：<code>动态</code></li><li>表达式：<code>concat(&quot;https://jsd.cdn.zzko.cn&quot;, http.request.uri.path)</code></li><li>状态代码：<code>302</code></li></ul><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/RtB3Af12IjbdZa7.png" alt="配置国内重定向" style="zoom: 50%;"></th></tr></thead><tbody></tbody></table><h3 id="center-配置国外重定向-center"><center>配置国外重定向</center></h3><p>规则名称 （必需）：标注国外，方便区分</p><p>自定义筛选表达式：(<code>http.host eq &quot;cdn.haoyep.com&quot; and ip.geoip.country ne &quot;CN&quot;</code>)</p><p>URL 重定向</p><ul><li>类型：<code>动态</code></li><li>表达式：<code>concat(&quot;https://cdn.jsdelivr.net&quot;, http.request.uri.path)</code></li><li>状态代码：<code>302</code></li></ul><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/kcNSnDshqaTyHrU.png" alt="配置国外重定向" style="zoom:40%;"></th></tr></thead><tbody></tbody></table><blockquote><p>技巧：<br>HTTP 重定向状态选择302而不是301。虽然两类请求都会被 Cloudflare 缓存，但301理论上是永久跳转而302是临时跳转，因此301可能会导致长时间缓存，不利于今后修改重定向到新地址。</p></blockquote><h3 id="center-picgo-设置-center"><center>PicGo 设置</center></h3><p>我们已经除了GitHub上传图片教程：<a href="https://blog.csdn.net/qq_65047384/article/details/140401010">地址</a></p><p>这里只需修改，自定义域名连接里面的<code>cdn.haoyep.com</code>，修改成自己的，其它按之前的配置即可</p><table><thead><tr><th><img src="https://s2.loli.net/2024/08/19/lGdpRj7S5ngZ9XA.png" alt="PicGo配置" style="zoom:50%;"></th></tr></thead><tbody></tbody></table><p>之前已经上传的图片，也只需要将图片链接中的<code>cdn.haoyep.com</code>，修改成自己的，在Typora可以ctrl+f，直接全部替换即可</p><p>后续没有什么效果，已转至云图床</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;center&gt;HurricaneDNS解析博客&lt;/center&gt;&lt;/h1&gt;
&lt;p&gt;首先需要一个域名，之前已经写过域名怎么注册，参考&lt;a href=&quot;https://d3iiz.top/post/b7e3ace9.html&quot;&gt;地址&lt;/a&gt;。这只是个人推荐购买的地方，没有商</summary>
      
    
    
    
    <category term="技术积累记录" scheme="https://xinzaigeek.68565200.xyz/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="博客CDN解析" scheme="https://xinzaigeek.68565200.xyz/tags/%E5%8D%9A%E5%AE%A2CDN%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
</feed>
